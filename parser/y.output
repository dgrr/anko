
0: shift/reduce conflict (shift 5(0), red'n 177(0)) on ';'
0: shift/reduce conflict (shift 8(0), red'n 177(0)) on '\n'
state 0
	$accept: .compstmt $end 
	opt_term: .    (177)

	';'  shift 5
	'\n'  shift 8
	.  reduce 177 (src line 1148)

	compstmt  goto 1
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

state 1
	$accept:  compstmt.$end 

	$end  accept
	.  error


 2: reduce/reduce conflict  (red'ns 1 and 5) on $end
 2: reduce/reduce conflict  (red'ns 1 and 5) on CASE
 2: reduce/reduce conflict  (red'ns 1 and 5) on DEFAULT
 2: reduce/reduce conflict  (red'ns 1 and 5) on '}'
 2: reduce/reduce conflict  (red'ns 1 and 5) on '\n'
state 2
	compstmt:  opt_term.    (1)
	stmts:  opt_term.stmt 
	stmt: .    (5)
	exprs: .    (63)

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	RETURN  shift 13
	VAR  shift 49
	THROW  shift 14
	IF  shift 27
	FOR  shift 28
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MODULE  shift 15
	TRY  shift 16
	BREAK  shift 11
	CONTINUE  shift 12
	SWITCH  shift 29
	GO  shift 17
	MAKE  shift 41
	OPCHAN  shift 58
	EQOPCHAN  reduce 63 (src line 497)
	LEN  shift 39
	DELETE  shift 18
	CLOSE  shift 19
	MAP  shift 42
	IMPORT  shift 30
	AS  reduce 63 (src line 497)
	'='  reduce 63 (src line 497)
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 36
	','  reduce 63 (src line 497)
	';'  reduce 5 (src line 143)
	'['  shift 34
	'!'  shift 59
	.  reduce 1 (src line 108)

	stmt  goto 9
	stmt_var_or_lets  goto 10
	stmt_import  goto 23
	stmt_var  goto 25
	stmt_lets  goto 26
	stmt_if  goto 20
	stmt_for  goto 21
	stmt_switch  goto 22
	exprs  goto 50
	expr  goto 24
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

3: shift/reduce conflict (shift 8(0), red'n 177(0)) on '\n'
state 3
	compstmt:  stmts.opt_term 
	stmts:  stmts.term stmt 
	opt_term: .    (177)

	';'  shift 5
	'\n'  shift 8
	.  reduce 177 (src line 1148)

	opt_term  goto 67
	term  goto 68
	newlines  goto 6
	newline  goto 7

state 4
	opt_term:  term.    (178)

	.  reduce 178 (src line 1150)


5: shift/reduce conflict (shift 8(0), red'n 181(0)) on '\n'
state 5
	term:  ';'.newlines 
	term:  ';'.    (181)

	'\n'  shift 8
	.  reduce 181 (src line 1155)

	newlines  goto 69
	newline  goto 7

6: shift/reduce conflict (shift 8(0), red'n 180(0)) on '\n'
state 6
	term:  newlines.    (180)
	newlines:  newlines.newline 

	'\n'  shift 8
	.  reduce 180 (src line 1154)

	newline  goto 70

state 7
	newlines:  newline.    (184)

	.  reduce 184 (src line 1161)


state 8
	newline:  '\n'.    (186)

	.  reduce 186 (src line 1165)


state 9
	stmts:  opt_term stmt.    (3)

	.  reduce 3 (src line 118)


state 10
	stmt:  stmt_var_or_lets.    (6)

	.  reduce 6 (src line 148)


state 11
	stmt:  BREAK.    (7)

	.  reduce 7 (src line 152)


state 12
	stmt:  CONTINUE.    (8)

	.  reduce 8 (src line 157)


state 13
	stmt:  RETURN.exprs 
	exprs: .    (63)

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  reduce 63 (src line 497)

	exprs  goto 71
	expr  goto 72
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 14
	stmt:  THROW.expr 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 74
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 15
	stmt:  MODULE.IDENT '{' compstmt '}' 

	IDENT  shift 75
	.  error


state 16
	stmt:  TRY.'{' compstmt '}' CATCH IDENT '{' compstmt '}' FINALLY '{' compstmt '}' 
	stmt:  TRY.'{' compstmt '}' CATCH '{' compstmt '}' FINALLY '{' compstmt '}' 
	stmt:  TRY.'{' compstmt '}' CATCH IDENT '{' compstmt '}' 
	stmt:  TRY.'{' compstmt '}' CATCH '{' compstmt '}' 

	'{'  shift 76
	.  error


state 17
	stmt:  GO.IDENT '(' exprs VARARG ')' 
	stmt:  GO.IDENT '(' exprs ')' 
	stmt:  GO.expr '(' exprs VARARG ')' 
	stmt:  GO.expr '(' exprs ')' 

	IDENT  shift 77
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 78
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 18
	stmt:  DELETE.'(' expr ')' 
	stmt:  DELETE.'(' expr ',' expr ')' 

	'('  shift 79
	.  error


state 19
	stmt:  CLOSE.'(' expr ')' 

	'('  shift 80
	.  error


state 20
	stmt:  stmt_if.    (23)
	stmt_if:  stmt_if.ELSE IF expr '{' compstmt '}' 
	stmt_if:  stmt_if.ELSE '{' compstmt '}' 

	ELSE  shift 81
	.  reduce 23 (src line 232)


state 21
	stmt:  stmt_for.    (24)

	.  reduce 24 (src line 236)


state 22
	stmt:  stmt_switch.    (25)

	.  reduce 25 (src line 240)


state 23
	stmt:  stmt_import.    (26)

	.  reduce 26 (src line 244)


24: shift/reduce conflict (shift 83(2), red'n 64(0)) on EQOPCHAN
24: shift/reduce conflict (shift 82(2), red'n 64(0)) on '='
state 24
	stmt:  expr.    (27)
	stmt_lets:  expr.'=' expr 
	stmt_lets:  expr.EQOPCHAN expr 
	exprs:  expr.    (64)
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	EQOPCHAN  shift 83
	AS  reduce 64 (src line 502)
	'='  shift 82
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	','  reduce 64 (src line 502)
	'['  shift 87
	'.'  shift 89
	.  reduce 27 (src line 248)


state 25
	stmt_var_or_lets:  stmt_var.    (28)

	.  reduce 28 (src line 254)


state 26
	stmt_var_or_lets:  stmt_lets.    (29)

	.  reduce 29 (src line 259)


state 27
	stmt_if:  IF.expr '{' compstmt '}' 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 116
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

 28: reduce/reduce conflict  (red'ns 104 and 63) on ','
state 28
	stmt_for:  FOR.'{' compstmt '}' 
	stmt_for:  FOR.expr_idents IN expr '{' compstmt '}' 
	stmt_for:  FOR.expr '{' compstmt '}' 
	stmt_for:  FOR.';' ';' '{' compstmt '}' 
	stmt_for:  FOR.';' ';' expr '{' compstmt '}' 
	stmt_for:  FOR.';' expr ';' '{' compstmt '}' 
	stmt_for:  FOR.';' expr ';' expr '{' compstmt '}' 
	stmt_for:  FOR.stmt_var_or_lets ';' ';' '{' compstmt '}' 
	stmt_for:  FOR.stmt_var_or_lets ';' ';' expr '{' compstmt '}' 
	stmt_for:  FOR.stmt_var_or_lets ';' expr ';' '{' compstmt '}' 
	stmt_for:  FOR.stmt_var_or_lets ';' expr ';' expr '{' compstmt '}' 
	expr_idents: .    (104)
	exprs: .    (63)

	IDENT  shift 122
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	VAR  shift 49
	IN  reduce 104 (src line 703)
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 117
	'('  shift 36
	';'  shift 120
	'['  shift 34
	'!'  shift 59
	.  reduce 63 (src line 497)

	stmt_var_or_lets  goto 121
	stmt_var  goto 25
	stmt_lets  goto 26
	exprs  goto 50
	expr  goto 119
	expr_idents  goto 118
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 29
	stmt_switch:  SWITCH.expr '{' opt_newlines stmt_switch_cases opt_newlines '}' 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 123
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 30
	stmt_import:  IMPORT.expr 
	stmt_import:  IMPORT.expr AS IDENT 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 124
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 31
	expr:  expr_member_or_ident.    (67)

	.  reduce 67 (src line 523)


state 32
	expr:  expr_literals.    (68)

	.  reduce 68 (src line 528)


state 33
	expr:  FUNC.'(' expr_idents ')' '{' compstmt '}' 
	expr:  FUNC.'(' expr_idents VARARG ')' '{' compstmt '}' 
	expr:  FUNC.IDENT '(' expr_idents ')' '{' compstmt '}' 
	expr:  FUNC.IDENT '(' expr_idents VARARG ')' '{' compstmt '}' 

	IDENT  shift 126
	'('  shift 125
	.  error


34: shift/reduce conflict (shift 127(0), red'n 182(0)) on ']'
34: shift/reduce conflict (shift 8(0), red'n 182(0)) on '\n'
state 34
	expr:  '['.']' 
	expr:  '['.opt_newlines exprs opt_comma_newlines ']' 
	slice_count:  '['.']' 
	slice_count:  '['.']' slice_count 
	opt_newlines: .    (182)

	']'  shift 127
	'\n'  shift 8
	.  reduce 182 (src line 1157)

	opt_newlines  goto 128
	newlines  goto 129
	newline  goto 7

state 35
	expr:  slice_count.type_data '{' opt_newlines exprs opt_comma_newlines '}' 

	IDENT  shift 131
	CHAN  shift 135
	STRUCT  shift 136
	MAP  shift 134
	'*'  shift 132
	'['  shift 137
	.  error

	type_data  goto 130
	slice_count  goto 133

state 36
	stmt_lets:  '('.expr_idents ')' '=' exprs 
	expr:  '('.expr ')' 
	expr_idents: .    (104)

	IDENT  shift 122
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  reduce 104 (src line 703)

	expr  goto 139
	expr_idents  goto 138
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

37: shift/reduce conflict (shift 140(0), red'n 121(0)) on '('
state 37
	expr:  IDENT.'(' exprs VARARG ')' 
	expr:  IDENT.'(' exprs VARARG ')' '?' 
	expr:  IDENT.'(' exprs ')' 
	expr:  IDENT.'(' exprs ')' '?' 
	expr_ident:  IDENT.    (121)

	'('  shift 140
	.  reduce 121 (src line 818)


38: shift/reduce conflict (shift 141(0), red'n 119(0)) on '['
state 38
	expr:  expr_ident.'[' expr ']' 
	expr_member_or_ident:  expr_ident.    (119)
	expr_slice:  expr_ident.'[' expr ':' expr ']' 
	expr_slice:  expr_ident.'[' expr ':' ']' 
	expr_slice:  expr_ident.'[' ':' expr ']' 
	expr_slice:  expr_ident.'[' ':' expr ':' expr ']' 
	expr_slice:  expr_ident.'[' expr ':' expr ':' expr ']' 

	'['  shift 141
	.  reduce 119 (src line 806)


state 39
	expr:  LEN.'(' expr ')' 

	'('  shift 142
	.  error


state 40
	expr:  NEW.'(' type_data ')' 

	'('  shift 143
	.  error


state 41
	expr:  MAKE.'(' type_data ')' 
	expr:  MAKE.'(' type_data ',' expr ')' 
	expr:  MAKE.'(' type_data ',' expr ',' expr ')' 
	expr:  MAKE.'(' TYPE IDENT ',' expr ')' 

	'('  shift 144
	.  error


state 42
	expr:  MAP.'{' opt_newlines expr_map opt_comma_newlines '}' 
	expr:  MAP.'[' type_data ']' type_data '{' opt_newlines expr_map opt_comma_newlines '}' 

	'{'  shift 145
	'['  shift 146
	.  error


43: shift/reduce conflict (shift 8(0), red'n 182(0)) on '\n'
state 43
	expr:  '{'.opt_newlines expr_map opt_comma_newlines '}' 
	opt_newlines: .    (182)

	'\n'  shift 8
	.  reduce 182 (src line 1157)

	opt_newlines  goto 147
	newlines  goto 129
	newline  goto 7

state 44
	expr:  expr_slice.    (99)

	.  reduce 99 (src line 689)


state 45
	expr:  expr_chan.    (100)

	.  reduce 100 (src line 694)


state 46
	expr:  expr_unary.    (101)

	.  reduce 101 (src line 699)


state 47
	expr:  expr_binary.    (102)

	.  reduce 102 (src line 700)


state 48
	expr:  expr_lets.    (103)

	.  reduce 103 (src line 701)


state 49
	stmt_var:  VAR.expr_idents '=' exprs 
	expr_idents: .    (104)

	IDENT  shift 149
	.  reduce 104 (src line 703)

	expr_idents  goto 148

state 50
	stmt_lets:  exprs.'=' exprs 
	stmt_lets:  exprs.AS '(' expr_idents ')' 
	stmt_lets:  exprs.AS exprs 
	stmt_lets:  exprs.EQOPCHAN expr 
	exprs:  exprs.',' opt_newlines expr 
	exprs:  exprs.',' opt_newlines expr_ident 

	EQOPCHAN  shift 152
	AS  shift 151
	'='  shift 150
	','  shift 153
	.  error


state 51
	expr_member_or_ident:  expr_member.    (118)

	.  reduce 118 (src line 801)


state 52
	expr_literals:  '-'.NUMBER 
	expr_unary:  '-'.expr 

	IDENT  shift 37
	NUMBER  shift 154
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 155
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 53
	expr_literals:  NUMBER.    (123)

	.  reduce 123 (src line 836)


state 54
	expr_literals:  STRING.    (124)

	.  reduce 124 (src line 846)


state 55
	expr_literals:  TRUE.    (125)

	.  reduce 125 (src line 851)


state 56
	expr_literals:  FALSE.    (126)

	.  reduce 126 (src line 856)


state 57
	expr_literals:  NIL.    (127)

	.  reduce 127 (src line 861)


state 58
	expr_chan:  OPCHAN.expr 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 156
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 59
	expr_unary:  '!'.expr 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 157
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 60
	expr_unary:  '^'.expr 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 158
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 61
	expr_unary:  '&'.expr 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 159
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 62
	expr_unary:  '*'.expr 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 160
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 63
	expr_binary:  op_multiply.    (148)

	.  reduce 148 (src line 965)


state 64
	expr_binary:  op_add.    (149)

	.  reduce 149 (src line 971)


state 65
	expr_binary:  op_comparison.    (150)

	.  reduce 150 (src line 976)


state 66
	expr_binary:  op_binary.    (151)

	.  reduce 151 (src line 981)


state 67
	compstmt:  stmts opt_term.    (2)

	.  reduce 2 (src line 113)


 68: reduce/reduce conflict  (red'ns 178 and 5) on $end
 68: reduce/reduce conflict  (red'ns 178 and 5) on CASE
 68: reduce/reduce conflict  (red'ns 178 and 5) on DEFAULT
 68: reduce/reduce conflict  (red'ns 178 and 5) on '}'
 68: reduce/reduce conflict  (red'ns 178 and 5) on '\n'
state 68
	stmts:  stmts term.stmt 
	opt_term:  term.    (178)
	stmt: .    (5)
	exprs: .    (63)

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	RETURN  shift 13
	VAR  shift 49
	THROW  shift 14
	IF  shift 27
	FOR  shift 28
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MODULE  shift 15
	TRY  shift 16
	BREAK  shift 11
	CONTINUE  shift 12
	SWITCH  shift 29
	GO  shift 17
	MAKE  shift 41
	OPCHAN  shift 58
	EQOPCHAN  reduce 63 (src line 497)
	LEN  shift 39
	DELETE  shift 18
	CLOSE  shift 19
	MAP  shift 42
	IMPORT  shift 30
	AS  reduce 63 (src line 497)
	'='  reduce 63 (src line 497)
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 36
	','  reduce 63 (src line 497)
	'['  shift 34
	'!'  shift 59
	.  reduce 5 (src line 143)

	stmt  goto 161
	stmt_var_or_lets  goto 10
	stmt_import  goto 23
	stmt_var  goto 25
	stmt_lets  goto 26
	stmt_if  goto 20
	stmt_for  goto 21
	stmt_switch  goto 22
	exprs  goto 50
	expr  goto 24
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

69: shift/reduce conflict (shift 8(0), red'n 179(0)) on '\n'
state 69
	term:  ';' newlines.    (179)
	newlines:  newlines.newline 

	'\n'  shift 8
	.  reduce 179 (src line 1152)

	newline  goto 70

state 70
	newlines:  newlines newline.    (185)

	.  reduce 185 (src line 1163)


state 71
	stmt:  RETURN exprs.    (9)
	exprs:  exprs.',' opt_newlines expr 
	exprs:  exprs.',' opt_newlines expr_ident 

	','  shift 153
	.  reduce 9 (src line 162)


state 72
	exprs:  expr.    (64)
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 64 (src line 502)


state 73
	expr:  '('.expr ')' 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 139
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 74
	stmt:  THROW expr.    (10)
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 10 (src line 167)


state 75
	stmt:  MODULE IDENT.'{' compstmt '}' 

	'{'  shift 162
	.  error


76: shift/reduce conflict (shift 5(0), red'n 177(0)) on ';'
76: shift/reduce conflict (shift 8(0), red'n 177(0)) on '\n'
state 76
	stmt:  TRY '{'.compstmt '}' CATCH IDENT '{' compstmt '}' FINALLY '{' compstmt '}' 
	stmt:  TRY '{'.compstmt '}' CATCH '{' compstmt '}' FINALLY '{' compstmt '}' 
	stmt:  TRY '{'.compstmt '}' CATCH IDENT '{' compstmt '}' 
	stmt:  TRY '{'.compstmt '}' CATCH '{' compstmt '}' 
	opt_term: .    (177)

	';'  shift 5
	'\n'  shift 8
	.  reduce 177 (src line 1148)

	compstmt  goto 163
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

77: shift/reduce conflict (shift 164(0), red'n 121(0)) on '('
state 77
	stmt:  GO IDENT.'(' exprs VARARG ')' 
	stmt:  GO IDENT.'(' exprs ')' 
	expr:  IDENT.'(' exprs VARARG ')' 
	expr:  IDENT.'(' exprs VARARG ')' '?' 
	expr:  IDENT.'(' exprs ')' 
	expr:  IDENT.'(' exprs ')' '?' 
	expr_ident:  IDENT.    (121)

	'('  shift 164
	.  reduce 121 (src line 818)


state 78
	stmt:  GO expr.'(' exprs VARARG ')' 
	stmt:  GO expr.'(' exprs ')' 
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 165
	'['  shift 87
	'.'  shift 89
	.  error


state 79
	stmt:  DELETE '('.expr ')' 
	stmt:  DELETE '('.expr ',' expr ')' 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 166
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 80
	stmt:  CLOSE '('.expr ')' 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 167
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 81
	stmt_if:  stmt_if ELSE.IF expr '{' compstmt '}' 
	stmt_if:  stmt_if ELSE.'{' compstmt '}' 

	IF  shift 168
	'{'  shift 169
	.  error


state 82
	stmt_lets:  expr '='.expr 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 170
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 83
	stmt_lets:  expr EQOPCHAN.expr 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 171
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 84
	expr:  expr '?'.expr ':' expr 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 172
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 85
	expr:  expr NILCOALESCE.expr 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 173
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 86
	expr:  expr '('.exprs VARARG ')' 
	expr:  expr '('.exprs VARARG ')' '?' 
	expr:  expr '('.exprs ')' 
	expr:  expr '('.exprs ')' '?' 
	exprs: .    (63)

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  reduce 63 (src line 497)

	exprs  goto 174
	expr  goto 72
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 87
	expr:  expr '['.expr ']' 
	expr_slice:  expr '['.expr ':' expr ']' 
	expr_slice:  expr '['.expr ':' ']' 
	expr_slice:  expr '['.':' expr ']' 
	expr_slice:  expr '['.':' expr ':' expr ']' 
	expr_slice:  expr '['.expr ':' expr ':' expr ']' 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	':'  shift 176
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 175
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 88
	expr:  expr IN.expr 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 177
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 89
	expr_member:  expr '.'.IDENT 

	IDENT  shift 178
	.  error


state 90
	expr_chan:  expr OPCHAN.expr 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 179
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 91
	expr_lets:  expr PLUSPLUS.    (152)

	.  reduce 152 (src line 987)


state 92
	expr_lets:  expr MINUSMINUS.    (153)

	.  reduce 153 (src line 996)


state 93
	expr_lets:  expr PLUSEQ.expr 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 180
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 94
	expr_lets:  expr MINUSEQ.expr 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 181
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 95
	expr_lets:  expr OREQ.expr 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 182
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 96
	expr_lets:  expr MULEQ.expr 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 183
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 97
	expr_lets:  expr DIVEQ.expr 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 184
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 98
	expr_lets:  expr ANDEQ.expr 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 185
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 99
	op_multiply:  expr '*'.expr 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 186
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 100
	op_multiply:  expr '/'.expr 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 187
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 101
	op_multiply:  expr '%'.expr 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 188
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 102
	op_multiply:  expr SHIFTLEFT.expr 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 189
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 103
	op_multiply:  expr SHIFTRIGHT.expr 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 190
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 104
	op_multiply:  expr '&'.expr 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 191
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 105
	op_add:  expr '+'.expr 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 192
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 106
	op_add:  expr '-'.expr 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 193
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 107
	op_add:  expr '|'.expr 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 194
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 108
	op_comparison:  expr EQEQ.expr 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 195
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 109
	op_comparison:  expr NEQ.expr 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 196
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 110
	op_comparison:  expr '<'.expr 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 197
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 111
	op_comparison:  expr LE.expr 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 198
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 112
	op_comparison:  expr '>'.expr 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 199
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 113
	op_comparison:  expr GE.expr 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 200
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 114
	op_binary:  expr ANDAND.expr 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 201
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 115
	op_binary:  expr OROR.expr 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 202
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 116
	stmt_if:  IF expr.'{' compstmt '}' 
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'{'  shift 203
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  error


117: shift/reduce conflict (shift 8(0), red'n 182(0)) on '\n'
 117: reduce/reduce conflict  (red'ns 182 and 177) on IDENT
 117: reduce/reduce conflict  (red'ns 182 and 177) on NUMBER
 117: reduce/reduce conflict  (red'ns 182 and 177) on STRING
 117: reduce/reduce conflict  (red'ns 182 and 177) on FUNC
 117: reduce/reduce conflict  (red'ns 182 and 177) on NEW
 117: reduce/reduce conflict  (red'ns 182 and 177) on TRUE
 117: reduce/reduce conflict  (red'ns 182 and 177) on FALSE
 117: reduce/reduce conflict  (red'ns 182 and 177) on NIL
 117: reduce/reduce conflict  (red'ns 182 and 177) on MAKE
 117: reduce/reduce conflict  (red'ns 182 and 177) on OPCHAN
 117: reduce/reduce conflict  (red'ns 182 and 177) on LEN
 117: reduce/reduce conflict  (red'ns 182 and 177) on MAP
 117: reduce/reduce conflict  (red'ns 182 and 177) on '-'
 117: reduce/reduce conflict  (red'ns 182 and 177) on '^'
 117: reduce/reduce conflict  (red'ns 182 and 177) on '*'
 117: reduce/reduce conflict  (red'ns 182 and 177) on '&'
 117: reduce/reduce conflict  (red'ns 182 and 177) on '{'
 117: reduce/reduce conflict  (red'ns 182 and 177) on '}'
 117: reduce/reduce conflict  (red'ns 182 and 177) on '('
 117: reduce/reduce conflict  (red'ns 182 and 177) on ','
117: shift/reduce conflict (shift 5(0), red'n 177(0)) on ';'
 117: reduce/reduce conflict  (red'ns 182 and 177) on '['
 117: reduce/reduce conflict  (red'ns 182 and 177) on '!'
117: shift/reduce conflict (shift 8(0), red'n 177(0)) on '\n'
state 117
	stmt_for:  FOR '{'.compstmt '}' 
	expr:  '{'.opt_newlines expr_map opt_comma_newlines '}' 
	opt_newlines: .    (182)
	opt_term: .    (177)

	';'  shift 5
	'\n'  shift 8
	.  reduce 177 (src line 1148)

	compstmt  goto 204
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	opt_newlines  goto 147
	newlines  goto 205
	newline  goto 7

state 118
	stmt_for:  FOR expr_idents.IN expr '{' compstmt '}' 
	expr_idents:  expr_idents.',' opt_newlines IDENT 

	IN  shift 206
	','  shift 207
	.  error


119: shift/reduce conflict (shift 83(2), red'n 64(0)) on EQOPCHAN
119: shift/reduce conflict (shift 82(2), red'n 64(0)) on '='
state 119
	stmt_lets:  expr.'=' expr 
	stmt_lets:  expr.EQOPCHAN expr 
	stmt_for:  FOR expr.'{' compstmt '}' 
	exprs:  expr.    (64)
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	EQOPCHAN  shift 83
	'='  shift 82
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'{'  shift 208
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 64 (src line 502)


state 120
	stmt_for:  FOR ';'.';' '{' compstmt '}' 
	stmt_for:  FOR ';'.';' expr '{' compstmt '}' 
	stmt_for:  FOR ';'.expr ';' '{' compstmt '}' 
	stmt_for:  FOR ';'.expr ';' expr '{' compstmt '}' 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	';'  shift 209
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 210
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 121
	stmt_for:  FOR stmt_var_or_lets.';' ';' '{' compstmt '}' 
	stmt_for:  FOR stmt_var_or_lets.';' ';' expr '{' compstmt '}' 
	stmt_for:  FOR stmt_var_or_lets.';' expr ';' '{' compstmt '}' 
	stmt_for:  FOR stmt_var_or_lets.';' expr ';' expr '{' compstmt '}' 

	';'  shift 211
	.  error


 122: reduce/reduce conflict  (red'ns 105 and 121) on IN
122: shift/reduce conflict (shift 140(0), red'n 121(0)) on '('
 122: reduce/reduce conflict  (red'ns 105 and 121) on ')'
 122: reduce/reduce conflict  (red'ns 105 and 121) on ','
state 122
	expr:  IDENT.'(' exprs VARARG ')' 
	expr:  IDENT.'(' exprs VARARG ')' '?' 
	expr:  IDENT.'(' exprs ')' 
	expr:  IDENT.'(' exprs ')' '?' 
	expr_idents:  IDENT.    (105)
	expr_ident:  IDENT.    (121)

	IN  reduce 105 (src line 707)
	'('  shift 140
	')'  reduce 105 (src line 707)
	','  reduce 105 (src line 707)
	.  reduce 121 (src line 818)


state 123
	stmt_switch:  SWITCH expr.'{' opt_newlines stmt_switch_cases opt_newlines '}' 
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'{'  shift 212
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  error


state 124
	stmt_import:  IMPORT expr.    (30)
	stmt_import:  IMPORT expr.AS IDENT 
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	AS  shift 213
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 30 (src line 264)


state 125
	expr:  FUNC '('.expr_idents ')' '{' compstmt '}' 
	expr:  FUNC '('.expr_idents VARARG ')' '{' compstmt '}' 
	expr_idents: .    (104)

	IDENT  shift 149
	.  reduce 104 (src line 703)

	expr_idents  goto 214

state 126
	expr:  FUNC IDENT.'(' expr_idents ')' '{' compstmt '}' 
	expr:  FUNC IDENT.'(' expr_idents VARARG ')' '{' compstmt '}' 

	'('  shift 215
	.  error


127: shift/reduce conflict (shift 137(0), red'n 75(0)) on '['
 127: reduce/reduce conflict  (red'ns 75 and 116) on '*'
127: shift/reduce conflict (shift 137(0), red'n 116(0)) on '['
state 127
	expr:  '[' ']'.    (75)
	slice_count:  '[' ']'.    (116)
	slice_count:  '[' ']'.slice_count 

	IDENT  reduce 116 (src line 791)
	CHAN  reduce 116 (src line 791)
	STRUCT  reduce 116 (src line 791)
	MAP  reduce 116 (src line 791)
	'['  shift 137
	.  reduce 75 (src line 562)

	slice_count  goto 216

state 128
	expr:  '[' opt_newlines.exprs opt_comma_newlines ']' 
	exprs: .    (63)

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  reduce 63 (src line 497)

	exprs  goto 217
	expr  goto 72
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

129: shift/reduce conflict (shift 8(0), red'n 183(0)) on '\n'
state 129
	opt_newlines:  newlines.    (183)
	newlines:  newlines.newline 

	'\n'  shift 8
	.  reduce 183 (src line 1159)

	newline  goto 70

state 130
	expr:  slice_count type_data.'{' opt_newlines exprs opt_comma_newlines '}' 
	type_data:  type_data.'.' IDENT 

	'{'  shift 218
	'.'  shift 219
	.  error


state 131
	type_data:  IDENT.    (107)

	.  reduce 107 (src line 720)


state 132
	type_data:  '*'.type_data 

	IDENT  shift 131
	CHAN  shift 135
	STRUCT  shift 136
	MAP  shift 134
	'*'  shift 132
	'['  shift 137
	.  error

	type_data  goto 220
	slice_count  goto 133

state 133
	type_data:  slice_count.type_data 

	IDENT  shift 131
	CHAN  shift 135
	STRUCT  shift 136
	MAP  shift 134
	'*'  shift 132
	'['  shift 137
	.  error

	type_data  goto 221
	slice_count  goto 133

state 134
	type_data:  MAP.'[' type_data ']' type_data 

	'['  shift 222
	.  error


state 135
	type_data:  CHAN.type_data 

	IDENT  shift 131
	CHAN  shift 135
	STRUCT  shift 136
	MAP  shift 134
	'*'  shift 132
	'['  shift 137
	.  error

	type_data  goto 223
	slice_count  goto 133

state 136
	type_data:  STRUCT.'{' opt_newlines type_data_struct opt_newlines '}' 

	'{'  shift 224
	.  error


state 137
	slice_count:  '['.']' 
	slice_count:  '['.']' slice_count 

	']'  shift 225
	.  error


state 138
	stmt_lets:  '(' expr_idents.')' '=' exprs 
	expr_idents:  expr_idents.',' opt_newlines IDENT 

	')'  shift 226
	','  shift 207
	.  error


state 139
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  '(' expr.')' 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	')'  shift 227
	'['  shift 87
	'.'  shift 89
	.  error


state 140
	expr:  IDENT '('.exprs VARARG ')' 
	expr:  IDENT '('.exprs VARARG ')' '?' 
	expr:  IDENT '('.exprs ')' 
	expr:  IDENT '('.exprs ')' '?' 
	exprs: .    (63)

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  reduce 63 (src line 497)

	exprs  goto 228
	expr  goto 72
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 141
	expr:  expr_ident '['.expr ']' 
	expr_slice:  expr_ident '['.expr ':' expr ']' 
	expr_slice:  expr_ident '['.expr ':' ']' 
	expr_slice:  expr_ident '['.':' expr ']' 
	expr_slice:  expr_ident '['.':' expr ':' expr ']' 
	expr_slice:  expr_ident '['.expr ':' expr ':' expr ']' 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	':'  shift 230
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 229
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 142
	expr:  LEN '('.expr ')' 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 231
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 143
	expr:  NEW '('.type_data ')' 

	IDENT  shift 131
	CHAN  shift 135
	STRUCT  shift 136
	MAP  shift 134
	'*'  shift 132
	'['  shift 137
	.  error

	type_data  goto 232
	slice_count  goto 133

state 144
	expr:  MAKE '('.type_data ')' 
	expr:  MAKE '('.type_data ',' expr ')' 
	expr:  MAKE '('.type_data ',' expr ',' expr ')' 
	expr:  MAKE '('.TYPE IDENT ',' expr ')' 

	IDENT  shift 131
	CHAN  shift 135
	STRUCT  shift 136
	TYPE  shift 234
	MAP  shift 134
	'*'  shift 132
	'['  shift 137
	.  error

	type_data  goto 233
	slice_count  goto 133

145: shift/reduce conflict (shift 8(0), red'n 182(0)) on '\n'
state 145
	expr:  MAP '{'.opt_newlines expr_map opt_comma_newlines '}' 
	opt_newlines: .    (182)

	'\n'  shift 8
	.  reduce 182 (src line 1157)

	opt_newlines  goto 235
	newlines  goto 129
	newline  goto 7

state 146
	expr:  MAP '['.type_data ']' type_data '{' opt_newlines expr_map opt_comma_newlines '}' 

	IDENT  shift 131
	CHAN  shift 135
	STRUCT  shift 136
	MAP  shift 134
	'*'  shift 132
	'['  shift 137
	.  error

	type_data  goto 236
	slice_count  goto 133

state 147
	expr:  '{' opt_newlines.expr_map opt_comma_newlines '}' 
	expr_map: .    (128)

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  reduce 128 (src line 867)

	expr  goto 238
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_map  goto 237
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 148
	stmt_var:  VAR expr_idents.'=' exprs 
	expr_idents:  expr_idents.',' opt_newlines IDENT 

	'='  shift 239
	','  shift 207
	.  error


state 149
	expr_idents:  IDENT.    (105)

	.  reduce 105 (src line 707)


state 150
	stmt_lets:  exprs '='.exprs 
	exprs: .    (63)

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  reduce 63 (src line 497)

	exprs  goto 240
	expr  goto 72
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 151
	stmt_lets:  exprs AS.'(' expr_idents ')' 
	stmt_lets:  exprs AS.exprs 
	exprs: .    (63)

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 241
	'['  shift 34
	'!'  shift 59
	.  reduce 63 (src line 497)

	exprs  goto 242
	expr  goto 72
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 152
	stmt_lets:  exprs EQOPCHAN.expr 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 243
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 153
	exprs:  exprs ','.opt_newlines expr 
	exprs:  exprs ','.opt_newlines expr_ident 
	opt_newlines: .    (182)

	'\n'  shift 8
	.  reduce 182 (src line 1157)

	opt_newlines  goto 244
	newlines  goto 129
	newline  goto 7

 154: reduce/reduce conflict  (red'ns 122 and 123) on $end
 154: reduce/reduce conflict  (red'ns 122 and 123) on VARARG
 154: reduce/reduce conflict  (red'ns 122 and 123) on IN
 154: reduce/reduce conflict  (red'ns 122 and 123) on EQEQ
 154: reduce/reduce conflict  (red'ns 122 and 123) on NEQ
 154: reduce/reduce conflict  (red'ns 122 and 123) on GE
 154: reduce/reduce conflict  (red'ns 122 and 123) on LE
 154: reduce/reduce conflict  (red'ns 122 and 123) on OROR
 154: reduce/reduce conflict  (red'ns 122 and 123) on ANDAND
 154: reduce/reduce conflict  (red'ns 122 and 123) on NILCOALESCE
 154: reduce/reduce conflict  (red'ns 122 and 123) on PLUSEQ
 154: reduce/reduce conflict  (red'ns 122 and 123) on MINUSEQ
 154: reduce/reduce conflict  (red'ns 122 and 123) on MULEQ
 154: reduce/reduce conflict  (red'ns 122 and 123) on DIVEQ
 154: reduce/reduce conflict  (red'ns 122 and 123) on ANDEQ
 154: reduce/reduce conflict  (red'ns 122 and 123) on OREQ
 154: reduce/reduce conflict  (red'ns 122 and 123) on PLUSPLUS
 154: reduce/reduce conflict  (red'ns 122 and 123) on MINUSMINUS
 154: reduce/reduce conflict  (red'ns 122 and 123) on SHIFTLEFT
 154: reduce/reduce conflict  (red'ns 122 and 123) on SHIFTRIGHT
 154: reduce/reduce conflict  (red'ns 122 and 123) on CASE
 154: reduce/reduce conflict  (red'ns 122 and 123) on DEFAULT
 154: reduce/reduce conflict  (red'ns 122 and 123) on OPCHAN
 154: reduce/reduce conflict  (red'ns 122 and 123) on EQOPCHAN
 154: reduce/reduce conflict  (red'ns 122 and 123) on AS
 154: reduce/reduce conflict  (red'ns 122 and 123) on '='
 154: reduce/reduce conflict  (red'ns 122 and 123) on ':'
 154: reduce/reduce conflict  (red'ns 122 and 123) on '?'
 154: reduce/reduce conflict  (red'ns 122 and 123) on '<'
 154: reduce/reduce conflict  (red'ns 122 and 123) on '>'
 154: reduce/reduce conflict  (red'ns 122 and 123) on '+'
 154: reduce/reduce conflict  (red'ns 122 and 123) on '-'
 154: reduce/reduce conflict  (red'ns 122 and 123) on '|'
 154: reduce/reduce conflict  (red'ns 122 and 123) on '*'
 154: reduce/reduce conflict  (red'ns 122 and 123) on '/'
 154: reduce/reduce conflict  (red'ns 122 and 123) on '%'
 154: reduce/reduce conflict  (red'ns 122 and 123) on '&'
 154: reduce/reduce conflict  (red'ns 122 and 123) on '{'
 154: reduce/reduce conflict  (red'ns 122 and 123) on '}'
 154: reduce/reduce conflict  (red'ns 122 and 123) on '('
 154: reduce/reduce conflict  (red'ns 122 and 123) on ')'
 154: reduce/reduce conflict  (red'ns 122 and 123) on ','
 154: reduce/reduce conflict  (red'ns 122 and 123) on ';'
 154: reduce/reduce conflict  (red'ns 122 and 123) on '['
 154: reduce/reduce conflict  (red'ns 122 and 123) on ']'
 154: reduce/reduce conflict  (red'ns 122 and 123) on '.'
 154: reduce/reduce conflict  (red'ns 122 and 123) on '\n'
state 154
	expr_literals:  '-' NUMBER.    (122)
	expr_literals:  NUMBER.    (123)

	.  reduce 122 (src line 825)


155: shift/reduce conflict (shift 86(0), red'n 143(13)) on '('
155: shift/reduce conflict (shift 87(0), red'n 143(13)) on '['
155: shift/reduce conflict (shift 89(0), red'n 143(13)) on '.'
state 155
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_unary:  '-' expr.    (143)
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 143 (src line 938)


156: shift/reduce conflict (shift 86(0), red'n 142(4)) on '('
156: shift/reduce conflict (shift 87(0), red'n 142(4)) on '['
156: shift/reduce conflict (shift 89(0), red'n 142(4)) on '.'
state 156
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_chan:  OPCHAN expr.    (142)
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 142 (src line 933)


157: shift/reduce conflict (shift 86(0), red'n 144(13)) on '('
157: shift/reduce conflict (shift 87(0), red'n 144(13)) on '['
157: shift/reduce conflict (shift 89(0), red'n 144(13)) on '.'
state 157
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_unary:  '!' expr.    (144)
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 144 (src line 944)


158: shift/reduce conflict (shift 86(0), red'n 145(13)) on '('
158: shift/reduce conflict (shift 87(0), red'n 145(13)) on '['
158: shift/reduce conflict (shift 89(0), red'n 145(13)) on '.'
state 158
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_unary:  '^' expr.    (145)
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 145 (src line 949)


159: shift/reduce conflict (shift 86(0), red'n 146(13)) on '('
159: shift/reduce conflict (shift 87(0), red'n 146(13)) on '['
159: shift/reduce conflict (shift 89(0), red'n 146(13)) on '.'
state 159
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_unary:  '&' expr.    (146)
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 146 (src line 954)


160: shift/reduce conflict (shift 86(0), red'n 147(13)) on '('
160: shift/reduce conflict (shift 87(0), red'n 147(13)) on '['
160: shift/reduce conflict (shift 89(0), red'n 147(13)) on '.'
state 160
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_unary:  '*' expr.    (147)
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 147 (src line 959)


state 161
	stmts:  stmts term stmt.    (4)

	.  reduce 4 (src line 128)


162: shift/reduce conflict (shift 5(0), red'n 177(0)) on ';'
162: shift/reduce conflict (shift 8(0), red'n 177(0)) on '\n'
state 162
	stmt:  MODULE IDENT '{'.compstmt '}' 
	opt_term: .    (177)

	';'  shift 5
	'\n'  shift 8
	.  reduce 177 (src line 1148)

	compstmt  goto 245
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

state 163
	stmt:  TRY '{' compstmt.'}' CATCH IDENT '{' compstmt '}' FINALLY '{' compstmt '}' 
	stmt:  TRY '{' compstmt.'}' CATCH '{' compstmt '}' FINALLY '{' compstmt '}' 
	stmt:  TRY '{' compstmt.'}' CATCH IDENT '{' compstmt '}' 
	stmt:  TRY '{' compstmt.'}' CATCH '{' compstmt '}' 

	'}'  shift 246
	.  error


state 164
	stmt:  GO IDENT '('.exprs VARARG ')' 
	stmt:  GO IDENT '('.exprs ')' 
	expr:  IDENT '('.exprs VARARG ')' 
	expr:  IDENT '('.exprs VARARG ')' '?' 
	expr:  IDENT '('.exprs ')' 
	expr:  IDENT '('.exprs ')' '?' 
	exprs: .    (63)

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  reduce 63 (src line 497)

	exprs  goto 247
	expr  goto 72
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 165
	stmt:  GO expr '('.exprs VARARG ')' 
	stmt:  GO expr '('.exprs ')' 
	expr:  expr '('.exprs VARARG ')' 
	expr:  expr '('.exprs VARARG ')' '?' 
	expr:  expr '('.exprs ')' 
	expr:  expr '('.exprs ')' '?' 
	exprs: .    (63)

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  reduce 63 (src line 497)

	exprs  goto 248
	expr  goto 72
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 166
	stmt:  DELETE '(' expr.')' 
	stmt:  DELETE '(' expr.',' expr ')' 
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	')'  shift 249
	','  shift 250
	'['  shift 87
	'.'  shift 89
	.  error


state 167
	stmt:  CLOSE '(' expr.')' 
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	')'  shift 251
	'['  shift 87
	'.'  shift 89
	.  error


state 168
	stmt_if:  stmt_if ELSE IF.expr '{' compstmt '}' 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 252
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

169: shift/reduce conflict (shift 5(0), red'n 177(0)) on ';'
169: shift/reduce conflict (shift 8(0), red'n 177(0)) on '\n'
state 169
	stmt_if:  stmt_if ELSE '{'.compstmt '}' 
	opt_term: .    (177)

	';'  shift 5
	'\n'  shift 8
	.  reduce 177 (src line 1148)

	compstmt  goto 253
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

state 170
	stmt_lets:  expr '=' expr.    (33)
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 33 (src line 284)


state 171
	stmt_lets:  expr EQOPCHAN expr.    (38)
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 38 (src line 335)


state 172
	expr:  expr.'?' expr ':' expr 
	expr:  expr '?' expr.':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	':'  shift 254
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  error


173: shift/reduce conflict (shift 86(0), red'n 70(5)) on '('
173: shift/reduce conflict (shift 87(0), red'n 70(5)) on '['
173: shift/reduce conflict (shift 89(0), red'n 70(5)) on '.'
state 173
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr NILCOALESCE expr.    (70)
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 70 (src line 537)


state 174
	exprs:  exprs.',' opt_newlines expr 
	exprs:  exprs.',' opt_newlines expr_ident 
	expr:  expr '(' exprs.VARARG ')' 
	expr:  expr '(' exprs.VARARG ')' '?' 
	expr:  expr '(' exprs.')' 
	expr:  expr '(' exprs.')' '?' 

	VARARG  shift 255
	')'  shift 256
	','  shift 153
	.  error


state 175
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr '[' expr.']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr '[' expr.':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr '[' expr.':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_slice:  expr '[' expr.':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	':'  shift 258
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	']'  shift 257
	'.'  shift 89
	.  error


state 176
	expr_slice:  expr '[' ':'.expr ']' 
	expr_slice:  expr '[' ':'.expr ':' expr ']' 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 259
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

177: shift/reduce conflict (shift 86(0), red'n 95(11)) on '('
177: shift/reduce conflict (shift 87(0), red'n 95(11)) on '['
177: shift/reduce conflict (shift 89(0), red'n 95(11)) on '.'
state 177
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr:  expr IN expr.    (95)
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 95 (src line 667)


state 178
	expr_member:  expr '.' IDENT.    (120)

	.  reduce 120 (src line 811)


179: shift/reduce conflict (shift 86(0), red'n 141(4)) on '('
179: shift/reduce conflict (shift 87(0), red'n 141(4)) on '['
179: shift/reduce conflict (shift 89(0), red'n 141(4)) on '.'
state 179
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_chan:  expr OPCHAN expr.    (141)
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 141 (src line 928)


180: shift/reduce conflict (shift 86(0), red'n 154(2)) on '('
180: shift/reduce conflict (shift 87(0), red'n 154(2)) on '['
180: shift/reduce conflict (shift 89(0), red'n 154(2)) on '.'
state 180
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr PLUSEQ expr.    (154)
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 154 (src line 1004)


181: shift/reduce conflict (shift 86(0), red'n 155(2)) on '('
181: shift/reduce conflict (shift 87(0), red'n 155(2)) on '['
181: shift/reduce conflict (shift 89(0), red'n 155(2)) on '.'
state 181
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr MINUSEQ expr.    (155)
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 155 (src line 1012)


182: shift/reduce conflict (shift 86(0), red'n 156(2)) on '('
182: shift/reduce conflict (shift 87(0), red'n 156(2)) on '['
182: shift/reduce conflict (shift 89(0), red'n 156(2)) on '.'
state 182
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr OREQ expr.    (156)
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 156 (src line 1020)


183: shift/reduce conflict (shift 86(0), red'n 157(2)) on '('
183: shift/reduce conflict (shift 87(0), red'n 157(2)) on '['
183: shift/reduce conflict (shift 89(0), red'n 157(2)) on '.'
state 183
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr MULEQ expr.    (157)
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 157 (src line 1028)


184: shift/reduce conflict (shift 86(0), red'n 158(2)) on '('
184: shift/reduce conflict (shift 87(0), red'n 158(2)) on '['
184: shift/reduce conflict (shift 89(0), red'n 158(2)) on '.'
state 184
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr DIVEQ expr.    (158)
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 158 (src line 1036)


185: shift/reduce conflict (shift 86(0), red'n 159(2)) on '('
185: shift/reduce conflict (shift 87(0), red'n 159(2)) on '['
185: shift/reduce conflict (shift 89(0), red'n 159(2)) on '.'
state 185
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	expr_lets:  expr ANDEQ expr.    (159)
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 159 (src line 1044)


186: shift/reduce conflict (shift 86(0), red'n 160(10)) on '('
186: shift/reduce conflict (shift 87(0), red'n 160(10)) on '['
186: shift/reduce conflict (shift 89(0), red'n 160(10)) on '.'
state 186
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr '*' expr.    (160)
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 160 (src line 1054)


187: shift/reduce conflict (shift 86(0), red'n 161(10)) on '('
187: shift/reduce conflict (shift 87(0), red'n 161(10)) on '['
187: shift/reduce conflict (shift 89(0), red'n 161(10)) on '.'
state 187
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr '/' expr.    (161)
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 161 (src line 1060)


188: shift/reduce conflict (shift 86(0), red'n 162(10)) on '('
188: shift/reduce conflict (shift 87(0), red'n 162(10)) on '['
188: shift/reduce conflict (shift 89(0), red'n 162(10)) on '.'
state 188
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr '%' expr.    (162)
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 162 (src line 1065)


189: shift/reduce conflict (shift 86(0), red'n 163(10)) on '('
189: shift/reduce conflict (shift 87(0), red'n 163(10)) on '['
189: shift/reduce conflict (shift 89(0), red'n 163(10)) on '.'
state 189
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr SHIFTLEFT expr.    (163)
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 163 (src line 1070)


190: shift/reduce conflict (shift 86(0), red'n 164(10)) on '('
190: shift/reduce conflict (shift 87(0), red'n 164(10)) on '['
190: shift/reduce conflict (shift 89(0), red'n 164(10)) on '.'
state 190
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr SHIFTRIGHT expr.    (164)
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 164 (src line 1075)


191: shift/reduce conflict (shift 86(0), red'n 165(10)) on '('
191: shift/reduce conflict (shift 87(0), red'n 165(10)) on '['
191: shift/reduce conflict (shift 89(0), red'n 165(10)) on '.'
state 191
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_multiply:  expr '&' expr.    (165)
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 165 (src line 1080)


192: shift/reduce conflict (shift 86(0), red'n 166(9)) on '('
192: shift/reduce conflict (shift 87(0), red'n 166(9)) on '['
192: shift/reduce conflict (shift 89(0), red'n 166(9)) on '.'
state 192
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr '+' expr.    (166)
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 166 (src line 1086)


193: shift/reduce conflict (shift 86(0), red'n 167(9)) on '('
193: shift/reduce conflict (shift 87(0), red'n 167(9)) on '['
193: shift/reduce conflict (shift 89(0), red'n 167(9)) on '.'
state 193
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr '-' expr.    (167)
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 167 (src line 1092)


194: shift/reduce conflict (shift 86(0), red'n 168(9)) on '('
194: shift/reduce conflict (shift 87(0), red'n 168(9)) on '['
194: shift/reduce conflict (shift 89(0), red'n 168(9)) on '.'
state 194
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_add:  expr '|' expr.    (168)
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 168 (src line 1097)


195: shift/reduce conflict (shift 86(0), red'n 169(8)) on '('
195: shift/reduce conflict (shift 87(0), red'n 169(8)) on '['
195: shift/reduce conflict (shift 89(0), red'n 169(8)) on '.'
state 195
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr EQEQ expr.    (169)
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 169 (src line 1103)


196: shift/reduce conflict (shift 86(0), red'n 170(8)) on '('
196: shift/reduce conflict (shift 87(0), red'n 170(8)) on '['
196: shift/reduce conflict (shift 89(0), red'n 170(8)) on '.'
state 196
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr NEQ expr.    (170)
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 170 (src line 1109)


197: shift/reduce conflict (shift 86(0), red'n 171(8)) on '('
197: shift/reduce conflict (shift 87(0), red'n 171(8)) on '['
197: shift/reduce conflict (shift 89(0), red'n 171(8)) on '.'
state 197
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr '<' expr.    (171)
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 171 (src line 1114)


198: shift/reduce conflict (shift 86(0), red'n 172(8)) on '('
198: shift/reduce conflict (shift 87(0), red'n 172(8)) on '['
198: shift/reduce conflict (shift 89(0), red'n 172(8)) on '.'
state 198
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr LE expr.    (172)
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 172 (src line 1119)


199: shift/reduce conflict (shift 86(0), red'n 173(8)) on '('
199: shift/reduce conflict (shift 87(0), red'n 173(8)) on '['
199: shift/reduce conflict (shift 89(0), red'n 173(8)) on '.'
state 199
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr '>' expr.    (173)
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 173 (src line 1124)


200: shift/reduce conflict (shift 86(0), red'n 174(8)) on '('
200: shift/reduce conflict (shift 87(0), red'n 174(8)) on '['
200: shift/reduce conflict (shift 89(0), red'n 174(8)) on '.'
state 200
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_comparison:  expr GE expr.    (174)
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 174 (src line 1129)


201: shift/reduce conflict (shift 86(0), red'n 175(7)) on '('
201: shift/reduce conflict (shift 87(0), red'n 175(7)) on '['
201: shift/reduce conflict (shift 89(0), red'n 175(7)) on '.'
state 201
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr ANDAND expr.    (175)
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 175 (src line 1135)


202: shift/reduce conflict (shift 86(0), red'n 176(6)) on '('
202: shift/reduce conflict (shift 87(0), red'n 176(6)) on '['
202: shift/reduce conflict (shift 89(0), red'n 176(6)) on '.'
state 202
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 
	op_binary:  expr OROR expr.    (176)

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	ANDAND  shift 114
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 176 (src line 1141)


203: shift/reduce conflict (shift 5(0), red'n 177(0)) on ';'
203: shift/reduce conflict (shift 8(0), red'n 177(0)) on '\n'
state 203
	stmt_if:  IF expr '{'.compstmt '}' 
	opt_term: .    (177)

	';'  shift 5
	'\n'  shift 8
	.  reduce 177 (src line 1148)

	compstmt  goto 260
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

state 204
	stmt_for:  FOR '{' compstmt.'}' 

	'}'  shift 261
	.  error


205: shift/reduce conflict (shift 8(0), red'n 180(0)) on '\n'
 205: reduce/reduce conflict  (red'ns 180 and 183) on IDENT
 205: reduce/reduce conflict  (red'ns 180 and 183) on NUMBER
 205: reduce/reduce conflict  (red'ns 180 and 183) on STRING
 205: reduce/reduce conflict  (red'ns 180 and 183) on FUNC
 205: reduce/reduce conflict  (red'ns 180 and 183) on NEW
 205: reduce/reduce conflict  (red'ns 180 and 183) on TRUE
 205: reduce/reduce conflict  (red'ns 180 and 183) on FALSE
 205: reduce/reduce conflict  (red'ns 180 and 183) on NIL
 205: reduce/reduce conflict  (red'ns 180 and 183) on MAKE
 205: reduce/reduce conflict  (red'ns 180 and 183) on OPCHAN
 205: reduce/reduce conflict  (red'ns 180 and 183) on LEN
 205: reduce/reduce conflict  (red'ns 180 and 183) on MAP
 205: reduce/reduce conflict  (red'ns 180 and 183) on '-'
 205: reduce/reduce conflict  (red'ns 180 and 183) on '^'
 205: reduce/reduce conflict  (red'ns 180 and 183) on '*'
 205: reduce/reduce conflict  (red'ns 180 and 183) on '&'
 205: reduce/reduce conflict  (red'ns 180 and 183) on '{'
 205: reduce/reduce conflict  (red'ns 180 and 183) on '}'
 205: reduce/reduce conflict  (red'ns 180 and 183) on '('
 205: reduce/reduce conflict  (red'ns 180 and 183) on ','
 205: reduce/reduce conflict  (red'ns 180 and 183) on '['
 205: reduce/reduce conflict  (red'ns 180 and 183) on '!'
205: shift/reduce conflict (shift 8(0), red'n 183(0)) on '\n'
state 205
	term:  newlines.    (180)
	opt_newlines:  newlines.    (183)
	newlines:  newlines.newline 

	'\n'  shift 8
	.  reduce 180 (src line 1154)

	newline  goto 70

state 206
	stmt_for:  FOR expr_idents IN.expr '{' compstmt '}' 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 262
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 207
	expr_idents:  expr_idents ','.opt_newlines IDENT 
	opt_newlines: .    (182)

	'\n'  shift 8
	.  reduce 182 (src line 1157)

	opt_newlines  goto 263
	newlines  goto 129
	newline  goto 7

208: shift/reduce conflict (shift 5(0), red'n 177(0)) on ';'
208: shift/reduce conflict (shift 8(0), red'n 177(0)) on '\n'
state 208
	stmt_for:  FOR expr '{'.compstmt '}' 
	opt_term: .    (177)

	';'  shift 5
	'\n'  shift 8
	.  reduce 177 (src line 1148)

	compstmt  goto 264
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

state 209
	stmt_for:  FOR ';' ';'.'{' compstmt '}' 
	stmt_for:  FOR ';' ';'.expr '{' compstmt '}' 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 265
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 266
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 210
	stmt_for:  FOR ';' expr.';' '{' compstmt '}' 
	stmt_for:  FOR ';' expr.';' expr '{' compstmt '}' 
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	';'  shift 267
	'['  shift 87
	'.'  shift 89
	.  error


state 211
	stmt_for:  FOR stmt_var_or_lets ';'.';' '{' compstmt '}' 
	stmt_for:  FOR stmt_var_or_lets ';'.';' expr '{' compstmt '}' 
	stmt_for:  FOR stmt_var_or_lets ';'.expr ';' '{' compstmt '}' 
	stmt_for:  FOR stmt_var_or_lets ';'.expr ';' expr '{' compstmt '}' 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	';'  shift 268
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 269
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

212: shift/reduce conflict (shift 8(0), red'n 182(0)) on '\n'
state 212
	stmt_switch:  SWITCH expr '{'.opt_newlines stmt_switch_cases opt_newlines '}' 
	opt_newlines: .    (182)

	'\n'  shift 8
	.  reduce 182 (src line 1157)

	opt_newlines  goto 270
	newlines  goto 129
	newline  goto 7

state 213
	stmt_import:  IMPORT expr AS.IDENT 

	IDENT  shift 271
	.  error


state 214
	expr:  FUNC '(' expr_idents.')' '{' compstmt '}' 
	expr:  FUNC '(' expr_idents.VARARG ')' '{' compstmt '}' 
	expr_idents:  expr_idents.',' opt_newlines IDENT 

	VARARG  shift 273
	')'  shift 272
	','  shift 207
	.  error


state 215
	expr:  FUNC IDENT '('.expr_idents ')' '{' compstmt '}' 
	expr:  FUNC IDENT '('.expr_idents VARARG ')' '{' compstmt '}' 
	expr_idents: .    (104)

	IDENT  shift 149
	.  reduce 104 (src line 703)

	expr_idents  goto 274

state 216
	slice_count:  '[' ']' slice_count.    (117)

	.  reduce 117 (src line 796)


state 217
	exprs:  exprs.',' opt_newlines expr 
	exprs:  exprs.',' opt_newlines expr_ident 
	expr:  '[' opt_newlines exprs.opt_comma_newlines ']' 
	opt_comma_newlines: .    (187)

	','  shift 275
	'\n'  shift 8
	.  reduce 187 (src line 1167)

	opt_comma_newlines  goto 276
	newlines  goto 277
	newline  goto 7

218: shift/reduce conflict (shift 8(0), red'n 182(0)) on '\n'
state 218
	expr:  slice_count type_data '{'.opt_newlines exprs opt_comma_newlines '}' 
	opt_newlines: .    (182)

	'\n'  shift 8
	.  reduce 182 (src line 1157)

	opt_newlines  goto 278
	newlines  goto 129
	newline  goto 7

state 219
	type_data:  type_data '.'.IDENT 

	IDENT  shift 279
	.  error


220: shift/reduce conflict (shift 219(0), red'n 109(10)) on '.'
state 220
	type_data:  type_data.'.' IDENT 
	type_data:  '*' type_data.    (109)

	'.'  shift 219
	.  reduce 109 (src line 734)


221: shift/reduce conflict (shift 219(0), red'n 110(0)) on '.'
state 221
	type_data:  type_data.'.' IDENT 
	type_data:  slice_count type_data.    (110)

	'.'  shift 219
	.  reduce 110 (src line 743)


state 222
	type_data:  MAP '['.type_data ']' type_data 

	IDENT  shift 131
	CHAN  shift 135
	STRUCT  shift 136
	MAP  shift 134
	'*'  shift 132
	'['  shift 137
	.  error

	type_data  goto 280
	slice_count  goto 133

223: shift/reduce conflict (shift 219(0), red'n 112(0)) on '.'
state 223
	type_data:  type_data.'.' IDENT 
	type_data:  CHAN type_data.    (112)

	'.'  shift 219
	.  reduce 112 (src line 757)


state 224
	type_data:  STRUCT '{'.opt_newlines type_data_struct opt_newlines '}' 
	opt_newlines: .    (182)

	'\n'  shift 8
	.  reduce 182 (src line 1157)

	opt_newlines  goto 281
	newlines  goto 129
	newline  goto 7

225: shift/reduce conflict (shift 137(0), red'n 116(0)) on '['
state 225
	slice_count:  '[' ']'.    (116)
	slice_count:  '[' ']'.slice_count 

	'['  shift 137
	.  reduce 116 (src line 791)

	slice_count  goto 216

state 226
	stmt_lets:  '(' expr_idents ')'.'=' exprs 

	'='  shift 282
	.  error


state 227
	expr:  '(' expr ')'.    (78)

	.  reduce 78 (src line 577)


state 228
	exprs:  exprs.',' opt_newlines expr 
	exprs:  exprs.',' opt_newlines expr_ident 
	expr:  IDENT '(' exprs.VARARG ')' 
	expr:  IDENT '(' exprs.VARARG ')' '?' 
	expr:  IDENT '(' exprs.')' 
	expr:  IDENT '(' exprs.')' '?' 

	VARARG  shift 283
	')'  shift 284
	','  shift 153
	.  error


state 229
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr_ident '[' expr.']' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr_ident '[' expr.':' expr ']' 
	expr_slice:  expr_ident '[' expr.':' ']' 
	expr_slice:  expr_ident '[' expr.':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	':'  shift 286
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	']'  shift 285
	'.'  shift 89
	.  error


state 230
	expr_slice:  expr_ident '[' ':'.expr ']' 
	expr_slice:  expr_ident '[' ':'.expr ':' expr ']' 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 287
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 231
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  LEN '(' expr.')' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	')'  shift 288
	'['  shift 87
	'.'  shift 89
	.  error


state 232
	expr:  NEW '(' type_data.')' 
	type_data:  type_data.'.' IDENT 

	')'  shift 289
	'.'  shift 219
	.  error


state 233
	expr:  MAKE '(' type_data.')' 
	expr:  MAKE '(' type_data.',' expr ')' 
	expr:  MAKE '(' type_data.',' expr ',' expr ')' 
	type_data:  type_data.'.' IDENT 

	')'  shift 290
	','  shift 291
	'.'  shift 219
	.  error


state 234
	expr:  MAKE '(' TYPE.IDENT ',' expr ')' 

	IDENT  shift 292
	.  error


state 235
	expr:  MAP '{' opt_newlines.expr_map opt_comma_newlines '}' 
	expr_map: .    (128)

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  reduce 128 (src line 867)

	expr  goto 238
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_map  goto 293
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 236
	expr:  MAP '[' type_data.']' type_data '{' opt_newlines expr_map opt_comma_newlines '}' 
	type_data:  type_data.'.' IDENT 

	']'  shift 294
	'.'  shift 219
	.  error


state 237
	expr:  '{' opt_newlines expr_map.opt_comma_newlines '}' 
	expr_map:  expr_map.',' opt_newlines expr ':' expr 
	opt_comma_newlines: .    (187)

	','  shift 296
	'\n'  shift 8
	.  reduce 187 (src line 1167)

	opt_comma_newlines  goto 295
	newlines  goto 277
	newline  goto 7

state 238
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_map:  expr.':' expr 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	':'  shift 297
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  error


state 239
	stmt_var:  VAR expr_idents '='.exprs 
	exprs: .    (63)

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  reduce 63 (src line 497)

	exprs  goto 298
	expr  goto 72
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 240
	stmt_lets:  exprs '=' exprs.    (34)
	exprs:  exprs.',' opt_newlines expr 
	exprs:  exprs.',' opt_newlines expr_ident 

	','  shift 153
	.  reduce 34 (src line 290)


state 241
	stmt_lets:  exprs AS '('.expr_idents ')' 
	expr:  '('.expr ')' 
	expr_idents: .    (104)

	IDENT  shift 122
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  reduce 104 (src line 703)

	expr  goto 139
	expr_idents  goto 299
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 242
	stmt_lets:  exprs AS exprs.    (37)
	exprs:  exprs.',' opt_newlines expr 
	exprs:  exprs.',' opt_newlines expr_ident 

	','  shift 153
	.  reduce 37 (src line 320)


state 243
	stmt_lets:  exprs EQOPCHAN expr.    (39)
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 39 (src line 340)


state 244
	exprs:  exprs ',' opt_newlines.expr 
	exprs:  exprs ',' opt_newlines.expr_ident 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 300
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 301
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 245
	stmt:  MODULE IDENT '{' compstmt.'}' 

	'}'  shift 302
	.  error


state 246
	stmt:  TRY '{' compstmt '}'.CATCH IDENT '{' compstmt '}' FINALLY '{' compstmt '}' 
	stmt:  TRY '{' compstmt '}'.CATCH '{' compstmt '}' FINALLY '{' compstmt '}' 
	stmt:  TRY '{' compstmt '}'.CATCH IDENT '{' compstmt '}' 
	stmt:  TRY '{' compstmt '}'.CATCH '{' compstmt '}' 

	CATCH  shift 303
	.  error


state 247
	stmt:  GO IDENT '(' exprs.VARARG ')' 
	stmt:  GO IDENT '(' exprs.')' 
	exprs:  exprs.',' opt_newlines expr 
	exprs:  exprs.',' opt_newlines expr_ident 
	expr:  IDENT '(' exprs.VARARG ')' 
	expr:  IDENT '(' exprs.VARARG ')' '?' 
	expr:  IDENT '(' exprs.')' 
	expr:  IDENT '(' exprs.')' '?' 

	VARARG  shift 304
	')'  shift 305
	','  shift 153
	.  error


state 248
	stmt:  GO expr '(' exprs.VARARG ')' 
	stmt:  GO expr '(' exprs.')' 
	exprs:  exprs.',' opt_newlines expr 
	exprs:  exprs.',' opt_newlines expr_ident 
	expr:  expr '(' exprs.VARARG ')' 
	expr:  expr '(' exprs.VARARG ')' '?' 
	expr:  expr '(' exprs.')' 
	expr:  expr '(' exprs.')' '?' 

	VARARG  shift 306
	')'  shift 307
	','  shift 153
	.  error


state 249
	stmt:  DELETE '(' expr ')'.    (20)

	.  reduce 20 (src line 217)


state 250
	stmt:  DELETE '(' expr ','.expr ')' 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 308
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 251
	stmt:  CLOSE '(' expr ')'.    (22)

	.  reduce 22 (src line 227)


state 252
	stmt_if:  stmt_if ELSE IF expr.'{' compstmt '}' 
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'{'  shift 309
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  error


state 253
	stmt_if:  stmt_if ELSE '{' compstmt.'}' 

	'}'  shift 310
	.  error


state 254
	expr:  expr '?' expr ':'.expr 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 311
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 255
	expr:  expr '(' exprs VARARG.')' 
	expr:  expr '(' exprs VARARG.')' '?' 

	')'  shift 312
	.  error


256: shift/reduce conflict (shift 313(5), red'n 85(0)) on '?'
state 256
	expr:  expr '(' exprs ')'.    (85)
	expr:  expr '(' exprs ')'.'?' 

	'?'  shift 313
	.  reduce 85 (src line 612)


state 257
	expr:  expr '[' expr ']'.    (88)

	.  reduce 88 (src line 627)


state 258
	expr_slice:  expr '[' expr ':'.expr ']' 
	expr_slice:  expr '[' expr ':'.']' 
	expr_slice:  expr '[' expr ':'.expr ':' expr ']' 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	']'  shift 315
	'!'  shift 59
	.  error

	expr  goto 314
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 259
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr '[' ':' expr.']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr '[' ':' expr.':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	':'  shift 317
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	']'  shift 316
	'.'  shift 89
	.  error


state 260
	stmt_if:  IF expr '{' compstmt.'}' 

	'}'  shift 318
	.  error


state 261
	stmt_for:  FOR '{' compstmt '}'.    (43)

	.  reduce 43 (src line 375)


state 262
	stmt_for:  FOR expr_idents IN expr.'{' compstmt '}' 
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'{'  shift 319
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  error


state 263
	expr_idents:  expr_idents ',' opt_newlines.IDENT 

	IDENT  shift 320
	.  error


state 264
	stmt_for:  FOR expr '{' compstmt.'}' 

	'}'  shift 321
	.  error


265: shift/reduce conflict (shift 8(0), red'n 182(0)) on '\n'
 265: reduce/reduce conflict  (red'ns 182 and 177) on IDENT
 265: reduce/reduce conflict  (red'ns 182 and 177) on NUMBER
 265: reduce/reduce conflict  (red'ns 182 and 177) on STRING
 265: reduce/reduce conflict  (red'ns 182 and 177) on FUNC
 265: reduce/reduce conflict  (red'ns 182 and 177) on NEW
 265: reduce/reduce conflict  (red'ns 182 and 177) on TRUE
 265: reduce/reduce conflict  (red'ns 182 and 177) on FALSE
 265: reduce/reduce conflict  (red'ns 182 and 177) on NIL
 265: reduce/reduce conflict  (red'ns 182 and 177) on MAKE
 265: reduce/reduce conflict  (red'ns 182 and 177) on OPCHAN
 265: reduce/reduce conflict  (red'ns 182 and 177) on LEN
 265: reduce/reduce conflict  (red'ns 182 and 177) on MAP
 265: reduce/reduce conflict  (red'ns 182 and 177) on '-'
 265: reduce/reduce conflict  (red'ns 182 and 177) on '^'
 265: reduce/reduce conflict  (red'ns 182 and 177) on '*'
 265: reduce/reduce conflict  (red'ns 182 and 177) on '&'
 265: reduce/reduce conflict  (red'ns 182 and 177) on '{'
 265: reduce/reduce conflict  (red'ns 182 and 177) on '}'
 265: reduce/reduce conflict  (red'ns 182 and 177) on '('
 265: reduce/reduce conflict  (red'ns 182 and 177) on ','
265: shift/reduce conflict (shift 5(0), red'n 177(0)) on ';'
 265: reduce/reduce conflict  (red'ns 182 and 177) on '['
 265: reduce/reduce conflict  (red'ns 182 and 177) on '!'
265: shift/reduce conflict (shift 8(0), red'n 177(0)) on '\n'
state 265
	stmt_for:  FOR ';' ';' '{'.compstmt '}' 
	expr:  '{'.opt_newlines expr_map opt_comma_newlines '}' 
	opt_newlines: .    (182)
	opt_term: .    (177)

	';'  shift 5
	'\n'  shift 8
	.  reduce 177 (src line 1148)

	compstmt  goto 322
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	opt_newlines  goto 147
	newlines  goto 205
	newline  goto 7

state 266
	stmt_for:  FOR ';' ';' expr.'{' compstmt '}' 
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'{'  shift 323
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  error


state 267
	stmt_for:  FOR ';' expr ';'.'{' compstmt '}' 
	stmt_for:  FOR ';' expr ';'.expr '{' compstmt '}' 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 324
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 325
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 268
	stmt_for:  FOR stmt_var_or_lets ';' ';'.'{' compstmt '}' 
	stmt_for:  FOR stmt_var_or_lets ';' ';'.expr '{' compstmt '}' 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 326
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 327
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 269
	stmt_for:  FOR stmt_var_or_lets ';' expr.';' '{' compstmt '}' 
	stmt_for:  FOR stmt_var_or_lets ';' expr.';' expr '{' compstmt '}' 
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	';'  shift 328
	'['  shift 87
	'.'  shift 89
	.  error


270: shift/reduce conflict (shift 333(0), red'n 55(0)) on CASE
270: shift/reduce conflict (shift 332(0), red'n 55(0)) on DEFAULT
state 270
	stmt_switch:  SWITCH expr '{' opt_newlines.stmt_switch_cases opt_newlines '}' 
	stmt_switch_cases: .    (55)

	CASE  shift 333
	DEFAULT  shift 332
	.  reduce 55 (src line 449)

	stmt_switch_cases  goto 329
	stmt_switch_case  goto 331
	stmt_switch_default  goto 330

state 271
	stmt_import:  IMPORT expr AS IDENT.    (31)

	.  reduce 31 (src line 270)


state 272
	expr:  FUNC '(' expr_idents ')'.'{' compstmt '}' 

	'{'  shift 334
	.  error


state 273
	expr:  FUNC '(' expr_idents VARARG.')' '{' compstmt '}' 

	')'  shift 335
	.  error


state 274
	expr:  FUNC IDENT '(' expr_idents.')' '{' compstmt '}' 
	expr:  FUNC IDENT '(' expr_idents.VARARG ')' '{' compstmt '}' 
	expr_idents:  expr_idents.',' opt_newlines IDENT 

	VARARG  shift 337
	')'  shift 336
	','  shift 207
	.  error


state 275
	exprs:  exprs ','.opt_newlines expr 
	exprs:  exprs ','.opt_newlines expr_ident 
	opt_comma_newlines:  ','.newlines 
	opt_comma_newlines:  ','.    (190)
	opt_newlines: .    (182)

	'}'  reduce 190 (src line 1171)
	']'  reduce 190 (src line 1171)
	'\n'  shift 8
	.  reduce 182 (src line 1157)

	opt_newlines  goto 244
	newlines  goto 338
	newline  goto 7

state 276
	expr:  '[' opt_newlines exprs opt_comma_newlines.']' 

	']'  shift 339
	.  error


state 277
	newlines:  newlines.newline 
	opt_comma_newlines:  newlines.    (189)

	'\n'  shift 8
	.  reduce 189 (src line 1170)

	newline  goto 70

state 278
	expr:  slice_count type_data '{' opt_newlines.exprs opt_comma_newlines '}' 
	exprs: .    (63)

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  reduce 63 (src line 497)

	exprs  goto 340
	expr  goto 72
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 279
	type_data:  type_data '.' IDENT.    (108)

	.  reduce 108 (src line 725)


state 280
	type_data:  type_data.'.' IDENT 
	type_data:  MAP '[' type_data.']' type_data 

	']'  shift 341
	'.'  shift 219
	.  error


state 281
	type_data:  STRUCT '{' opt_newlines.type_data_struct opt_newlines '}' 

	IDENT  shift 343
	.  error

	type_data_struct  goto 342

state 282
	stmt_lets:  '(' expr_idents ')' '='.exprs 
	exprs: .    (63)

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  reduce 63 (src line 497)

	exprs  goto 344
	expr  goto 72
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 283
	expr:  IDENT '(' exprs VARARG.')' 
	expr:  IDENT '(' exprs VARARG.')' '?' 

	')'  shift 345
	.  error


284: shift/reduce conflict (shift 346(5), red'n 81(0)) on '?'
state 284
	expr:  IDENT '(' exprs ')'.    (81)
	expr:  IDENT '(' exprs ')'.'?' 

	'?'  shift 346
	.  reduce 81 (src line 592)


state 285
	expr:  expr_ident '[' expr ']'.    (87)

	.  reduce 87 (src line 622)


state 286
	expr_slice:  expr_ident '[' expr ':'.expr ']' 
	expr_slice:  expr_ident '[' expr ':'.']' 
	expr_slice:  expr_ident '[' expr ':'.expr ':' expr ']' 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	']'  shift 348
	'!'  shift 59
	.  error

	expr  goto 347
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 287
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr_ident '[' ':' expr.']' 
	expr_slice:  expr_ident '[' ':' expr.':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	':'  shift 350
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	']'  shift 349
	'.'  shift 89
	.  error


state 288
	expr:  LEN '(' expr ')'.    (89)

	.  reduce 89 (src line 632)


state 289
	expr:  NEW '(' type_data ')'.    (90)

	.  reduce 90 (src line 637)


state 290
	expr:  MAKE '(' type_data ')'.    (91)

	.  reduce 91 (src line 647)


state 291
	expr:  MAKE '(' type_data ','.expr ')' 
	expr:  MAKE '(' type_data ','.expr ',' expr ')' 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 351
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 292
	expr:  MAKE '(' TYPE IDENT.',' expr ')' 

	','  shift 352
	.  error


state 293
	expr:  MAP '{' opt_newlines expr_map.opt_comma_newlines '}' 
	expr_map:  expr_map.',' opt_newlines expr ':' expr 
	opt_comma_newlines: .    (187)

	','  shift 296
	'\n'  shift 8
	.  reduce 187 (src line 1167)

	opt_comma_newlines  goto 353
	newlines  goto 277
	newline  goto 7

state 294
	expr:  MAP '[' type_data ']'.type_data '{' opt_newlines expr_map opt_comma_newlines '}' 

	IDENT  shift 131
	CHAN  shift 135
	STRUCT  shift 136
	MAP  shift 134
	'*'  shift 132
	'['  shift 137
	.  error

	type_data  goto 354
	slice_count  goto 133

state 295
	expr:  '{' opt_newlines expr_map opt_comma_newlines.'}' 

	'}'  shift 355
	.  error


state 296
	expr_map:  expr_map ','.opt_newlines expr ':' expr 
	opt_comma_newlines:  ','.newlines 
	opt_comma_newlines:  ','.    (190)
	opt_newlines: .    (182)

	'}'  reduce 190 (src line 1171)
	'\n'  shift 8
	.  reduce 182 (src line 1157)

	opt_newlines  goto 356
	newlines  goto 338
	newline  goto 7

state 297
	expr_map:  expr ':'.expr 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 357
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 298
	stmt_var:  VAR expr_idents '=' exprs.    (32)
	exprs:  exprs.',' opt_newlines expr 
	exprs:  exprs.',' opt_newlines expr_ident 

	','  shift 153
	.  reduce 32 (src line 277)


state 299
	stmt_lets:  exprs AS '(' expr_idents.')' 
	expr_idents:  expr_idents.',' opt_newlines IDENT 

	')'  shift 358
	','  shift 207
	.  error


state 300
	exprs:  exprs ',' opt_newlines expr.    (65)
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 65 (src line 506)


 301: reduce/reduce conflict  (red'ns 66 and 119) on $end
 301: reduce/reduce conflict  (red'ns 66 and 119) on VARARG
 301: reduce/reduce conflict  (red'ns 66 and 119) on CASE
 301: reduce/reduce conflict  (red'ns 66 and 119) on DEFAULT
 301: reduce/reduce conflict  (red'ns 66 and 119) on EQOPCHAN
 301: reduce/reduce conflict  (red'ns 66 and 119) on AS
 301: reduce/reduce conflict  (red'ns 66 and 119) on '='
 301: reduce/reduce conflict  (red'ns 66 and 119) on ':'
 301: reduce/reduce conflict  (red'ns 66 and 119) on '}'
 301: reduce/reduce conflict  (red'ns 66 and 119) on ')'
 301: reduce/reduce conflict  (red'ns 66 and 119) on ','
 301: reduce/reduce conflict  (red'ns 66 and 119) on ';'
301: shift/reduce conflict (shift 141(0), red'n 119(0)) on '['
 301: reduce/reduce conflict  (red'ns 66 and 119) on ']'
 301: reduce/reduce conflict  (red'ns 66 and 119) on '\n'
state 301
	exprs:  exprs ',' opt_newlines expr_ident.    (66)
	expr:  expr_ident.'[' expr ']' 
	expr_member_or_ident:  expr_ident.    (119)
	expr_slice:  expr_ident.'[' expr ':' expr ']' 
	expr_slice:  expr_ident.'[' expr ':' ']' 
	expr_slice:  expr_ident.'[' ':' expr ']' 
	expr_slice:  expr_ident.'[' ':' expr ':' expr ']' 
	expr_slice:  expr_ident.'[' expr ':' expr ':' expr ']' 

	$end  reduce 66 (src line 514)
	VARARG  reduce 66 (src line 514)
	CASE  reduce 66 (src line 514)
	DEFAULT  reduce 66 (src line 514)
	EQOPCHAN  reduce 66 (src line 514)
	AS  reduce 66 (src line 514)
	'='  reduce 66 (src line 514)
	':'  reduce 66 (src line 514)
	'}'  reduce 66 (src line 514)
	')'  reduce 66 (src line 514)
	','  reduce 66 (src line 514)
	';'  reduce 66 (src line 514)
	'['  shift 141
	']'  reduce 66 (src line 514)
	'\n'  reduce 66 (src line 514)
	.  reduce 119 (src line 806)


state 302
	stmt:  MODULE IDENT '{' compstmt '}'.    (11)

	.  reduce 11 (src line 172)


state 303
	stmt:  TRY '{' compstmt '}' CATCH.IDENT '{' compstmt '}' FINALLY '{' compstmt '}' 
	stmt:  TRY '{' compstmt '}' CATCH.'{' compstmt '}' FINALLY '{' compstmt '}' 
	stmt:  TRY '{' compstmt '}' CATCH.IDENT '{' compstmt '}' 
	stmt:  TRY '{' compstmt '}' CATCH.'{' compstmt '}' 

	IDENT  shift 359
	'{'  shift 360
	.  error


state 304
	stmt:  GO IDENT '(' exprs VARARG.')' 
	expr:  IDENT '(' exprs VARARG.')' 
	expr:  IDENT '(' exprs VARARG.')' '?' 

	')'  shift 361
	.  error


305: shift/reduce conflict (shift 346(5), red'n 81(0)) on '?'
state 305
	stmt:  GO IDENT '(' exprs ')'.    (17)
	expr:  IDENT '(' exprs ')'.    (81)
	expr:  IDENT '(' exprs ')'.'?' 

	$end  reduce 17 (src line 202)
	CASE  reduce 17 (src line 202)
	DEFAULT  reduce 17 (src line 202)
	'?'  shift 346
	'}'  reduce 17 (src line 202)
	';'  reduce 17 (src line 202)
	'\n'  reduce 17 (src line 202)
	.  reduce 81 (src line 592)


state 306
	stmt:  GO expr '(' exprs VARARG.')' 
	expr:  expr '(' exprs VARARG.')' 
	expr:  expr '(' exprs VARARG.')' '?' 

	')'  shift 362
	.  error


307: shift/reduce conflict (shift 313(5), red'n 85(0)) on '?'
state 307
	stmt:  GO expr '(' exprs ')'.    (19)
	expr:  expr '(' exprs ')'.    (85)
	expr:  expr '(' exprs ')'.'?' 

	$end  reduce 19 (src line 212)
	CASE  reduce 19 (src line 212)
	DEFAULT  reduce 19 (src line 212)
	'?'  shift 313
	'}'  reduce 19 (src line 212)
	';'  reduce 19 (src line 212)
	'\n'  reduce 19 (src line 212)
	.  reduce 85 (src line 612)


state 308
	stmt:  DELETE '(' expr ',' expr.')' 
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	')'  shift 363
	'['  shift 87
	'.'  shift 89
	.  error


309: shift/reduce conflict (shift 5(0), red'n 177(0)) on ';'
309: shift/reduce conflict (shift 8(0), red'n 177(0)) on '\n'
state 309
	stmt_if:  stmt_if ELSE IF expr '{'.compstmt '}' 
	opt_term: .    (177)

	';'  shift 5
	'\n'  shift 8
	.  reduce 177 (src line 1148)

	compstmt  goto 364
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

state 310
	stmt_if:  stmt_if ELSE '{' compstmt '}'.    (42)

	.  reduce 42 (src line 365)


311: shift/reduce conflict (shift 86(0), red'n 69(3)) on '('
311: shift/reduce conflict (shift 87(0), red'n 69(3)) on '['
311: shift/reduce conflict (shift 89(0), red'n 69(3)) on '.'
state 311
	expr:  expr.'?' expr ':' expr 
	expr:  expr '?' expr ':' expr.    (69)
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 69 (src line 532)


312: shift/reduce conflict (shift 365(5), red'n 83(0)) on '?'
state 312
	expr:  expr '(' exprs VARARG ')'.    (83)
	expr:  expr '(' exprs VARARG ')'.'?' 

	'?'  shift 365
	.  reduce 83 (src line 602)


state 313
	expr:  expr '(' exprs ')' '?'.    (86)

	.  reduce 86 (src line 617)


state 314
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr '[' expr ':' expr.']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_slice:  expr '[' expr ':' expr.':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	':'  shift 367
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	']'  shift 366
	'.'  shift 89
	.  error


state 315
	expr_slice:  expr '[' expr ':' ']'.    (137)

	.  reduce 137 (src line 911)


state 316
	expr_slice:  expr '[' ':' expr ']'.    (138)

	.  reduce 138 (src line 915)


state 317
	expr_slice:  expr '[' ':' expr ':'.expr ']' 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 368
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 318
	stmt_if:  IF expr '{' compstmt '}'.    (40)

	.  reduce 40 (src line 354)


319: shift/reduce conflict (shift 5(0), red'n 177(0)) on ';'
319: shift/reduce conflict (shift 8(0), red'n 177(0)) on '\n'
state 319
	stmt_for:  FOR expr_idents IN expr '{'.compstmt '}' 
	opt_term: .    (177)

	';'  shift 5
	'\n'  shift 8
	.  reduce 177 (src line 1148)

	compstmt  goto 369
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

state 320
	expr_idents:  expr_idents ',' opt_newlines IDENT.    (106)

	.  reduce 106 (src line 711)


state 321
	stmt_for:  FOR expr '{' compstmt '}'.    (45)

	.  reduce 45 (src line 394)


state 322
	stmt_for:  FOR ';' ';' '{' compstmt.'}' 

	'}'  shift 370
	.  error


323: shift/reduce conflict (shift 5(0), red'n 177(0)) on ';'
323: shift/reduce conflict (shift 8(0), red'n 177(0)) on '\n'
state 323
	stmt_for:  FOR ';' ';' expr '{'.compstmt '}' 
	opt_term: .    (177)

	';'  shift 5
	'\n'  shift 8
	.  reduce 177 (src line 1148)

	compstmt  goto 371
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

324: shift/reduce conflict (shift 8(0), red'n 182(0)) on '\n'
 324: reduce/reduce conflict  (red'ns 182 and 177) on IDENT
 324: reduce/reduce conflict  (red'ns 182 and 177) on NUMBER
 324: reduce/reduce conflict  (red'ns 182 and 177) on STRING
 324: reduce/reduce conflict  (red'ns 182 and 177) on FUNC
 324: reduce/reduce conflict  (red'ns 182 and 177) on NEW
 324: reduce/reduce conflict  (red'ns 182 and 177) on TRUE
 324: reduce/reduce conflict  (red'ns 182 and 177) on FALSE
 324: reduce/reduce conflict  (red'ns 182 and 177) on NIL
 324: reduce/reduce conflict  (red'ns 182 and 177) on MAKE
 324: reduce/reduce conflict  (red'ns 182 and 177) on OPCHAN
 324: reduce/reduce conflict  (red'ns 182 and 177) on LEN
 324: reduce/reduce conflict  (red'ns 182 and 177) on MAP
 324: reduce/reduce conflict  (red'ns 182 and 177) on '-'
 324: reduce/reduce conflict  (red'ns 182 and 177) on '^'
 324: reduce/reduce conflict  (red'ns 182 and 177) on '*'
 324: reduce/reduce conflict  (red'ns 182 and 177) on '&'
 324: reduce/reduce conflict  (red'ns 182 and 177) on '{'
 324: reduce/reduce conflict  (red'ns 182 and 177) on '}'
 324: reduce/reduce conflict  (red'ns 182 and 177) on '('
 324: reduce/reduce conflict  (red'ns 182 and 177) on ','
324: shift/reduce conflict (shift 5(0), red'n 177(0)) on ';'
 324: reduce/reduce conflict  (red'ns 182 and 177) on '['
 324: reduce/reduce conflict  (red'ns 182 and 177) on '!'
324: shift/reduce conflict (shift 8(0), red'n 177(0)) on '\n'
state 324
	stmt_for:  FOR ';' expr ';' '{'.compstmt '}' 
	expr:  '{'.opt_newlines expr_map opt_comma_newlines '}' 
	opt_newlines: .    (182)
	opt_term: .    (177)

	';'  shift 5
	'\n'  shift 8
	.  reduce 177 (src line 1148)

	compstmt  goto 372
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	opt_newlines  goto 147
	newlines  goto 205
	newline  goto 7

state 325
	stmt_for:  FOR ';' expr ';' expr.'{' compstmt '}' 
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'{'  shift 373
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  error


326: shift/reduce conflict (shift 8(0), red'n 182(0)) on '\n'
 326: reduce/reduce conflict  (red'ns 182 and 177) on IDENT
 326: reduce/reduce conflict  (red'ns 182 and 177) on NUMBER
 326: reduce/reduce conflict  (red'ns 182 and 177) on STRING
 326: reduce/reduce conflict  (red'ns 182 and 177) on FUNC
 326: reduce/reduce conflict  (red'ns 182 and 177) on NEW
 326: reduce/reduce conflict  (red'ns 182 and 177) on TRUE
 326: reduce/reduce conflict  (red'ns 182 and 177) on FALSE
 326: reduce/reduce conflict  (red'ns 182 and 177) on NIL
 326: reduce/reduce conflict  (red'ns 182 and 177) on MAKE
 326: reduce/reduce conflict  (red'ns 182 and 177) on OPCHAN
 326: reduce/reduce conflict  (red'ns 182 and 177) on LEN
 326: reduce/reduce conflict  (red'ns 182 and 177) on MAP
 326: reduce/reduce conflict  (red'ns 182 and 177) on '-'
 326: reduce/reduce conflict  (red'ns 182 and 177) on '^'
 326: reduce/reduce conflict  (red'ns 182 and 177) on '*'
 326: reduce/reduce conflict  (red'ns 182 and 177) on '&'
 326: reduce/reduce conflict  (red'ns 182 and 177) on '{'
 326: reduce/reduce conflict  (red'ns 182 and 177) on '}'
 326: reduce/reduce conflict  (red'ns 182 and 177) on '('
 326: reduce/reduce conflict  (red'ns 182 and 177) on ','
326: shift/reduce conflict (shift 5(0), red'n 177(0)) on ';'
 326: reduce/reduce conflict  (red'ns 182 and 177) on '['
 326: reduce/reduce conflict  (red'ns 182 and 177) on '!'
326: shift/reduce conflict (shift 8(0), red'n 177(0)) on '\n'
state 326
	stmt_for:  FOR stmt_var_or_lets ';' ';' '{'.compstmt '}' 
	expr:  '{'.opt_newlines expr_map opt_comma_newlines '}' 
	opt_newlines: .    (182)
	opt_term: .    (177)

	';'  shift 5
	'\n'  shift 8
	.  reduce 177 (src line 1148)

	compstmt  goto 374
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	opt_newlines  goto 147
	newlines  goto 205
	newline  goto 7

state 327
	stmt_for:  FOR stmt_var_or_lets ';' ';' expr.'{' compstmt '}' 
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'{'  shift 375
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  error


state 328
	stmt_for:  FOR stmt_var_or_lets ';' expr ';'.'{' compstmt '}' 
	stmt_for:  FOR stmt_var_or_lets ';' expr ';'.expr '{' compstmt '}' 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 376
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 377
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 329
	stmt_switch:  SWITCH expr '{' opt_newlines stmt_switch_cases.opt_newlines '}' 
	stmt_switch_cases:  stmt_switch_cases.stmt_switch_case 
	stmt_switch_cases:  stmt_switch_cases.stmt_switch_default 
	opt_newlines: .    (182)

	CASE  shift 333
	DEFAULT  shift 332
	'\n'  shift 8
	.  reduce 182 (src line 1157)

	stmt_switch_case  goto 379
	stmt_switch_default  goto 380
	opt_newlines  goto 378
	newlines  goto 129
	newline  goto 7

state 330
	stmt_switch_cases:  stmt_switch_default.    (56)

	.  reduce 56 (src line 454)


state 331
	stmt_switch_cases:  stmt_switch_case.    (57)

	.  reduce 57 (src line 458)


state 332
	stmt_switch_default:  DEFAULT.':' compstmt 

	':'  shift 381
	.  error


state 333
	stmt_switch_case:  CASE.expr ':' compstmt 
	stmt_switch_case:  CASE.exprs ':' compstmt 
	exprs: .    (63)

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  reduce 63 (src line 497)

	exprs  goto 383
	expr  goto 382
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

334: shift/reduce conflict (shift 5(0), red'n 177(0)) on ';'
334: shift/reduce conflict (shift 8(0), red'n 177(0)) on '\n'
state 334
	expr:  FUNC '(' expr_idents ')' '{'.compstmt '}' 
	opt_term: .    (177)

	';'  shift 5
	'\n'  shift 8
	.  reduce 177 (src line 1148)

	compstmt  goto 384
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

state 335
	expr:  FUNC '(' expr_idents VARARG ')'.'{' compstmt '}' 

	'{'  shift 385
	.  error


state 336
	expr:  FUNC IDENT '(' expr_idents ')'.'{' compstmt '}' 

	'{'  shift 386
	.  error


state 337
	expr:  FUNC IDENT '(' expr_idents VARARG.')' '{' compstmt '}' 

	')'  shift 387
	.  error


state 338
	opt_newlines:  newlines.    (183)
	newlines:  newlines.newline 
	opt_comma_newlines:  ',' newlines.    (188)

	'}'  reduce 188 (src line 1169)
	']'  reduce 188 (src line 1169)
	'\n'  shift 8
	.  reduce 183 (src line 1159)

	newline  goto 70

state 339
	expr:  '[' opt_newlines exprs opt_comma_newlines ']'.    (76)

	.  reduce 76 (src line 567)


state 340
	exprs:  exprs.',' opt_newlines expr 
	exprs:  exprs.',' opt_newlines expr_ident 
	expr:  slice_count type_data '{' opt_newlines exprs.opt_comma_newlines '}' 
	opt_comma_newlines: .    (187)

	','  shift 275
	'\n'  shift 8
	.  reduce 187 (src line 1167)

	opt_comma_newlines  goto 388
	newlines  goto 277
	newline  goto 7

state 341
	type_data:  MAP '[' type_data ']'.type_data 

	IDENT  shift 131
	CHAN  shift 135
	STRUCT  shift 136
	MAP  shift 134
	'*'  shift 132
	'['  shift 137
	.  error

	type_data  goto 389
	slice_count  goto 133

state 342
	type_data:  STRUCT '{' opt_newlines type_data_struct.opt_newlines '}' 
	type_data_struct:  type_data_struct.',' opt_newlines IDENT type_data 
	opt_newlines: .    (182)

	','  shift 391
	'\n'  shift 8
	.  reduce 182 (src line 1157)

	opt_newlines  goto 390
	newlines  goto 129
	newline  goto 7

state 343
	type_data_struct:  IDENT.type_data opt_newlines 

	IDENT  shift 131
	CHAN  shift 135
	STRUCT  shift 136
	MAP  shift 134
	'*'  shift 132
	'['  shift 137
	.  error

	type_data  goto 392
	slice_count  goto 133

state 344
	stmt_lets:  '(' expr_idents ')' '=' exprs.    (35)
	exprs:  exprs.',' opt_newlines expr 
	exprs:  exprs.',' opt_newlines expr_ident 

	','  shift 153
	.  reduce 35 (src line 302)


345: shift/reduce conflict (shift 393(5), red'n 79(0)) on '?'
state 345
	expr:  IDENT '(' exprs VARARG ')'.    (79)
	expr:  IDENT '(' exprs VARARG ')'.'?' 

	'?'  shift 393
	.  reduce 79 (src line 582)


state 346
	expr:  IDENT '(' exprs ')' '?'.    (82)

	.  reduce 82 (src line 597)


state 347
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr_ident '[' expr ':' expr.']' 
	expr_slice:  expr_ident '[' expr ':' expr.':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	':'  shift 395
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	']'  shift 394
	'.'  shift 89
	.  error


state 348
	expr_slice:  expr_ident '[' expr ':' ']'.    (132)

	.  reduce 132 (src line 891)


state 349
	expr_slice:  expr_ident '[' ':' expr ']'.    (133)

	.  reduce 133 (src line 895)


state 350
	expr_slice:  expr_ident '[' ':' expr ':'.expr ']' 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 396
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 351
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  MAKE '(' type_data ',' expr.')' 
	expr:  MAKE '(' type_data ',' expr.',' expr ')' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	')'  shift 397
	','  shift 398
	'['  shift 87
	'.'  shift 89
	.  error


state 352
	expr:  MAKE '(' TYPE IDENT ','.expr ')' 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 399
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 353
	expr:  MAP '{' opt_newlines expr_map opt_comma_newlines.'}' 

	'}'  shift 400
	.  error


state 354
	expr:  MAP '[' type_data ']' type_data.'{' opt_newlines expr_map opt_comma_newlines '}' 
	type_data:  type_data.'.' IDENT 

	'{'  shift 401
	'.'  shift 219
	.  error


state 355
	expr:  '{' opt_newlines expr_map opt_comma_newlines '}'.    (98)

	.  reduce 98 (src line 684)


state 356
	expr_map:  expr_map ',' opt_newlines.expr ':' expr 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 402
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 357
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_map:  expr ':' expr.    (129)
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 129 (src line 872)


state 358
	stmt_lets:  exprs AS '(' expr_idents ')'.    (36)

	.  reduce 36 (src line 310)


state 359
	stmt:  TRY '{' compstmt '}' CATCH IDENT.'{' compstmt '}' FINALLY '{' compstmt '}' 
	stmt:  TRY '{' compstmt '}' CATCH IDENT.'{' compstmt '}' 

	'{'  shift 403
	.  error


360: shift/reduce conflict (shift 5(0), red'n 177(0)) on ';'
360: shift/reduce conflict (shift 8(0), red'n 177(0)) on '\n'
state 360
	stmt:  TRY '{' compstmt '}' CATCH '{'.compstmt '}' FINALLY '{' compstmt '}' 
	stmt:  TRY '{' compstmt '}' CATCH '{'.compstmt '}' 
	opt_term: .    (177)

	';'  shift 5
	'\n'  shift 8
	.  reduce 177 (src line 1148)

	compstmt  goto 404
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

361: shift/reduce conflict (shift 393(5), red'n 79(0)) on '?'
state 361
	stmt:  GO IDENT '(' exprs VARARG ')'.    (16)
	expr:  IDENT '(' exprs VARARG ')'.    (79)
	expr:  IDENT '(' exprs VARARG ')'.'?' 

	$end  reduce 16 (src line 197)
	CASE  reduce 16 (src line 197)
	DEFAULT  reduce 16 (src line 197)
	'?'  shift 393
	'}'  reduce 16 (src line 197)
	';'  reduce 16 (src line 197)
	'\n'  reduce 16 (src line 197)
	.  reduce 79 (src line 582)


362: shift/reduce conflict (shift 365(5), red'n 83(0)) on '?'
state 362
	stmt:  GO expr '(' exprs VARARG ')'.    (18)
	expr:  expr '(' exprs VARARG ')'.    (83)
	expr:  expr '(' exprs VARARG ')'.'?' 

	$end  reduce 18 (src line 207)
	CASE  reduce 18 (src line 207)
	DEFAULT  reduce 18 (src line 207)
	'?'  shift 365
	'}'  reduce 18 (src line 207)
	';'  reduce 18 (src line 207)
	'\n'  reduce 18 (src line 207)
	.  reduce 83 (src line 602)


state 363
	stmt:  DELETE '(' expr ',' expr ')'.    (21)

	.  reduce 21 (src line 222)


state 364
	stmt_if:  stmt_if ELSE IF expr '{' compstmt.'}' 

	'}'  shift 405
	.  error


state 365
	expr:  expr '(' exprs VARARG ')' '?'.    (84)

	.  reduce 84 (src line 607)


state 366
	expr_slice:  expr '[' expr ':' expr ']'.    (136)

	.  reduce 136 (src line 907)


state 367
	expr_slice:  expr '[' expr ':' expr ':'.expr ']' 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 406
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 368
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr '[' ':' expr ':' expr.']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	']'  shift 407
	'.'  shift 89
	.  error


state 369
	stmt_for:  FOR expr_idents IN expr '{' compstmt.'}' 

	'}'  shift 408
	.  error


state 370
	stmt_for:  FOR ';' ';' '{' compstmt '}'.    (46)

	.  reduce 46 (src line 399)


state 371
	stmt_for:  FOR ';' ';' expr '{' compstmt.'}' 

	'}'  shift 409
	.  error


state 372
	stmt_for:  FOR ';' expr ';' '{' compstmt.'}' 

	'}'  shift 410
	.  error


373: shift/reduce conflict (shift 5(0), red'n 177(0)) on ';'
373: shift/reduce conflict (shift 8(0), red'n 177(0)) on '\n'
state 373
	stmt_for:  FOR ';' expr ';' expr '{'.compstmt '}' 
	opt_term: .    (177)

	';'  shift 5
	'\n'  shift 8
	.  reduce 177 (src line 1148)

	compstmt  goto 411
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

state 374
	stmt_for:  FOR stmt_var_or_lets ';' ';' '{' compstmt.'}' 

	'}'  shift 412
	.  error


375: shift/reduce conflict (shift 5(0), red'n 177(0)) on ';'
375: shift/reduce conflict (shift 8(0), red'n 177(0)) on '\n'
state 375
	stmt_for:  FOR stmt_var_or_lets ';' ';' expr '{'.compstmt '}' 
	opt_term: .    (177)

	';'  shift 5
	'\n'  shift 8
	.  reduce 177 (src line 1148)

	compstmt  goto 413
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

376: shift/reduce conflict (shift 8(0), red'n 182(0)) on '\n'
 376: reduce/reduce conflict  (red'ns 182 and 177) on IDENT
 376: reduce/reduce conflict  (red'ns 182 and 177) on NUMBER
 376: reduce/reduce conflict  (red'ns 182 and 177) on STRING
 376: reduce/reduce conflict  (red'ns 182 and 177) on FUNC
 376: reduce/reduce conflict  (red'ns 182 and 177) on NEW
 376: reduce/reduce conflict  (red'ns 182 and 177) on TRUE
 376: reduce/reduce conflict  (red'ns 182 and 177) on FALSE
 376: reduce/reduce conflict  (red'ns 182 and 177) on NIL
 376: reduce/reduce conflict  (red'ns 182 and 177) on MAKE
 376: reduce/reduce conflict  (red'ns 182 and 177) on OPCHAN
 376: reduce/reduce conflict  (red'ns 182 and 177) on LEN
 376: reduce/reduce conflict  (red'ns 182 and 177) on MAP
 376: reduce/reduce conflict  (red'ns 182 and 177) on '-'
 376: reduce/reduce conflict  (red'ns 182 and 177) on '^'
 376: reduce/reduce conflict  (red'ns 182 and 177) on '*'
 376: reduce/reduce conflict  (red'ns 182 and 177) on '&'
 376: reduce/reduce conflict  (red'ns 182 and 177) on '{'
 376: reduce/reduce conflict  (red'ns 182 and 177) on '}'
 376: reduce/reduce conflict  (red'ns 182 and 177) on '('
 376: reduce/reduce conflict  (red'ns 182 and 177) on ','
376: shift/reduce conflict (shift 5(0), red'n 177(0)) on ';'
 376: reduce/reduce conflict  (red'ns 182 and 177) on '['
 376: reduce/reduce conflict  (red'ns 182 and 177) on '!'
376: shift/reduce conflict (shift 8(0), red'n 177(0)) on '\n'
state 376
	stmt_for:  FOR stmt_var_or_lets ';' expr ';' '{'.compstmt '}' 
	expr:  '{'.opt_newlines expr_map opt_comma_newlines '}' 
	opt_newlines: .    (182)
	opt_term: .    (177)

	';'  shift 5
	'\n'  shift 8
	.  reduce 177 (src line 1148)

	compstmt  goto 414
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	opt_newlines  goto 147
	newlines  goto 205
	newline  goto 7

state 377
	stmt_for:  FOR stmt_var_or_lets ';' expr ';' expr.'{' compstmt '}' 
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'{'  shift 415
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  error


state 378
	stmt_switch:  SWITCH expr '{' opt_newlines stmt_switch_cases opt_newlines.'}' 

	'}'  shift 416
	.  error


state 379
	stmt_switch_cases:  stmt_switch_cases stmt_switch_case.    (58)

	.  reduce 58 (src line 462)


state 380
	stmt_switch_cases:  stmt_switch_cases stmt_switch_default.    (59)

	.  reduce 59 (src line 468)


381: shift/reduce conflict (shift 5(0), red'n 177(0)) on ';'
381: shift/reduce conflict (shift 8(0), red'n 177(0)) on '\n'
state 381
	stmt_switch_default:  DEFAULT ':'.compstmt 
	opt_term: .    (177)

	';'  shift 5
	'\n'  shift 8
	.  reduce 177 (src line 1148)

	compstmt  goto 417
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

382: shift/reduce conflict (shift 418(3), red'n 64(0)) on ':'
state 382
	stmt_switch_case:  CASE expr.':' compstmt 
	exprs:  expr.    (64)
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	':'  shift 418
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 64 (src line 502)


state 383
	stmt_switch_case:  CASE exprs.':' compstmt 
	exprs:  exprs.',' opt_newlines expr 
	exprs:  exprs.',' opt_newlines expr_ident 

	':'  shift 419
	','  shift 153
	.  error


state 384
	expr:  FUNC '(' expr_idents ')' '{' compstmt.'}' 

	'}'  shift 420
	.  error


385: shift/reduce conflict (shift 5(0), red'n 177(0)) on ';'
385: shift/reduce conflict (shift 8(0), red'n 177(0)) on '\n'
state 385
	expr:  FUNC '(' expr_idents VARARG ')' '{'.compstmt '}' 
	opt_term: .    (177)

	';'  shift 5
	'\n'  shift 8
	.  reduce 177 (src line 1148)

	compstmt  goto 421
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

386: shift/reduce conflict (shift 5(0), red'n 177(0)) on ';'
386: shift/reduce conflict (shift 8(0), red'n 177(0)) on '\n'
state 386
	expr:  FUNC IDENT '(' expr_idents ')' '{'.compstmt '}' 
	opt_term: .    (177)

	';'  shift 5
	'\n'  shift 8
	.  reduce 177 (src line 1148)

	compstmt  goto 422
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

state 387
	expr:  FUNC IDENT '(' expr_idents VARARG ')'.'{' compstmt '}' 

	'{'  shift 423
	.  error


state 388
	expr:  slice_count type_data '{' opt_newlines exprs opt_comma_newlines.'}' 

	'}'  shift 424
	.  error


389: shift/reduce conflict (shift 219(0), red'n 111(0)) on '.'
state 389
	type_data:  type_data.'.' IDENT 
	type_data:  MAP '[' type_data ']' type_data.    (111)

	'.'  shift 219
	.  reduce 111 (src line 753)


state 390
	type_data:  STRUCT '{' opt_newlines type_data_struct opt_newlines.'}' 

	'}'  shift 425
	.  error


state 391
	type_data_struct:  type_data_struct ','.opt_newlines IDENT type_data 
	opt_newlines: .    (182)

	'\n'  shift 8
	.  reduce 182 (src line 1157)

	opt_newlines  goto 426
	newlines  goto 129
	newline  goto 7

392: shift/reduce conflict (shift 8(0), red'n 182(0)) on '\n'
state 392
	type_data:  type_data.'.' IDENT 
	type_data_struct:  IDENT type_data.opt_newlines 
	opt_newlines: .    (182)

	'.'  shift 219
	'\n'  shift 8
	.  reduce 182 (src line 1157)

	opt_newlines  goto 427
	newlines  goto 129
	newline  goto 7

state 393
	expr:  IDENT '(' exprs VARARG ')' '?'.    (80)

	.  reduce 80 (src line 587)


state 394
	expr_slice:  expr_ident '[' expr ':' expr ']'.    (131)

	.  reduce 131 (src line 886)


state 395
	expr_slice:  expr_ident '[' expr ':' expr ':'.expr ']' 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 428
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 396
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr_ident '[' ':' expr ':' expr.']' 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	']'  shift 429
	'.'  shift 89
	.  error


state 397
	expr:  MAKE '(' type_data ',' expr ')'.    (92)

	.  reduce 92 (src line 652)


state 398
	expr:  MAKE '(' type_data ',' expr ','.expr ')' 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 430
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 399
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  MAKE '(' TYPE IDENT ',' expr.')' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	')'  shift 431
	'['  shift 87
	'.'  shift 89
	.  error


state 400
	expr:  MAP '{' opt_newlines expr_map opt_comma_newlines '}'.    (96)

	.  reduce 96 (src line 672)


401: shift/reduce conflict (shift 8(0), red'n 182(0)) on '\n'
state 401
	expr:  MAP '[' type_data ']' type_data '{'.opt_newlines expr_map opt_comma_newlines '}' 
	opt_newlines: .    (182)

	'\n'  shift 8
	.  reduce 182 (src line 1157)

	opt_newlines  goto 432
	newlines  goto 129
	newline  goto 7

state 402
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_map:  expr_map ',' opt_newlines expr.':' expr 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	':'  shift 433
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  error


403: shift/reduce conflict (shift 5(0), red'n 177(0)) on ';'
403: shift/reduce conflict (shift 8(0), red'n 177(0)) on '\n'
state 403
	stmt:  TRY '{' compstmt '}' CATCH IDENT '{'.compstmt '}' FINALLY '{' compstmt '}' 
	stmt:  TRY '{' compstmt '}' CATCH IDENT '{'.compstmt '}' 
	opt_term: .    (177)

	';'  shift 5
	'\n'  shift 8
	.  reduce 177 (src line 1148)

	compstmt  goto 434
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

state 404
	stmt:  TRY '{' compstmt '}' CATCH '{' compstmt.'}' FINALLY '{' compstmt '}' 
	stmt:  TRY '{' compstmt '}' CATCH '{' compstmt.'}' 

	'}'  shift 435
	.  error


state 405
	stmt_if:  stmt_if ELSE IF expr '{' compstmt '}'.    (41)

	.  reduce 41 (src line 360)


state 406
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_slice:  expr '[' expr ':' expr ':' expr.']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	']'  shift 436
	'.'  shift 89
	.  error


state 407
	expr_slice:  expr '[' ':' expr ':' expr ']'.    (139)

	.  reduce 139 (src line 919)


state 408
	stmt_for:  FOR expr_idents IN expr '{' compstmt '}'.    (44)

	.  reduce 44 (src line 381)


state 409
	stmt_for:  FOR ';' ';' expr '{' compstmt '}'.    (47)

	.  reduce 47 (src line 404)


state 410
	stmt_for:  FOR ';' expr ';' '{' compstmt '}'.    (48)

	.  reduce 48 (src line 409)


state 411
	stmt_for:  FOR ';' expr ';' expr '{' compstmt.'}' 

	'}'  shift 437
	.  error


state 412
	stmt_for:  FOR stmt_var_or_lets ';' ';' '{' compstmt '}'.    (50)

	.  reduce 50 (src line 419)


state 413
	stmt_for:  FOR stmt_var_or_lets ';' ';' expr '{' compstmt.'}' 

	'}'  shift 438
	.  error


state 414
	stmt_for:  FOR stmt_var_or_lets ';' expr ';' '{' compstmt.'}' 

	'}'  shift 439
	.  error


415: shift/reduce conflict (shift 5(0), red'n 177(0)) on ';'
415: shift/reduce conflict (shift 8(0), red'n 177(0)) on '\n'
state 415
	stmt_for:  FOR stmt_var_or_lets ';' expr ';' expr '{'.compstmt '}' 
	opt_term: .    (177)

	';'  shift 5
	'\n'  shift 8
	.  reduce 177 (src line 1148)

	compstmt  goto 440
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

state 416
	stmt_switch:  SWITCH expr '{' opt_newlines stmt_switch_cases opt_newlines '}'.    (54)

	.  reduce 54 (src line 440)


state 417
	stmt_switch_default:  DEFAULT ':' compstmt.    (62)

	.  reduce 62 (src line 490)


418: shift/reduce conflict (shift 5(0), red'n 177(0)) on ';'
418: shift/reduce conflict (shift 8(0), red'n 177(0)) on '\n'
state 418
	stmt_switch_case:  CASE expr ':'.compstmt 
	opt_term: .    (177)

	';'  shift 5
	'\n'  shift 8
	.  reduce 177 (src line 1148)

	compstmt  goto 441
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

419: shift/reduce conflict (shift 5(0), red'n 177(0)) on ';'
419: shift/reduce conflict (shift 8(0), red'n 177(0)) on '\n'
state 419
	stmt_switch_case:  CASE exprs ':'.compstmt 
	opt_term: .    (177)

	';'  shift 5
	'\n'  shift 8
	.  reduce 177 (src line 1148)

	compstmt  goto 442
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

state 420
	expr:  FUNC '(' expr_idents ')' '{' compstmt '}'.    (71)

	.  reduce 71 (src line 542)


state 421
	expr:  FUNC '(' expr_idents VARARG ')' '{' compstmt.'}' 

	'}'  shift 443
	.  error


state 422
	expr:  FUNC IDENT '(' expr_idents ')' '{' compstmt.'}' 

	'}'  shift 444
	.  error


423: shift/reduce conflict (shift 5(0), red'n 177(0)) on ';'
423: shift/reduce conflict (shift 8(0), red'n 177(0)) on '\n'
state 423
	expr:  FUNC IDENT '(' expr_idents VARARG ')' '{'.compstmt '}' 
	opt_term: .    (177)

	';'  shift 5
	'\n'  shift 8
	.  reduce 177 (src line 1148)

	compstmt  goto 445
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

state 424
	expr:  slice_count type_data '{' opt_newlines exprs opt_comma_newlines '}'.    (77)

	.  reduce 77 (src line 572)


state 425
	type_data:  STRUCT '{' opt_newlines type_data_struct opt_newlines '}'.    (113)

	.  reduce 113 (src line 766)


state 426
	type_data_struct:  type_data_struct ',' opt_newlines.IDENT type_data 

	IDENT  shift 446
	.  error


state 427
	type_data_struct:  IDENT type_data opt_newlines.    (114)

	.  reduce 114 (src line 771)


state 428
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr_ident '[' expr ':' expr ':' expr.']' 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	']'  shift 447
	'.'  shift 89
	.  error


state 429
	expr_slice:  expr_ident '[' ':' expr ':' expr ']'.    (134)

	.  reduce 134 (src line 899)


state 430
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  MAKE '(' type_data ',' expr ',' expr.')' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	')'  shift 448
	'['  shift 87
	'.'  shift 89
	.  error


state 431
	expr:  MAKE '(' TYPE IDENT ',' expr ')'.    (94)

	.  reduce 94 (src line 662)


state 432
	expr:  MAP '[' type_data ']' type_data '{' opt_newlines.expr_map opt_comma_newlines '}' 
	expr_map: .    (128)

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  reduce 128 (src line 867)

	expr  goto 238
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_map  goto 449
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 433
	expr_map:  expr_map ',' opt_newlines expr ':'.expr 

	IDENT  shift 37
	NUMBER  shift 53
	STRING  shift 54
	FUNC  shift 33
	NEW  shift 40
	TRUE  shift 55
	FALSE  shift 56
	NIL  shift 57
	MAKE  shift 41
	OPCHAN  shift 58
	LEN  shift 39
	MAP  shift 42
	'-'  shift 52
	'^'  shift 60
	'*'  shift 62
	'&'  shift 61
	'{'  shift 43
	'('  shift 73
	'['  shift 34
	'!'  shift 59
	.  error

	expr  goto 450
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 51
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 44
	expr_chan  goto 45
	expr_unary  goto 46
	expr_binary  goto 47
	expr_lets  goto 48
	op_binary  goto 66
	op_comparison  goto 65
	op_add  goto 64
	op_multiply  goto 63

state 434
	stmt:  TRY '{' compstmt '}' CATCH IDENT '{' compstmt.'}' FINALLY '{' compstmt '}' 
	stmt:  TRY '{' compstmt '}' CATCH IDENT '{' compstmt.'}' 

	'}'  shift 451
	.  error


state 435
	stmt:  TRY '{' compstmt '}' CATCH '{' compstmt '}'.FINALLY '{' compstmt '}' 
	stmt:  TRY '{' compstmt '}' CATCH '{' compstmt '}'.    (15)

	FINALLY  shift 452
	.  reduce 15 (src line 192)


state 436
	expr_slice:  expr '[' expr ':' expr ':' expr ']'.    (140)

	.  reduce 140 (src line 923)


state 437
	stmt_for:  FOR ';' expr ';' expr '{' compstmt '}'.    (49)

	.  reduce 49 (src line 414)


state 438
	stmt_for:  FOR stmt_var_or_lets ';' ';' expr '{' compstmt '}'.    (51)

	.  reduce 51 (src line 424)


state 439
	stmt_for:  FOR stmt_var_or_lets ';' expr ';' '{' compstmt '}'.    (52)

	.  reduce 52 (src line 429)


state 440
	stmt_for:  FOR stmt_var_or_lets ';' expr ';' expr '{' compstmt.'}' 

	'}'  shift 453
	.  error


state 441
	stmt_switch_case:  CASE expr ':' compstmt.    (60)

	.  reduce 60 (src line 478)


state 442
	stmt_switch_case:  CASE exprs ':' compstmt.    (61)

	.  reduce 61 (src line 484)


state 443
	expr:  FUNC '(' expr_idents VARARG ')' '{' compstmt '}'.    (72)

	.  reduce 72 (src line 547)


state 444
	expr:  FUNC IDENT '(' expr_idents ')' '{' compstmt '}'.    (73)

	.  reduce 73 (src line 552)


state 445
	expr:  FUNC IDENT '(' expr_idents VARARG ')' '{' compstmt.'}' 

	'}'  shift 454
	.  error


state 446
	type_data_struct:  type_data_struct ',' opt_newlines IDENT.type_data 

	IDENT  shift 131
	CHAN  shift 135
	STRUCT  shift 136
	MAP  shift 134
	'*'  shift 132
	'['  shift 137
	.  error

	type_data  goto 455
	slice_count  goto 133

state 447
	expr_slice:  expr_ident '[' expr ':' expr ':' expr ']'.    (135)

	.  reduce 135 (src line 903)


state 448
	expr:  MAKE '(' type_data ',' expr ',' expr ')'.    (93)

	.  reduce 93 (src line 657)


state 449
	expr:  MAP '[' type_data ']' type_data '{' opt_newlines expr_map.opt_comma_newlines '}' 
	expr_map:  expr_map.',' opt_newlines expr ':' expr 
	opt_comma_newlines: .    (187)

	','  shift 296
	'\n'  shift 8
	.  reduce 187 (src line 1167)

	opt_comma_newlines  goto 456
	newlines  goto 277
	newline  goto 7

state 450
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs VARARG ')' '?' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'(' exprs ')' '?' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_map:  expr_map ',' opt_newlines expr ':' expr.    (130)
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 130 (src line 876)


state 451
	stmt:  TRY '{' compstmt '}' CATCH IDENT '{' compstmt '}'.FINALLY '{' compstmt '}' 
	stmt:  TRY '{' compstmt '}' CATCH IDENT '{' compstmt '}'.    (14)

	FINALLY  shift 457
	.  reduce 14 (src line 187)


state 452
	stmt:  TRY '{' compstmt '}' CATCH '{' compstmt '}' FINALLY.'{' compstmt '}' 

	'{'  shift 458
	.  error


state 453
	stmt_for:  FOR stmt_var_or_lets ';' expr ';' expr '{' compstmt '}'.    (53)

	.  reduce 53 (src line 434)


state 454
	expr:  FUNC IDENT '(' expr_idents VARARG ')' '{' compstmt '}'.    (74)

	.  reduce 74 (src line 557)


state 455
	type_data:  type_data.'.' IDENT 
	type_data_struct:  type_data_struct ',' opt_newlines IDENT type_data.    (115)

	'.'  shift 219
	.  reduce 115 (src line 781)


state 456
	expr:  MAP '[' type_data ']' type_data '{' opt_newlines expr_map opt_comma_newlines.'}' 

	'}'  shift 459
	.  error


state 457
	stmt:  TRY '{' compstmt '}' CATCH IDENT '{' compstmt '}' FINALLY.'{' compstmt '}' 

	'{'  shift 460
	.  error


458: shift/reduce conflict (shift 5(0), red'n 177(0)) on ';'
458: shift/reduce conflict (shift 8(0), red'n 177(0)) on '\n'
state 458
	stmt:  TRY '{' compstmt '}' CATCH '{' compstmt '}' FINALLY '{'.compstmt '}' 
	opt_term: .    (177)

	';'  shift 5
	'\n'  shift 8
	.  reduce 177 (src line 1148)

	compstmt  goto 461
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

state 459
	expr:  MAP '[' type_data ']' type_data '{' opt_newlines expr_map opt_comma_newlines '}'.    (97)

	.  reduce 97 (src line 678)


460: shift/reduce conflict (shift 5(0), red'n 177(0)) on ';'
460: shift/reduce conflict (shift 8(0), red'n 177(0)) on '\n'
state 460
	stmt:  TRY '{' compstmt '}' CATCH IDENT '{' compstmt '}' FINALLY '{'.compstmt '}' 
	opt_term: .    (177)

	';'  shift 5
	'\n'  shift 8
	.  reduce 177 (src line 1148)

	compstmt  goto 462
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

state 461
	stmt:  TRY '{' compstmt '}' CATCH '{' compstmt '}' FINALLY '{' compstmt.'}' 

	'}'  shift 463
	.  error


state 462
	stmt:  TRY '{' compstmt '}' CATCH IDENT '{' compstmt '}' FINALLY '{' compstmt.'}' 

	'}'  shift 464
	.  error


state 463
	stmt:  TRY '{' compstmt '}' CATCH '{' compstmt '}' FINALLY '{' compstmt '}'.    (13)

	.  reduce 13 (src line 182)


state 464
	stmt:  TRY '{' compstmt '}' CATCH IDENT '{' compstmt '}' FINALLY '{' compstmt '}'.    (12)

	.  reduce 12 (src line 177)


84 terminals, 40 nonterminals
191 grammar rules, 465/8000 states
202 shift/reduce, 208 reduce/reduce conflicts reported
189 working sets used
memory: parser 2032/120000
426 extra closures
4173 shift entries, 63 exceptions
248 goto entries
1452 entries saved by goto default
Optimizer space used: output 4037/120000
4037 table entries, 1901 zero
maximum spread: 84, maximum offset: 460
