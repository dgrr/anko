// Code generated by goyacc -o parser.go parser.go.y. DO NOT EDIT.

//line parser.go.y:2
package parser

import __yyfmt__ "fmt"

//line parser.go.y:2

import (
	"github.com/dgrr/anko/ast"
)

//line parser.go.y:46
type yySymType struct {
	yys int
	tok ast.Token

	compstmt            ast.Stmt
	stmts               ast.Stmt
	stmt                ast.Stmt
	stmt_var_or_lets    ast.Stmt
	stmt_import         ast.Stmt
	stmt_var            ast.Stmt
	stmt_lets           ast.Stmt
	stmt_if             ast.Stmt
	stmt_for            ast.Stmt
	stmt_switch         ast.Stmt
	stmt_switch_cases   ast.Stmt
	stmt_switch_case    ast.Stmt
	stmt_switch_default ast.Stmt

	exprs                []ast.Expr
	expr                 ast.Expr
	expr_idents          []string
	type_data            *ast.TypeStruct
	type_data_struct     *ast.TypeStruct
	slice_count          int
	expr_member_or_ident ast.Expr
	expr_member          *ast.MemberExpr
	expr_ident           *ast.IdentExpr
	expr_literals        ast.Expr
	expr_map             *ast.MapExpr
	expr_slice           ast.Expr
	expr_chan            ast.Expr
	expr_unary           ast.Expr
	expr_binary          ast.Expr
	expr_lets            ast.Expr

	op_binary     ast.Operator
	op_comparison ast.Operator
	op_add        ast.Operator
	op_multiply   ast.Operator
}

const IDENT = 57346
const NUMBER = 57347
const STRING = 57348
const ARRAY = 57349
const VARARG = 57350
const FUNC = 57351
const RETURN = 57352
const VAR = 57353
const THROW = 57354
const IF = 57355
const ELSE = 57356
const FOR = 57357
const IN = 57358
const EQEQ = 57359
const NEQ = 57360
const GE = 57361
const LE = 57362
const OROR = 57363
const ANDAND = 57364
const NEW = 57365
const TRUE = 57366
const FALSE = 57367
const NIL = 57368
const NILCOALESCE = 57369
const MODULE = 57370
const TRY = 57371
const CATCH = 57372
const FINALLY = 57373
const PLUSEQ = 57374
const MINUSEQ = 57375
const MULEQ = 57376
const DIVEQ = 57377
const ANDEQ = 57378
const OREQ = 57379
const BREAK = 57380
const CONTINUE = 57381
const PLUSPLUS = 57382
const MINUSMINUS = 57383
const SHIFTLEFT = 57384
const SHIFTRIGHT = 57385
const SWITCH = 57386
const CASE = 57387
const DEFAULT = 57388
const GO = 57389
const CHAN = 57390
const STRUCT = 57391
const MAKE = 57392
const OPCHAN = 57393
const EQOPCHAN = 57394
const TYPE = 57395
const LEN = 57396
const DELETE = 57397
const CLOSE = 57398
const MAP = 57399
const IMPORT = 57400
const AS = 57401
const UNARY = 57402

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"NUMBER",
	"STRING",
	"ARRAY",
	"VARARG",
	"FUNC",
	"RETURN",
	"VAR",
	"THROW",
	"IF",
	"ELSE",
	"FOR",
	"IN",
	"EQEQ",
	"NEQ",
	"GE",
	"LE",
	"OROR",
	"ANDAND",
	"NEW",
	"TRUE",
	"FALSE",
	"NIL",
	"NILCOALESCE",
	"MODULE",
	"TRY",
	"CATCH",
	"FINALLY",
	"PLUSEQ",
	"MINUSEQ",
	"MULEQ",
	"DIVEQ",
	"ANDEQ",
	"OREQ",
	"BREAK",
	"CONTINUE",
	"PLUSPLUS",
	"MINUSMINUS",
	"SHIFTLEFT",
	"SHIFTRIGHT",
	"SWITCH",
	"CASE",
	"DEFAULT",
	"GO",
	"CHAN",
	"STRUCT",
	"MAKE",
	"OPCHAN",
	"EQOPCHAN",
	"TYPE",
	"LEN",
	"DELETE",
	"CLOSE",
	"MAP",
	"IMPORT",
	"AS",
	"'='",
	"':'",
	"'?'",
	"'<'",
	"'>'",
	"'+'",
	"'-'",
	"'|'",
	"'^'",
	"'*'",
	"'/'",
	"'%'",
	"'&'",
	"UNARY",
	"'{'",
	"'}'",
	"'('",
	"')'",
	"','",
	"';'",
	"'['",
	"']'",
	"'.'",
	"'!'",
	"'\\n'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:1143

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	52, 63,
	59, 63,
	60, 63,
	78, 63,
	79, 5,
	-2, 1,
	-1, 24,
	59, 64,
	78, 64,
	-2, 27,
	-1, 28,
	16, 100,
	-2, 63,
	-1, 68,
	52, 63,
	59, 63,
	60, 63,
	78, 63,
	-2, 5,
	-1, 122,
	16, 101,
	77, 101,
	78, 101,
	-2, 117,
	-1, 127,
	4, 112,
	48, 112,
	49, 112,
	57, 112,
	-2, 75,
	-1, 275,
	75, 186,
	81, 186,
	-2, 178,
	-1, 296,
	75, 186,
	-2, 178,
	-1, 301,
	1, 66,
	8, 66,
	45, 66,
	46, 66,
	52, 66,
	59, 66,
	60, 66,
	61, 66,
	75, 66,
	77, 66,
	78, 66,
	79, 66,
	81, 66,
	84, 66,
	-2, 115,
	-1, 305,
	1, 17,
	45, 17,
	46, 17,
	75, 17,
	79, 17,
	84, 17,
	-2, 80,
	-1, 307,
	1, 19,
	45, 19,
	46, 19,
	75, 19,
	79, 19,
	84, 19,
	-2, 82,
	-1, 337,
	75, 184,
	81, 184,
	-2, 179,
	-1, 359,
	1, 16,
	45, 16,
	46, 16,
	75, 16,
	79, 16,
	84, 16,
	-2, 79,
	-1, 360,
	1, 18,
	45, 18,
	46, 18,
	75, 18,
	79, 18,
	84, 18,
	-2, 81,
}

const yyPrivate = 57344

const yyLast = 4030

var yyAct = [...]int{

	72, 276, 130, 24, 237, 38, 8, 5, 329, 330,
	6, 88, 8, 219, 118, 74, 69, 296, 78, 332,
	331, 388, 219, 8, 8, 397, 275, 8, 116, 119,
	123, 124, 8, 219, 218, 91, 92, 139, 127, 289,
	35, 8, 219, 1, 219, 129, 86, 338, 7, 225,
	87, 138, 89, 155, 129, 70, 340, 219, 8, 156,
	157, 158, 159, 160, 148, 290, 291, 294, 219, 24,
	219, 86, 145, 141, 139, 87, 133, 89, 146, 131,
	166, 167, 336, 170, 171, 172, 173, 137, 175, 177,
	222, 179, 211, 306, 180, 181, 182, 183, 184, 185,
	186, 187, 188, 189, 190, 191, 192, 193, 194, 195,
	196, 197, 198, 199, 200, 201, 202, 153, 70, 239,
	163, 210, 415, 135, 136, 350, 131, 304, 205, 283,
	206, 273, 134, 384, 255, 220, 221, 207, 223, 153,
	214, 360, 229, 231, 132, 359, 232, 233, 238, 236,
	344, 335, 207, 243, 334, 137, 129, 356, 207, 312,
	147, 204, 307, 153, 129, 226, 207, 215, 216, 252,
	135, 136, 126, 133, 133, 234, 133, 259, 70, 134,
	140, 164, 152, 144, 133, 133, 143, 133, 142, 151,
	150, 132, 207, 80, 79, 128, 305, 153, 284, 153,
	272, 207, 137, 256, 153, 357, 245, 262, 153, 460,
	266, 459, 269, 253, 455, 450, 449, 447, 129, 440,
	439, 435, 434, 129, 433, 280, 431, 421, 277, 129,
	274, 287, 420, 416, 412, 129, 238, 408, 406, 295,
	293, 405, 139, 456, 125, 300, 404, 260, 277, 401,
	301, 308, 264, 50, 70, 311, 299, 396, 367, 313,
	353, 320, 317, 133, 310, 302, 216, 71, 324, 326,
	261, 246, 454, 419, 399, 358, 205, 383, 382, 333,
	224, 168, 162, 76, 378, 9, 337, 345, 282, 332,
	331, 453, 349, 448, 303, 351, 10, 352, 355, 81,
	442, 342, 319, 292, 277, 279, 235, 337, 149, 321,
	271, 178, 75, 63, 244, 4, 2, 365, 64, 68,
	67, 65, 66, 48, 47, 121, 70, 46, 374, 45,
	44, 32, 51, 379, 205, 133, 205, 377, 376, 129,
	174, 385, 169, 386, 31, 389, 341, 328, 22, 392,
	277, 395, 129, 362, 161, 398, 21, 20, 26, 25,
	23, 3, 366, 0, 0, 402, 368, 369, 263, 371,
	0, 0, 0, 270, 0, 0, 0, 381, 0, 278,
	0, 133, 217, 133, 205, 281, 70, 0, 0, 0,
	0, 0, 424, 0, 228, 426, 0, 0, 0, 129,
	129, 0, 400, 0, 240, 242, 0, 0, 129, 0,
	0, 0, 0, 0, 407, 0, 409, 410, 247, 248,
	0, 0, 413, 0, 0, 0, 417, 418, 0, 238,
	446, 0, 0, 445, 0, 0, 244, 0, 0, 0,
	0, 0, 0, 430, 0, 451, 0, 452, 0, 0,
	88, 0, 0, 0, 0, 436, 277, 354, 437, 438,
	0, 0, 0, 441, 0, 122, 53, 54, 0, 0,
	33, 0, 49, 0, 91, 92, 102, 103, 0, 0,
	0, 0, 0, 133, 40, 55, 56, 57, 0, 375,
	0, 0, 0, 298, 0, 0, 0, 0, 457, 0,
	458, 0, 387, 99, 100, 101, 104, 0, 0, 0,
	86, 41, 58, 0, 87, 39, 89, 0, 42, 0,
	0, 0, 0, 0, 0, 0, 0, 52, 0, 60,
	62, 0, 339, 61, 0, 117, 343, 36, 0, 0,
	120, 34, 0, 0, 59, 0, 0, 0, 0, 422,
	423, 0, 0, 0, 0, 0, 0, 0, 428, 0,
	0, 0, 0, 88, 108, 109, 113, 111, 115, 114,
	0, 0, 0, 0, 85, 0, 0, 0, 0, 93,
	94, 96, 97, 98, 95, 0, 380, 91, 92, 102,
	103, 0, 0, 0, 0, 0, 0, 0, 90, 83,
	0, 0, 0, 0, 0, 0, 0, 82, 0, 84,
	110, 112, 105, 106, 107, 0, 99, 100, 101, 104,
	0, 208, 0, 86, 0, 0, 0, 87, 0, 89,
	37, 53, 54, 0, 0, 33, 13, 49, 14, 27,
	0, 28, 0, 0, 0, 0, 0, 0, 0, 40,
	55, 56, 57, 0, 15, 16, 0, 0, 0, 0,
	0, 0, 0, 0, 11, 12, 0, 0, 0, 0,
	29, 0, 0, 17, 0, 0, 41, 58, 0, 0,
	39, 18, 19, 42, 30, 0, 0, 0, 0, 0,
	0, 0, 52, 0, 60, 62, 0, 0, 61, 0,
	43, 0, 36, 0, 0, 0, 34, 0, 0, 59,
	88, 108, 109, 113, 111, 115, 114, 0, 0, 0,
	0, 85, 0, 0, 0, 0, 93, 94, 96, 97,
	98, 95, 0, 0, 91, 92, 102, 103, 0, 0,
	0, 0, 0, 0, 0, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 110, 112, 105,
	106, 107, 0, 99, 100, 101, 104, 0, 0, 0,
	86, 393, 394, 0, 87, 0, 89, 88, 108, 109,
	113, 111, 115, 114, 0, 0, 0, 0, 85, 0,
	0, 0, 0, 93, 94, 96, 97, 98, 95, 0,
	0, 91, 92, 102, 103, 0, 0, 0, 0, 0,
	0, 0, 90, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 391, 84, 110, 112, 105, 106, 107, 0,
	99, 100, 101, 104, 0, 0, 0, 86, 0, 0,
	0, 87, 390, 89, 88, 108, 109, 113, 111, 115,
	114, 0, 0, 0, 0, 85, 0, 0, 0, 0,
	93, 94, 96, 97, 98, 95, 0, 0, 91, 92,
	102, 103, 0, 0, 0, 0, 0, 0, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 364,
	84, 110, 112, 105, 106, 107, 0, 99, 100, 101,
	104, 0, 0, 0, 86, 0, 0, 0, 87, 363,
	89, 88, 108, 109, 113, 111, 115, 114, 0, 0,
	0, 0, 85, 0, 0, 0, 0, 93, 94, 96,
	97, 98, 95, 0, 0, 91, 92, 102, 103, 0,
	0, 0, 0, 0, 0, 0, 90, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 348, 84, 110, 112,
	105, 106, 107, 0, 99, 100, 101, 104, 0, 0,
	0, 86, 0, 0, 0, 87, 347, 89, 88, 108,
	109, 113, 111, 115, 114, 0, 0, 0, 0, 85,
	0, 0, 0, 0, 93, 94, 96, 97, 98, 95,
	0, 0, 91, 92, 102, 103, 0, 0, 0, 0,
	0, 0, 0, 90, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 316, 84, 110, 112, 105, 106, 107,
	0, 99, 100, 101, 104, 0, 0, 0, 86, 0,
	0, 0, 87, 315, 89, 88, 108, 109, 113, 111,
	115, 114, 0, 0, 0, 0, 85, 0, 0, 0,
	0, 93, 94, 96, 97, 98, 95, 0, 0, 91,
	92, 102, 103, 0, 0, 0, 0, 0, 0, 0,
	90, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	286, 84, 110, 112, 105, 106, 107, 0, 99, 100,
	101, 104, 0, 0, 0, 86, 0, 0, 0, 87,
	285, 89, 88, 108, 109, 113, 111, 115, 114, 0,
	0, 0, 0, 85, 0, 0, 0, 0, 93, 94,
	96, 97, 98, 95, 0, 0, 91, 92, 102, 103,
	0, 0, 0, 0, 0, 0, 0, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 84, 110,
	112, 105, 106, 107, 0, 99, 100, 101, 104, 0,
	0, 0, 86, 0, 0, 0, 87, 257, 89, 88,
	108, 109, 113, 111, 115, 114, 0, 0, 0, 0,
	85, 0, 0, 0, 0, 93, 94, 96, 97, 98,
	95, 0, 0, 91, 92, 102, 103, 0, 0, 0,
	0, 0, 0, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 110, 112, 105, 106,
	107, 0, 99, 100, 101, 104, 0, 0, 0, 86,
	249, 250, 0, 87, 0, 89, 88, 108, 109, 113,
	111, 115, 114, 0, 0, 0, 0, 85, 0, 0,
	0, 0, 93, 94, 96, 97, 98, 95, 0, 0,
	91, 92, 102, 103, 0, 0, 0, 0, 0, 0,
	0, 90, 83, 0, 0, 0, 0, 0, 0, 0,
	82, 0, 84, 110, 112, 105, 106, 107, 0, 99,
	100, 101, 104, 0, 0, 0, 86, 0, 0, 0,
	87, 0, 89, 88, 108, 109, 113, 111, 115, 114,
	0, 0, 0, 0, 85, 0, 0, 0, 0, 93,
	94, 96, 97, 98, 95, 0, 0, 91, 92, 102,
	103, 0, 0, 0, 0, 0, 0, 0, 90, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	110, 112, 105, 106, 107, 0, 99, 100, 101, 104,
	0, 0, 0, 86, 444, 0, 0, 87, 0, 89,
	88, 108, 109, 113, 111, 115, 114, 0, 0, 0,
	0, 85, 0, 0, 0, 0, 93, 94, 96, 97,
	98, 95, 0, 0, 91, 92, 102, 103, 0, 0,
	0, 0, 0, 0, 0, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 110, 112, 105,
	106, 107, 0, 99, 100, 101, 104, 0, 0, 0,
	86, 0, 0, 0, 87, 443, 89, 88, 108, 109,
	113, 111, 115, 114, 0, 0, 0, 0, 85, 0,
	0, 0, 0, 93, 94, 96, 97, 98, 95, 0,
	0, 91, 92, 102, 103, 0, 0, 0, 0, 0,
	0, 0, 90, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 110, 112, 105, 106, 107, 0,
	99, 100, 101, 104, 0, 0, 0, 86, 0, 0,
	0, 87, 432, 89, 88, 108, 109, 113, 111, 115,
	114, 0, 0, 0, 0, 85, 0, 0, 0, 0,
	93, 94, 96, 97, 98, 95, 0, 0, 91, 92,
	102, 103, 0, 0, 0, 0, 0, 0, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 429,
	84, 110, 112, 105, 106, 107, 0, 99, 100, 101,
	104, 0, 0, 0, 86, 0, 0, 0, 87, 0,
	89, 88, 108, 109, 113, 111, 115, 114, 0, 0,
	0, 0, 85, 0, 0, 0, 0, 93, 94, 96,
	97, 98, 95, 0, 0, 91, 92, 102, 103, 0,
	0, 0, 0, 0, 0, 0, 90, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 110, 112,
	105, 106, 107, 0, 99, 100, 101, 104, 0, 0,
	0, 86, 427, 0, 0, 87, 0, 89, 88, 108,
	109, 113, 111, 115, 114, 0, 0, 0, 0, 85,
	0, 0, 0, 0, 93, 94, 96, 97, 98, 95,
	0, 0, 91, 92, 102, 103, 0, 0, 0, 0,
	0, 0, 0, 90, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 110, 112, 105, 106, 107,
	0, 99, 100, 101, 104, 0, 0, 0, 86, 0,
	0, 0, 87, 425, 89, 88, 108, 109, 113, 111,
	115, 114, 0, 0, 0, 0, 85, 0, 0, 0,
	0, 93, 94, 96, 97, 98, 95, 0, 0, 91,
	92, 102, 103, 0, 0, 0, 0, 0, 0, 0,
	90, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	414, 84, 110, 112, 105, 106, 107, 0, 99, 100,
	101, 104, 0, 0, 0, 86, 0, 0, 0, 87,
	0, 89, 88, 108, 109, 113, 111, 115, 114, 0,
	0, 0, 0, 85, 0, 0, 0, 0, 93, 94,
	96, 97, 98, 95, 0, 0, 91, 92, 102, 103,
	0, 0, 0, 0, 0, 0, 0, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 110,
	112, 105, 106, 107, 0, 99, 100, 101, 104, 0,
	411, 0, 86, 0, 0, 0, 87, 0, 89, 88,
	108, 109, 113, 111, 115, 114, 0, 0, 0, 0,
	85, 0, 0, 0, 0, 93, 94, 96, 97, 98,
	95, 0, 0, 91, 92, 102, 103, 0, 0, 0,
	0, 0, 0, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 110, 112, 105, 106,
	107, 0, 99, 100, 101, 104, 0, 0, 0, 86,
	0, 0, 0, 87, 403, 89, 88, 108, 109, 113,
	111, 115, 114, 0, 0, 0, 0, 85, 0, 0,
	0, 0, 93, 94, 96, 97, 98, 95, 0, 0,
	91, 92, 102, 103, 0, 0, 0, 0, 0, 0,
	0, 90, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 110, 112, 105, 106, 107, 0, 99,
	100, 101, 104, 0, 372, 0, 86, 0, 0, 0,
	87, 0, 89, 88, 108, 109, 113, 111, 115, 114,
	0, 0, 0, 0, 85, 0, 0, 0, 0, 93,
	94, 96, 97, 98, 95, 0, 0, 91, 92, 102,
	103, 0, 0, 0, 0, 0, 0, 0, 90, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	110, 112, 105, 106, 107, 0, 99, 100, 101, 104,
	0, 370, 0, 86, 0, 0, 0, 87, 0, 89,
	88, 108, 109, 113, 111, 115, 114, 0, 0, 0,
	0, 85, 0, 0, 0, 0, 93, 94, 96, 97,
	98, 95, 0, 0, 91, 92, 102, 103, 0, 0,
	0, 0, 0, 0, 0, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 110, 112, 105,
	106, 107, 0, 99, 100, 101, 104, 0, 0, 0,
	86, 361, 0, 0, 87, 0, 89, 88, 108, 109,
	113, 111, 115, 114, 0, 0, 0, 0, 85, 0,
	0, 0, 0, 93, 94, 96, 97, 98, 95, 0,
	0, 91, 92, 102, 103, 0, 0, 0, 0, 0,
	0, 0, 90, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 110, 112, 105, 106, 107, 0,
	99, 100, 101, 104, 0, 0, 0, 86, 0, 0,
	327, 87, 0, 89, 88, 108, 109, 113, 111, 115,
	114, 0, 0, 0, 0, 85, 0, 0, 0, 0,
	93, 94, 96, 97, 98, 95, 0, 0, 91, 92,
	102, 103, 0, 0, 0, 0, 0, 0, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 110, 112, 105, 106, 107, 0, 99, 100, 101,
	104, 0, 322, 0, 86, 0, 0, 0, 87, 0,
	89, 88, 108, 109, 113, 111, 115, 114, 0, 0,
	0, 0, 85, 0, 0, 0, 0, 93, 94, 96,
	97, 98, 95, 0, 0, 91, 92, 102, 103, 0,
	0, 0, 0, 0, 0, 0, 90, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 110, 112,
	105, 106, 107, 0, 99, 100, 101, 104, 0, 318,
	0, 86, 0, 0, 0, 87, 0, 89, 88, 108,
	109, 113, 111, 115, 114, 0, 0, 0, 0, 85,
	0, 0, 0, 0, 93, 94, 96, 97, 98, 95,
	0, 0, 91, 92, 102, 103, 0, 0, 0, 0,
	0, 0, 0, 90, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 110, 112, 105, 106, 107,
	0, 99, 100, 101, 104, 0, 309, 0, 86, 0,
	0, 0, 87, 0, 89, 88, 108, 109, 113, 111,
	115, 114, 0, 0, 0, 0, 85, 0, 0, 0,
	0, 93, 94, 96, 97, 98, 95, 0, 0, 91,
	92, 102, 103, 0, 0, 0, 0, 0, 0, 0,
	90, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	297, 84, 110, 112, 105, 106, 107, 0, 99, 100,
	101, 104, 0, 0, 0, 86, 0, 0, 0, 87,
	0, 89, 88, 108, 109, 113, 111, 115, 114, 0,
	0, 0, 0, 85, 0, 0, 0, 0, 93, 94,
	96, 97, 98, 95, 0, 0, 91, 92, 102, 103,
	0, 0, 0, 0, 0, 0, 0, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 110,
	112, 105, 106, 107, 0, 99, 100, 101, 104, 0,
	0, 0, 86, 288, 0, 0, 87, 0, 89, 88,
	108, 109, 113, 111, 115, 114, 0, 0, 0, 0,
	85, 0, 0, 0, 0, 93, 94, 96, 97, 98,
	95, 0, 0, 91, 92, 102, 103, 0, 0, 0,
	0, 0, 0, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 110, 112, 105, 106,
	107, 0, 99, 100, 101, 104, 0, 0, 0, 86,
	0, 0, 267, 87, 0, 89, 88, 108, 109, 113,
	111, 115, 114, 0, 0, 0, 0, 85, 0, 0,
	0, 0, 93, 94, 96, 97, 98, 95, 0, 0,
	91, 92, 102, 103, 0, 0, 0, 0, 0, 0,
	0, 90, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 84, 110, 112, 105, 106, 107, 0, 99,
	100, 101, 104, 0, 0, 0, 86, 0, 0, 0,
	87, 0, 89, 88, 108, 109, 113, 111, 115, 114,
	0, 0, 0, 0, 85, 0, 0, 0, 0, 93,
	94, 96, 97, 98, 95, 0, 0, 91, 92, 102,
	103, 0, 0, 0, 0, 0, 0, 0, 90, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	110, 112, 105, 106, 107, 0, 99, 100, 101, 104,
	0, 0, 0, 86, 251, 0, 0, 87, 0, 89,
	88, 108, 109, 113, 111, 115, 114, 0, 0, 0,
	0, 85, 0, 0, 0, 0, 93, 94, 96, 97,
	98, 95, 0, 0, 91, 92, 102, 103, 0, 0,
	0, 0, 0, 0, 0, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 110, 112, 105,
	106, 107, 0, 99, 100, 101, 104, 0, 0, 0,
	86, 227, 0, 0, 87, 0, 89, 88, 108, 109,
	113, 111, 115, 114, 0, 0, 0, 0, 85, 0,
	0, 0, 0, 93, 94, 96, 97, 98, 95, 0,
	0, 91, 92, 102, 103, 0, 0, 0, 0, 0,
	0, 0, 90, 0, 0, 0, 0, 0, 0, 0,
	213, 0, 0, 84, 110, 112, 105, 106, 107, 0,
	99, 100, 101, 104, 0, 0, 0, 86, 0, 0,
	0, 87, 0, 89, 88, 108, 109, 113, 111, 115,
	114, 0, 0, 0, 0, 85, 0, 0, 0, 0,
	93, 94, 96, 97, 98, 95, 0, 0, 91, 92,
	102, 103, 0, 0, 0, 0, 0, 0, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 110, 112, 105, 106, 107, 0, 99, 100, 101,
	104, 0, 212, 0, 86, 0, 0, 0, 87, 0,
	89, 88, 108, 109, 113, 111, 115, 114, 0, 0,
	0, 0, 85, 0, 0, 0, 0, 93, 94, 96,
	97, 98, 95, 0, 0, 91, 92, 102, 103, 0,
	0, 0, 0, 0, 0, 0, 90, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 110, 112,
	105, 106, 107, 0, 99, 100, 101, 104, 0, 203,
	0, 86, 0, 0, 0, 87, 0, 89, 88, 108,
	109, 113, 111, 115, 114, 0, 0, 0, 0, 85,
	0, 0, 0, 0, 93, 94, 96, 97, 98, 95,
	0, 0, 91, 92, 102, 103, 0, 0, 0, 0,
	0, 0, 0, 90, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 110, 112, 105, 106, 107,
	0, 99, 100, 101, 104, 0, 0, 0, 86, 0,
	0, 0, 87, 0, 89, 88, 108, 109, 113, 111,
	115, 114, 0, 0, 0, 0, 85, 0, 0, 0,
	0, 93, 94, 96, 97, 98, 95, 0, 0, 91,
	92, 102, 103, 0, 0, 0, 0, 0, 0, 0,
	90, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 110, 112, 105, 106, 107, 0, 99, 100,
	101, 104, 0, 0, 0, 165, 0, 0, 0, 87,
	0, 89, 88, 108, 109, 113, 111, 115, 114, 0,
	0, 0, 0, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 91, 92, 102, 103,
	0, 0, 0, 0, 0, 0, 0, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 110,
	112, 105, 106, 107, 0, 99, 100, 101, 104, 0,
	0, 0, 86, 0, 0, 0, 87, 0, 89, 88,
	108, 109, 113, 111, 115, 114, 0, 0, 0, 0,
	85, 37, 53, 54, 0, 0, 33, 0, 0, 0,
	0, 0, 0, 91, 92, 102, 103, 0, 0, 0,
	40, 55, 56, 57, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 110, 112, 105, 106,
	107, 0, 99, 100, 101, 104, 0, 41, 58, 86,
	0, 39, 0, 87, 42, 89, 0, 0, 0, 0,
	0, 0, 0, 52, 0, 60, 62, 0, 0, 61,
	0, 43, 0, 73, 37, 53, 54, 34, 346, 33,
	59, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 40, 55, 56, 57, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 37,
	53, 54, 0, 0, 33, 0, 0, 0, 0, 0,
	41, 58, 0, 0, 39, 0, 0, 42, 40, 55,
	56, 57, 0, 0, 0, 0, 52, 0, 60, 62,
	0, 0, 61, 0, 43, 0, 73, 0, 0, 0,
	34, 314, 0, 59, 0, 41, 58, 0, 0, 39,
	0, 0, 42, 0, 0, 0, 88, 108, 109, 113,
	111, 52, 114, 60, 62, 0, 0, 61, 0, 43,
	0, 73, 0, 0, 268, 34, 0, 0, 59, 0,
	91, 92, 102, 103, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 110, 112, 105, 106, 107, 0, 99,
	100, 101, 104, 37, 53, 54, 86, 0, 33, 0,
	87, 0, 89, 0, 0, 0, 37, 53, 54, 0,
	0, 33, 40, 55, 56, 57, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 40, 55, 56, 57, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 41,
	58, 0, 0, 39, 0, 0, 42, 0, 0, 0,
	230, 0, 41, 58, 0, 52, 39, 60, 62, 42,
	0, 61, 0, 43, 0, 73, 0, 0, 52, 34,
	60, 62, 59, 0, 61, 0, 43, 0, 73, 0,
	0, 209, 34, 0, 0, 59, 37, 53, 54, 0,
	0, 33, 0, 0, 0, 0, 0, 0, 0, 37,
	53, 54, 0, 0, 33, 40, 55, 56, 57, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 40, 55,
	56, 57, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 41, 58, 0, 0, 39, 0, 0, 42,
	0, 0, 0, 176, 0, 41, 58, 0, 52, 39,
	60, 62, 42, 0, 61, 0, 43, 0, 73, 0,
	0, 52, 34, 60, 62, 59, 0, 61, 0, 43,
	0, 73, 37, 53, 54, 34, 0, 33, 59, 0,
	0, 0, 0, 0, 0, 37, 53, 54, 0, 0,
	33, 40, 55, 56, 57, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 40, 55, 56, 57, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 41, 58,
	0, 0, 39, 0, 0, 42, 0, 0, 0, 0,
	0, 41, 58, 0, 52, 39, 60, 62, 42, 0,
	61, 0, 373, 0, 73, 0, 0, 52, 34, 60,
	62, 59, 0, 61, 0, 325, 0, 73, 37, 53,
	54, 34, 0, 33, 59, 0, 0, 0, 0, 0,
	0, 122, 53, 54, 0, 0, 33, 40, 55, 56,
	57, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	40, 55, 56, 57, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 41, 58, 0, 0, 39, 0,
	0, 42, 0, 0, 0, 0, 0, 41, 58, 0,
	52, 39, 60, 62, 42, 0, 61, 0, 323, 0,
	73, 0, 0, 52, 34, 60, 62, 59, 0, 61,
	0, 43, 0, 73, 37, 53, 54, 34, 0, 33,
	59, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 40, 55, 56, 57, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 108, 109,
	113, 111, 0, 0, 0, 0, 0, 0, 0, 0,
	41, 58, 0, 0, 39, 0, 0, 42, 0, 0,
	0, 91, 92, 102, 103, 0, 52, 0, 60, 62,
	0, 0, 61, 0, 265, 0, 73, 0, 0, 0,
	34, 0, 0, 59, 110, 112, 105, 106, 107, 0,
	99, 100, 101, 104, 37, 53, 54, 86, 0, 33,
	0, 87, 0, 89, 0, 0, 0, 37, 154, 54,
	0, 0, 33, 40, 55, 56, 57, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 40, 55, 56, 57,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	41, 58, 0, 0, 39, 0, 0, 42, 0, 0,
	0, 0, 0, 41, 58, 0, 52, 39, 60, 62,
	42, 0, 61, 0, 43, 88, 241, 0, 0, 52,
	34, 60, 62, 59, 0, 61, 0, 43, 0, 73,
	77, 53, 54, 34, 0, 33, 59, 0, 0, 91,
	92, 102, 103, 0, 0, 0, 0, 0, 0, 40,
	55, 56, 57, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 105, 106, 107, 0, 99, 100,
	101, 104, 0, 0, 0, 86, 41, 58, 0, 87,
	39, 89, 0, 42, 0, 0, 0, 0, 0, 0,
	0, 0, 52, 0, 60, 62, 0, 0, 61, 0,
	43, 0, 73, 0, 0, 0, 34, 0, 0, 59,
}
var yyPact = [...]int{

	-72, -1000, 626, -72, -1000, -78, -78, -1000, -1000, -1000,
	-1000, -1000, -1000, 3525, 3525, 308, 209, 3946, 118, 117,
	285, -1000, -1000, -1000, 1230, -1000, -1000, 3525, 461, 3525,
	3525, -1000, -1000, 168, -43, 75, 3697, 104, -7, 112,
	110, 107, -2, -78, -1000, -1000, -1000, -1000, -1000, 304,
	130, -1000, 3873, -1000, -1000, -1000, -1000, -1000, 3525, 3525,
	3525, 3525, 3525, -1000, -1000, -1000, -1000, -1000, 626, -78,
	-1000, 39, 2972, 3525, 2972, 208, -72, 105, 3039, 3525,
	3525, 268, 3525, 3525, 3525, 3525, 3525, 3512, 3525, 307,
	3525, -1000, -1000, 3525, 3525, 3525, 3525, 3525, 3525, 3525,
	3525, 3525, 3525, 3525, 3525, 3525, 3525, 3525, 3525, 3525,
	3525, 3525, 3525, 3525, 3525, 3525, 2905, -72, 114, 547,
	3432, 13, 104, 2838, 2771, 304, 91, 7, 3525, -78,
	-40, -1000, 75, 75, 10, 75, 206, -32, 88, 2704,
	3525, 3419, 3525, 75, 122, -78, 75, 3525, 59, -1000,
	3525, 3860, 3525, -78, -1000, -30, 3106, -30, -30, -30,
	-30, -1000, -72, 196, 3525, 3525, 1163, 2637, 3525, -72,
	2972, 2972, 2570, 3173, 126, 1096, 3525, -5, -1000, 3106,
	2972, 2972, 2972, 2972, 2972, 2972, -5, -5, -5, -5,
	-5, -5, 434, 434, 434, 3919, 3919, 3919, 3919, 3919,
	3919, 3791, 3350, -72, 195, -78, 3525, -78, -72, 3770,
	2503, 3305, -78, 306, 123, 304, -1000, -52, -78, 301,
	-69, -69, 75, -69, -78, 7, 228, -1000, 121, 1029,
	3525, 2436, -38, -12, 299, 3525, -14, -61, 2369, 3525,
	39, 3697, 39, 2972, 3525, 190, 264, 119, 85, -1000,
	3525, -1000, 2302, 189, 3525, 82, -1000, -1000, 3270, 962,
	187, -1000, 2235, 298, 186, -72, 2168, 3684, 3611, 2101,
	244, -1000, 205, 77, 74, -78, -34, -78, 3525, -1000,
	-25, 297, 3525, 73, -1000, -1000, 3197, 895, -1000, -1000,
	-1000, 3525, 47, -61, 75, 185, -78, 3525, 39, 80,
	2972, -7, -1000, 201, 68, -1000, 64, -1000, 2034, -72,
	-1000, 3106, -1000, 828, -1000, -1000, 3525, -1000, -72, -1000,
	-1000, 183, -72, -72, 1967, -72, 1900, 3598, -26, -1000,
	-1000, 223, 3525, -72, 204, 203, 56, -78, -1000, -52,
	75, -57, 75, 39, -1000, 761, -1000, -1000, 3525, 694,
	3525, 182, -49, -1000, 3525, 2972, -1000, 200, -72, -1000,
	-1000, -1000, 174, -1000, 3525, 1833, 171, -1000, 166, 163,
	-72, 162, -72, -72, 1766, 159, -1000, -1000, -72, 1699,
	61, 158, -72, -72, 199, 157, -69, 152, -78, -60,
	-1000, 3525, 1632, -1000, 3525, 1565, -1000, -78, 1498, -72,
	151, -1000, 1431, -1000, -1000, -1000, -1000, 149, -1000, 147,
	146, -72, -1000, -1000, -72, -72, -1000, 145, 144, -72,
	-1000, -1000, 296, -1000, 1364, -1000, 1297, -1000, 3525, 3525,
	142, 262, -1000, -1000, -1000, -1000, 141, -1000, -1000, -1000,
	-1000, 140, 75, -1000, -1000, -61, 2972, 260, 198, -1000,
	-1000, -69, 139, 169, -72, -1000, -72, 136, 134, -1000,
	-1000,
}
var yyPgo = [...]int{

	0, 43, 361, 285, 296, 360, 359, 358, 357, 356,
	348, 347, 9, 8, 253, 0, 14, 2, 346, 40,
	344, 332, 5, 331, 4, 330, 329, 327, 324, 323,
	322, 321, 318, 313, 316, 315, 160, 1, 10, 48,
}
var yyR1 = [...]int{

	0, 1, 1, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	5, 5, 6, 7, 7, 7, 7, 7, 7, 7,
	8, 8, 8, 9, 9, 9, 9, 9, 9, 9,
	9, 9, 9, 9, 10, 11, 11, 11, 11, 11,
	12, 12, 13, 14, 14, 14, 14, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	16, 16, 16, 17, 17, 17, 17, 17, 17, 17,
	18, 18, 19, 19, 20, 20, 21, 22, 23, 23,
	23, 23, 23, 23, 24, 24, 24, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 26, 26, 27,
	27, 27, 27, 27, 28, 28, 28, 28, 29, 29,
	29, 29, 29, 29, 29, 29, 33, 33, 33, 33,
	33, 33, 32, 32, 32, 31, 31, 31, 31, 31,
	31, 30, 30, 34, 34, 35, 35, 35, 36, 36,
	38, 38, 39, 37, 37, 37, 37,
}
var yyR2 = [...]int{

	0, 1, 2, 2, 3, 0, 1, 1, 1, 2,
	2, 5, 13, 12, 9, 8, 6, 5, 6, 5,
	4, 6, 4, 1, 1, 1, 1, 1, 1, 1,
	2, 4, 4, 3, 3, 5, 5, 3, 3, 3,
	5, 7, 5, 4, 7, 5, 6, 7, 7, 8,
	7, 8, 8, 9, 7, 0, 1, 1, 2, 2,
	4, 4, 3, 0, 1, 4, 4, 1, 1, 5,
	3, 7, 8, 8, 9, 2, 5, 7, 3, 5,
	4, 5, 4, 4, 4, 4, 4, 4, 6, 8,
	7, 3, 6, 10, 5, 1, 1, 1, 1, 1,
	0, 1, 4, 1, 3, 2, 2, 5, 2, 6,
	3, 5, 2, 3, 1, 1, 3, 1, 2, 1,
	1, 1, 1, 1, 0, 3, 6, 6, 5, 5,
	7, 8, 6, 5, 5, 7, 8, 3, 2, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 0, 1, 2, 1, 1, 0, 1,
	1, 2, 1, 0, 2, 1, 1,
}
var yyChk = [...]int{

	-1000, -1, -34, -2, -35, 79, -38, -39, 84, -3,
	-4, 38, 39, 10, 12, 28, 29, 47, 55, 56,
	-8, -9, -10, -5, -15, -6, -7, 13, 15, 44,
	58, -20, -23, 9, 80, -19, 76, 4, -22, 54,
	23, 50, 57, 74, -25, -26, -27, -28, -29, 11,
	-14, -21, 66, 5, 6, 24, 25, 26, 51, 83,
	68, 72, 69, -33, -32, -31, -30, -34, -35, -38,
	-39, -14, -15, 76, -15, 4, 74, 4, -15, 76,
	76, 14, 60, 52, 62, 27, 76, 80, 16, 82,
	51, 40, 41, 32, 33, 37, 34, 35, 36, 69,
	70, 71, 42, 43, 72, 65, 66, 67, 17, 18,
	63, 20, 64, 19, 22, 21, -15, 74, -16, -15,
	79, -4, 4, -15, -15, 76, 4, 81, -36, -38,
	-17, 4, 69, -19, 57, 48, 49, 80, -16, -15,
	76, 80, 76, 76, 76, 74, 80, -36, -16, 4,
	60, 59, 52, 78, 5, -15, -15, -15, -15, -15,
	-15, -3, 74, -1, 76, 76, -15, -15, 13, 74,
	-15, -15, -15, -15, -14, -15, 61, -15, 4, -15,
	-15, -15, -15, -15, -15, -15, -15, -15, -15, -15,
	-15, -15, -15, -15, -15, -15, -15, -15, -15, -15,
	-15, -15, -15, 74, -1, -38, 16, 78, 74, 79,
	-15, 79, 74, 59, -16, 76, -19, -14, 74, 82,
	-17, -17, 80, -17, 74, 81, 77, 77, -14, -15,
	61, -15, -17, -17, 53, -36, -17, -24, -15, 60,
	-14, 76, -14, -15, -36, -1, 75, -14, -14, 77,
	78, 77, -15, -1, 61, 8, 77, 81, 61, -15,
	-1, 75, -15, -36, -1, 74, -15, 79, 79, -15,
	-36, 4, 77, 8, -16, 78, -37, -38, -36, 4,
	-17, -36, 60, 8, 77, 81, 61, -15, 77, 77,
	77, 78, 4, -24, 81, -37, 78, 61, -14, -16,
	-15, -22, 75, 30, 8, 77, 8, 77, -15, 74,
	75, -15, 77, -15, 81, 81, 61, 75, 74, 4,
	75, -1, 74, 74, -15, 74, -15, 79, -11, -13,
	-12, 46, 45, 74, 77, 77, 8, -38, 81, -14,
	81, -18, 4, -14, 77, -15, 81, 81, 61, -15,
	78, -37, -17, 75, -36, -15, 77, 4, 74, 77,
	77, 77, -1, 81, 61, -15, -1, 75, -1, -1,
	74, -1, 74, 74, -15, -36, -12, -13, 61, -15,
	-14, -1, 74, 74, 77, -37, -17, -36, 78, -17,
	81, 61, -15, 77, 78, -15, 75, 74, -15, 74,
	-1, 75, -15, 81, 75, 75, 75, -1, 75, -1,
	-1, 74, 75, -1, 61, 61, 75, -1, -1, 74,
	75, 75, -36, -36, -15, 81, -15, 77, -36, 61,
	-1, 75, 81, 75, 75, 75, -1, -1, -1, 75,
	75, -1, 4, 81, 77, -24, -15, 75, 31, 75,
	75, -17, -37, 31, 74, 75, 74, -1, -1, 75,
	75,
}
var yyDef = [...]int{

	173, -2, -2, 173, 174, 177, 176, 180, 182, 3,
	6, 7, 8, 63, 0, 0, 0, 0, 0, 0,
	23, 24, 25, 26, -2, 28, 29, 0, -2, 0,
	0, 67, 68, 0, 178, 0, 100, 117, 115, 0,
	0, 0, 0, 178, 95, 96, 97, 98, 99, 100,
	0, 114, 0, 119, 120, 121, 122, 123, 0, 0,
	0, 0, 0, 144, 145, 146, 147, 2, -2, 175,
	181, 9, 64, 0, 10, 0, 173, 117, 0, 0,
	0, 0, 0, 0, 0, 0, 63, 0, 0, 0,
	0, 148, 149, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 173, 0, 64,
	0, 0, -2, 0, 30, 100, 0, -2, 63, 179,
	0, 103, 0, 0, 0, 0, 0, 0, 0, 0,
	63, 0, 0, 0, 0, 178, 0, 124, 0, 101,
	63, 63, 0, 178, 118, 139, 138, 140, 141, 142,
	143, 4, 173, 0, 63, 63, 0, 0, 0, 173,
	33, 38, 0, 70, 0, 0, 0, 91, 116, 137,
	150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
	160, 161, 162, 163, 164, 165, 166, 167, 168, 169,
	170, 171, 172, 173, 0, 176, 0, 178, 173, 0,
	0, 0, 178, 0, 0, 100, 113, 183, 178, 0,
	105, 106, 0, 108, 178, 112, 0, 78, 0, 0,
	0, 0, 0, 0, 0, 124, 0, 183, 0, 63,
	34, 100, 37, 39, 0, 0, 0, 0, 0, 20,
	0, 22, 0, 0, 0, 0, 82, 84, 0, 0,
	0, 43, 0, 0, 0, 173, 0, 0, 0, 0,
	55, 31, 0, 0, 0, -2, 0, 185, 63, 104,
	0, 0, 63, 0, 80, 83, 0, 0, 85, 86,
	87, 0, 0, 183, 0, 0, -2, 0, 32, 0,
	65, -2, 11, 0, 0, -2, 0, -2, 0, 173,
	42, 69, 81, 0, 133, 134, 0, 40, 173, 102,
	45, 0, 173, 173, 0, 173, 0, 0, 178, 56,
	57, 0, 63, 173, 0, 0, 0, -2, 76, 183,
	0, 178, 0, 35, 79, 0, 128, 129, 0, 0,
	0, 0, 0, 94, 0, 125, 36, 0, 173, -2,
	-2, 21, 0, 132, 0, 0, 0, 46, 0, 0,
	173, 0, 173, 173, 0, 0, 58, 59, 173, 64,
	0, 0, 173, 173, 0, 0, 107, 0, 178, 178,
	127, 0, 0, 88, 0, 0, 92, 178, 0, 173,
	0, 41, 0, 135, 44, 47, 48, 0, 50, 0,
	0, 173, 54, 62, 173, 173, 71, 0, 0, 173,
	77, 109, 0, 110, 0, 130, 0, 90, 124, 0,
	0, 15, 136, 49, 51, 52, 0, 60, 61, 72,
	73, 0, 0, 131, 89, 183, 126, 14, 0, 53,
	74, 111, 0, 0, 173, 93, 173, 0, 0, 13,
	12,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	84, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 83, 3, 3, 3, 71, 72, 3,
	76, 77, 69, 65, 78, 66, 82, 70, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 61, 79,
	63, 60, 64, 62, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 80, 3, 81, 68, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 74, 67, 75,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 73,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:110
		{
			yyVAL.compstmt = nil
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:114
		{
			yyVAL.compstmt = yyDollar[1].stmts
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:120
		{
			if yyDollar[2].stmt != nil {
				yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[2].stmt}}
			}
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmts
			}
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:129
		{
			if yyDollar[3].stmt != nil {
				if yyDollar[1].stmts == nil {
					yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[3].stmt}}
				} else {
					stmts := yyDollar[1].stmts.(*ast.StmtsStmt)
					stmts.Stmts = append(stmts.Stmts, yyDollar[3].stmt)
				}
				if l, ok := yylex.(*Lexer); ok {
					l.stmt = yyVAL.stmts
				}
			}
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:145
		{
			yyVAL.stmt = nil
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:149
		{
			yyVAL.stmt = yyDollar[1].stmt_var_or_lets
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:153
		{
			yyVAL.stmt = &ast.BreakStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:158
		{
			yyVAL.stmt = &ast.ContinueStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:163
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyDollar[2].exprs}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:168
		{
			yyVAL.stmt = &ast.ThrowStmt{Expr: yyDollar[2].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 11:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:173
		{
			yyVAL.stmt = &ast.ModuleStmt{Name: yyDollar[2].tok.Lit, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 12:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.go.y:178
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt, Finally: yyDollar[12].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 13:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.go.y:183
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt, Finally: yyDollar[11].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 14:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:188
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 15:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:193
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 16:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:198
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 17:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:203
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 18:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:208
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].expr.Position())
		}
	case 19:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:213
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 20:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:218
		{
			yyVAL.stmt = &ast.DeleteStmt{Item: yyDollar[3].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 21:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:223
		{
			yyVAL.stmt = &ast.DeleteStmt{Item: yyDollar[3].expr, Key: yyDollar[5].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:228
		{
			yyVAL.stmt = &ast.CloseStmt{Expr: yyDollar[3].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:233
		{
			yyVAL.stmt = yyDollar[1].stmt_if
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:237
		{
			yyVAL.stmt = yyDollar[1].stmt_for
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:241
		{
			yyVAL.stmt = yyDollar[1].stmt_switch
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:245
		{
			yyVAL.stmt = yyDollar[1].stmt_import
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:249
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyDollar[1].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].expr.Position())
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:256
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_var
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:260
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_lets
		}
	case 30:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:266
		{
			yyVAL.stmt_import = &ast.ImportStmt{Name: yyDollar[2].expr}
			yyVAL.stmt_import.SetPosition(yyDollar[1].tok.Position())
		}
	case 31:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:272
		{
			yyVAL.stmt_import = &ast.ImportStmt{Name: yyDollar[2].expr, As: yyDollar[4].tok.Lit}
			yyVAL.stmt_import.SetPosition(yyDollar[1].tok.Position())
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:279
		{
			yyVAL.stmt_var = &ast.VarStmt{Names: yyDollar[2].expr_idents, Exprs: yyDollar[4].exprs}
			yyVAL.stmt_var.SetPosition(yyDollar[1].tok.Position())
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:286
		{
			yyVAL.stmt_lets = &ast.LetsStmt{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{yyDollar[3].expr}}
			yyVAL.stmt_lets.SetPosition(yyDollar[1].expr.Position())
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:291
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_lets = &ast.LetMapItemStmt{LHSS: yyDollar[1].exprs, RHS: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_lets = &ast.LetsStmt{LHSS: yyDollar[1].exprs, RHSS: yyDollar[3].exprs}
				}
			} else {
				yyVAL.stmt_lets = &ast.LetsStmt{LHSS: yyDollar[1].exprs, RHSS: yyDollar[3].exprs}
			}
			yyVAL.stmt_lets.SetPosition(yyVAL.stmt_lets.Position())
		}
	case 35:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:304
		{
			yyS := make([]ast.Expr, len(yyDollar[2].expr_idents))
			for i, yyv := range yyDollar[2].expr_idents {
				yyS[i] = &ast.IdentExpr{Lit: yyv}
			}
			yyVAL.stmt_lets = &ast.LetsStmt{LHSS: yyS, RHSS: yyDollar[5].exprs, Unpack: true}
			yyVAL.stmt_lets.SetPosition(yyVAL.stmt_lets.Position())
		}
	case 36:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:314
		{
			yyS := make([]ast.Expr, len(yyDollar[4].expr_idents))
			for i, yyv := range yyDollar[4].expr_idents {
				yyS[i] = &ast.IdentExpr{Lit: yyv}
			}
			yyVAL.stmt_lets = &ast.LetsStmt{LHSS: yyS, RHSS: yyDollar[1].exprs, Unpack: true}
			yyVAL.stmt_lets.SetPosition(yyVAL.stmt_lets.Position())
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:324
		{
			// for maps
			if len(yyDollar[3].exprs) == 2 && len(yyDollar[1].exprs) == 1 {
				if _, ok := yyDollar[1].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_lets = &ast.LetMapItemStmt{LHSS: yyDollar[3].exprs, RHS: yyDollar[1].exprs[0]}
				} else {
					yyVAL.stmt_lets = &ast.LetsStmt{LHSS: yyDollar[3].exprs, RHSS: yyDollar[1].exprs}
				}
			} else {
				yyVAL.stmt_lets = &ast.LetsStmt{LHSS: yyDollar[3].exprs, RHSS: yyDollar[1].exprs}
			}
			yyVAL.stmt_lets.SetPosition(yyVAL.stmt_lets.Position())
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:338
		{
			yyVAL.stmt_lets = &ast.ChanStmt{LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
			yyVAL.stmt_lets.SetPosition(yyDollar[1].expr.Position())
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:343
		{
			if len(yyDollar[1].exprs) == 2 {
				chanStmt := &ast.ChanStmt{LHS: yyDollar[1].exprs[0].(ast.Expr), OkExpr: yyDollar[1].exprs[1].(ast.Expr), RHS: yyDollar[3].expr}
				yyVAL.stmt_lets = chanStmt
				yyVAL.stmt_lets.SetPosition(chanStmt.LHS.Position())
			} else if len(yyDollar[1].exprs) < 2 {
				yylex.Error("missing expressions on left side of channel operator")
				yyVAL.stmt_lets = &ast.ChanStmt{RHS: yyDollar[3].expr}
				yyVAL.stmt_lets.SetPosition(yyDollar[2].tok.Position())
			}
		}
	case 40:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:357
		{
			yyVAL.stmt_if = &ast.IfStmt{If: yyDollar[2].expr, Then: yyDollar[4].compstmt, Else: nil}
			yyVAL.stmt_if.SetPosition(yyDollar[1].tok.Position())
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:362
		{
			ifStmt := yyDollar[1].stmt_if.(*ast.IfStmt)
			ifStmt.ElseIf = append(ifStmt.ElseIf, &ast.IfStmt{If: yyDollar[4].expr, Then: yyDollar[6].compstmt})
		}
	case 42:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:367
		{
			ifStmt := yyDollar[1].stmt_if.(*ast.IfStmt)
			if ifStmt.Else != nil {
				yylex.Error("multiple else statement")
			}
			ifStmt.Else = yyDollar[4].compstmt
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:377
		{
			yyVAL.stmt_for = &ast.LoopStmt{Stmt: yyDollar[3].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 44:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:382
		{
			if len(yyDollar[2].expr_idents) < 1 {
				yylex.Error("missing identifier")
			} else if len(yyDollar[2].expr_idents) > 2 {
				yylex.Error("too many identifiers")
			} else {
				yyVAL.stmt_for = &ast.ForStmt{Vars: yyDollar[2].expr_idents, Value: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
				yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
			}
		}
	case 45:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:393
		{
			yyVAL.stmt_for = &ast.LoopStmt{Expr: yyDollar[2].expr, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 46:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:398
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt: yyDollar[5].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 47:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:403
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr3: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 48:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:408
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 49:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:413
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 50:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:418
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 51:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:423
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 52:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:428
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 53:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:433
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Expr3: yyDollar[6].expr, Stmt: yyDollar[8].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 54:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:440
		{
			switchStmt := yyDollar[5].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Expr = yyDollar[2].expr
			yyVAL.stmt_switch = switchStmt
			yyVAL.stmt_switch.SetPosition(yyDollar[1].tok.Position())
		}
	case 55:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:449
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{}
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:453
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Default: yyDollar[1].stmt_switch_default}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:457
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Cases: []ast.Stmt{yyDollar[1].stmt_switch_case}}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:461
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Cases = append(switchStmt.Cases, yyDollar[2].stmt_switch_case)
			yyVAL.stmt_switch_cases = switchStmt
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:467
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			if switchStmt.Default != nil {
				yylex.Error("multiple default statement")
			}
			switchStmt.Default = yyDollar[2].stmt_switch_default
		}
	case 60:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:477
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: []ast.Expr{yyDollar[2].expr}, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 61:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:482
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: yyDollar[2].exprs, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:489
		{
			yyVAL.stmt_switch_default = yyDollar[3].compstmt
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:496
		{
			yyVAL.exprs = nil
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:500
		{
			yyVAL.exprs = []ast.Expr{yyDollar[1].expr}
		}
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:504
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr)
		}
	case 66:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:511
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr_ident)
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:520
		{
			yyVAL.expr = yyDollar[1].expr_member_or_ident
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:524
		{
			yyVAL.expr = yyDollar[1].expr_literals
		}
	case 69:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:528
		{
			yyVAL.expr = &ast.TernaryOpExpr{Expr: yyDollar[1].expr, LHS: yyDollar[3].expr, RHS: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:533
		{
			yyVAL.expr = &ast.NilCoalescingOpExpr{LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 71:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:538
		{
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].expr_idents, Stmt: yyDollar[6].compstmt}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 72:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:543
		{
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].expr_idents, Stmt: yyDollar[7].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 73:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:548
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].expr_idents, Stmt: yyDollar[7].compstmt}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 74:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:553
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].expr_idents, Stmt: yyDollar[8].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:558
		{
			yyVAL.expr = &ast.ArrayExpr{}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:563
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[3].exprs}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 77:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:568
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[5].exprs, TypeData: &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:573
		{
			yyVAL.expr = &ast.ParenExpr{SubExpr: yyDollar[2].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 79:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:578
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:583
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 81:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:588
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:593
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:598
		{
			yyVAL.expr = &ast.ItemExpr{Item: yyDollar[1].expr_ident, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr_ident.Position())
		}
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:603
		{
			yyVAL.expr = &ast.ItemExpr{Item: yyDollar[1].expr, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 85:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:608
		{
			yyVAL.expr = &ast.LenExpr{Expr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:613
		{
			if yyDollar[3].type_data.Kind == ast.TypeDefault {
				yyDollar[3].type_data.Kind = ast.TypePtr
				yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			} else {
				yyVAL.expr = &ast.MakeExpr{TypeData: &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[3].type_data}}
			}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 87:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:623
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 88:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:628
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 89:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:633
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr, CapExpr: yyDollar[7].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 90:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:638
		{
			yyVAL.expr = &ast.MakeTypeExpr{Name: yyDollar[4].tok.Lit, Type: yyDollar[6].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:643
		{
			yyVAL.expr = &ast.IncludeExpr{ItemExpr: yyDollar[1].expr, ListExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 92:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:648
		{
			yyDollar[4].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: &ast.TypeStruct{Name: "interface"}, SubType: &ast.TypeStruct{Name: "interface"}}
			yyVAL.expr = yyDollar[4].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 93:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:654
		{
			yyDollar[8].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
			yyVAL.expr = yyDollar[8].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 94:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:660
		{
			yyVAL.expr = yyDollar[3].expr_map
			yyVAL.expr.SetPosition(yyDollar[3].expr_map.Position())
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:665
		{
			yyVAL.expr = yyDollar[1].expr_slice
			yyVAL.expr.SetPosition(yyDollar[1].expr_slice.Position())
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:670
		{
			yyVAL.expr = yyDollar[1].expr_chan
			yyVAL.expr.SetPosition(yyDollar[1].expr_chan.Position())
		}
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:679
		{
			yyVAL.expr_idents = []string{}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:683
		{
			yyVAL.expr_idents = []string{yyDollar[1].tok.Lit}
		}
	case 102:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:687
		{
			if len(yyDollar[1].expr_idents) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_idents = append(yyDollar[1].expr_idents, yyDollar[4].tok.Lit)
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:696
		{
			yyVAL.type_data = &ast.TypeStruct{Name: yyDollar[1].tok.Lit}
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:700
		{
			if yyDollar[1].type_data.Kind != ast.TypeDefault {
				yylex.Error("not type default")
			} else {
				yyDollar[1].type_data.Env = append(yyDollar[1].type_data.Env, yyDollar[1].type_data.Name)
				yyDollar[1].type_data.Name = yyDollar[3].tok.Lit
			}
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:709
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypePtr
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[2].type_data}
			}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:718
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeSlice
				yyDollar[2].type_data.Dimensions = yyDollar[1].slice_count
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}
			}
		}
	case 107:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:728
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:732
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeChan
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeChan, SubType: yyDollar[2].type_data}
			}
		}
	case 109:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:741
		{
			yyVAL.type_data = yyDollar[4].type_data_struct
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:747
		{
			yyVAL.type_data_struct = &ast.TypeStruct{
				Kind:        ast.TypeStructType,
				StructNames: []string{yyDollar[1].tok.Lit},
				StructTypes: []*ast.TypeStruct{yyDollar[2].type_data},
				Name:        yyDollar[2].type_data.Name,
			}
		}
	case 111:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:756
		{
			if yyVAL.type_data_struct == nil || len(yyDollar[1].type_data_struct.StructNames) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.type_data_struct.StructNames = append(yyVAL.type_data_struct.StructNames, yyDollar[4].tok.Lit)
			yyVAL.type_data_struct.StructTypes = append(yyVAL.type_data_struct.StructTypes, yyDollar[5].type_data)
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:766
		{
			yyVAL.slice_count = 1
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:770
		{
			yyVAL.slice_count = yyDollar[3].slice_count + 1
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:776
		{
			yyVAL.expr_member_or_ident = yyDollar[1].expr_member
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:780
		{
			yyVAL.expr_member_or_ident = yyDollar[1].expr_ident
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:786
		{
			yyVAL.expr_member = &ast.MemberExpr{Expr: yyDollar[1].expr, Name: yyDollar[3].tok.Lit}
			yyVAL.expr_member.SetPosition(yyDollar[1].expr.Position())
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:793
		{
			yyVAL.expr_ident = &ast.IdentExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr_ident.SetPosition(yyDollar[1].tok.Position())
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:800
		{
			num, err := toNumber("-" + yyDollar[2].tok.Lit)
			if err != nil {
				yylex.Error("invalid number: -" + yyDollar[2].tok.Lit)
			}
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: num}
			yyVAL.expr_literals.SetPosition(yyDollar[2].tok.Position())
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:809
		{
			num, err := toNumber(yyDollar[1].tok.Lit)
			if err != nil {
				yylex.Error("invalid number: " + yyDollar[1].tok.Lit)
			}
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: num}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:818
		{
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: stringToValue(yyDollar[1].tok.Lit)}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:823
		{
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: trueValue}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:828
		{
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: falseValue}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:833
		{
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: nilValue}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 124:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:840
		{
			yyVAL.expr_map = &ast.MapExpr{}
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:844
		{
			yyVAL.expr_map = &ast.MapExpr{Keys: []ast.Expr{yyDollar[1].expr}, Values: []ast.Expr{yyDollar[3].expr}}
		}
	case 126:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:848
		{
			if yyDollar[1].expr_map.Keys == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_map.Keys = append(yyVAL.expr_map.Keys, yyDollar[4].expr)
			yyVAL.expr_map.Values = append(yyVAL.expr_map.Values, yyDollar[6].expr)
		}
	case 127:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:858
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 128:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:862
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: nil}
		}
	case 129:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:866
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr_ident, Begin: nil, End: yyDollar[4].expr}
		}
	case 130:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:870
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr_ident, End: yyDollar[4].expr, Cap: yyDollar[6].expr}
		}
	case 131:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:874
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: yyDollar[5].expr, Cap: yyDollar[7].expr}
		}
	case 132:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:878
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 133:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:882
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr, Begin: yyDollar[3].expr, End: nil}
		}
	case 134:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:886
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr, Begin: nil, End: yyDollar[4].expr}
		}
	case 135:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:890
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr, End: yyDollar[4].expr, Cap: yyDollar[6].expr}
		}
	case 136:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:894
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr, Begin: yyDollar[3].expr, End: yyDollar[5].expr, Cap: yyDollar[7].expr}
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:900
		{
			yyVAL.expr_chan = &ast.ChanExpr{LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:904
		{
			yyVAL.expr_chan = &ast.ChanExpr{RHS: yyDollar[2].expr}
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:910
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "-", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:915
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "!", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:920
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "^", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:925
		{
			yyVAL.expr = &ast.AddrExpr{Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:930
		{
			yyVAL.expr = &ast.DerefExpr{Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:937
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:942
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:947
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:952
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:959
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "+", RHS: oneLiteral}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:967
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "-", RHS: oneLiteral}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:975
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "+", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:983
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "-", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:991
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "|", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:999
		{
			rhs := &ast.OpExpr{Op: &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "*", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1007
		{
			rhs := &ast.OpExpr{Op: &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "/", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1015
		{
			rhs := &ast.OpExpr{Op: &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "&", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1026
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "*", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1031
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "/", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1036
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "%", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1041
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "<<", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1046
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: ">>", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1051
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "&", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1058
		{
			yyVAL.expr = &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "+", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1063
		{
			yyVAL.expr = &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "-", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1068
		{
			yyVAL.expr = &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "|", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1075
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "==", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1080
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "!=", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1085
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "<", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1090
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "<=", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1095
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: ">", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1100
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: ">=", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1107
		{
			yyVAL.expr = &ast.BinaryOperator{LHS: yyDollar[1].expr, Operator: "&&", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1112
		{
			yyVAL.expr = &ast.BinaryOperator{LHS: yyDollar[1].expr, Operator: "||", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	}
	goto yystack /* stack new state and value */
}
