// Code generated by goyacc -o parser.go parser.go.y. DO NOT EDIT.

//line parser.go.y:2
package parser

import __yyfmt__ "fmt"

//line parser.go.y:2

import (
	"github.com/dgrr/pako/ast"
)

//line parser.go.y:47
type yySymType struct {
	yys int
	tok ast.Token

	compstmt            ast.Stmt
	stmts               ast.Stmt
	stmt                ast.Stmt
	stmt_var_or_lets    ast.Stmt
	stmt_import         ast.Stmt
	stmt_struct         ast.Stmt
	stmt_var            ast.Stmt
	stmt_lets           ast.Stmt
	stmt_if             ast.Stmt
	stmt_for            ast.Stmt
	stmt_switch         ast.Stmt
	stmt_switch_cases   ast.Stmt
	stmt_switch_case    ast.Stmt
	stmt_switch_default ast.Stmt

	exprs                []ast.Expr
	expr                 ast.Expr
	expr_idents          []string
	type_data            *ast.TypeStruct
	type_data_struct     *ast.TypeStruct
	slice_count          int
	expr_member_or_ident ast.Expr
	expr_member          *ast.MemberExpr
	expr_ident           *ast.IdentExpr
	expr_literals        ast.Expr
	expr_map             *ast.MapExpr
	expr_slice           ast.Expr
	expr_chan            ast.Expr
	expr_unary           ast.Expr
	expr_binary          ast.Expr
	expr_lets            ast.Expr

	op_binary     ast.Operator
	op_comparison ast.Operator
	op_add        ast.Operator
	op_multiply   ast.Operator
}

const IDENT = 57346
const NUMBER = 57347
const STRING = 57348
const ARRAY = 57349
const VARARG = 57350
const FUNC = 57351
const RETURN = 57352
const VAR = 57353
const THROW = 57354
const IF = 57355
const ELSE = 57356
const FOR = 57357
const IN = 57358
const EQEQ = 57359
const NEQ = 57360
const GE = 57361
const LE = 57362
const OROR = 57363
const ANDAND = 57364
const NEW = 57365
const TRUE = 57366
const FALSE = 57367
const NIL = 57368
const NILCOALESCE = 57369
const MODULE = 57370
const TRY = 57371
const CATCH = 57372
const FINALLY = 57373
const PLUSEQ = 57374
const MINUSEQ = 57375
const MULEQ = 57376
const DIVEQ = 57377
const ANDEQ = 57378
const OREQ = 57379
const BREAK = 57380
const CONTINUE = 57381
const PLUSPLUS = 57382
const MINUSMINUS = 57383
const SHIFTLEFT = 57384
const SHIFTRIGHT = 57385
const SWITCH = 57386
const CASE = 57387
const DEFAULT = 57388
const GO = 57389
const CHAN = 57390
const STRUCT = 57391
const MAKE = 57392
const OPCHAN = 57393
const EQOPCHAN = 57394
const TYPE = 57395
const LEN = 57396
const DELETE = 57397
const CLOSE = 57398
const MAP = 57399
const IMPORT = 57400
const AS = 57401
const UNARY = 57402

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"NUMBER",
	"STRING",
	"ARRAY",
	"VARARG",
	"FUNC",
	"RETURN",
	"VAR",
	"THROW",
	"IF",
	"ELSE",
	"FOR",
	"IN",
	"EQEQ",
	"NEQ",
	"GE",
	"LE",
	"OROR",
	"ANDAND",
	"NEW",
	"TRUE",
	"FALSE",
	"NIL",
	"NILCOALESCE",
	"MODULE",
	"TRY",
	"CATCH",
	"FINALLY",
	"PLUSEQ",
	"MINUSEQ",
	"MULEQ",
	"DIVEQ",
	"ANDEQ",
	"OREQ",
	"BREAK",
	"CONTINUE",
	"PLUSPLUS",
	"MINUSMINUS",
	"SHIFTLEFT",
	"SHIFTRIGHT",
	"SWITCH",
	"CASE",
	"DEFAULT",
	"GO",
	"CHAN",
	"STRUCT",
	"MAKE",
	"OPCHAN",
	"EQOPCHAN",
	"TYPE",
	"LEN",
	"DELETE",
	"CLOSE",
	"MAP",
	"IMPORT",
	"AS",
	"'='",
	"':'",
	"'?'",
	"'<'",
	"'>'",
	"'+'",
	"'-'",
	"'|'",
	"'^'",
	"'*'",
	"'/'",
	"'%'",
	"'&'",
	"UNARY",
	"'{'",
	"'}'",
	"'('",
	"')'",
	"','",
	"'.'",
	"';'",
	"'['",
	"']'",
	"'!'",
	"'\\n'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:1211

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	52, 68,
	59, 68,
	60, 68,
	78, 68,
	80, 5,
	-2, 1,
	-1, 25,
	59, 69,
	78, 69,
	-2, 29,
	-1, 29,
	16, 109,
	-2, 68,
	-1, 70,
	52, 68,
	59, 68,
	60, 68,
	78, 68,
	-2, 5,
	-1, 125,
	16, 110,
	77, 110,
	78, 110,
	-2, 126,
	-1, 132,
	4, 121,
	48, 121,
	49, 121,
	57, 121,
	-2, 80,
	-1, 284,
	75, 195,
	82, 195,
	-2, 187,
	-1, 305,
	75, 195,
	-2, 187,
	-1, 310,
	1, 71,
	8, 71,
	45, 71,
	46, 71,
	52, 71,
	59, 71,
	60, 71,
	61, 71,
	75, 71,
	77, 71,
	78, 71,
	80, 71,
	82, 71,
	84, 71,
	-2, 124,
	-1, 314,
	1, 18,
	45, 18,
	46, 18,
	75, 18,
	80, 18,
	84, 18,
	-2, 86,
	-1, 316,
	1, 20,
	45, 20,
	46, 20,
	75, 20,
	80, 20,
	84, 20,
	-2, 90,
	-1, 350,
	75, 193,
	82, 193,
	-2, 188,
	-1, 354,
	75, 187,
	-2, 192,
	-1, 372,
	1, 17,
	45, 17,
	46, 17,
	75, 17,
	80, 17,
	84, 17,
	-2, 84,
	-1, 373,
	1, 19,
	45, 19,
	46, 19,
	75, 19,
	80, 19,
	84, 19,
	-2, 88,
	-1, 406,
	75, 188,
	-2, 194,
}

const yyPrivate = 57344

const yyLast = 4123

var yyAct = [...]int{

	74, 396, 244, 25, 344, 339, 340, 40, 342, 341,
	8, 305, 5, 1, 121, 76, 8, 8, 81, 226,
	226, 397, 284, 353, 8, 434, 135, 8, 8, 119,
	122, 126, 127, 132, 8, 8, 351, 226, 232, 144,
	303, 89, 150, 52, 92, 345, 90, 8, 146, 151,
	299, 300, 226, 143, 415, 160, 142, 73, 229, 226,
	226, 161, 162, 163, 164, 165, 153, 298, 349, 226,
	7, 25, 216, 225, 369, 212, 144, 72, 226, 233,
	212, 158, 363, 171, 172, 402, 175, 176, 177, 178,
	37, 180, 182, 168, 184, 373, 91, 185, 186, 187,
	188, 189, 190, 191, 192, 193, 194, 195, 196, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
	94, 95, 105, 106, 215, 8, 372, 136, 138, 219,
	91, 356, 315, 179, 209, 211, 157, 348, 212, 313,
	347, 292, 72, 156, 155, 221, 321, 236, 238, 102,
	103, 104, 107, 245, 94, 95, 89, 6, 250, 92,
	131, 90, 158, 71, 227, 228, 282, 230, 433, 246,
	222, 140, 141, 145, 259, 239, 240, 224, 243, 169,
	139, 252, 266, 479, 262, 158, 149, 212, 260, 235,
	89, 148, 137, 92, 134, 90, 147, 212, 83, 247,
	249, 316, 158, 134, 142, 72, 82, 478, 314, 158,
	293, 158, 269, 254, 255, 273, 474, 276, 470, 469,
	136, 467, 267, 223, 461, 460, 285, 271, 138, 138,
	455, 138, 130, 370, 454, 281, 212, 283, 296, 138,
	138, 453, 138, 245, 451, 302, 304, 443, 442, 144,
	438, 173, 309, 263, 158, 430, 289, 426, 317, 310,
	424, 423, 320, 308, 140, 141, 323, 422, 419, 241,
	414, 381, 366, 139, 330, 334, 336, 327, 210, 319,
	311, 72, 152, 268, 253, 137, 331, 475, 78, 473,
	307, 441, 417, 401, 400, 354, 358, 142, 346, 231,
	220, 362, 167, 371, 364, 79, 9, 368, 134, 376,
	407, 322, 174, 357, 392, 291, 134, 342, 341, 133,
	138, 472, 468, 223, 312, 10, 84, 379, 435, 345,
	365, 352, 375, 343, 329, 355, 301, 288, 388, 154,
	278, 183, 380, 393, 391, 390, 382, 383, 129, 385,
	65, 72, 4, 66, 403, 124, 70, 72, 77, 2,
	399, 67, 410, 69, 413, 68, 50, 49, 416, 48,
	134, 47, 398, 46, 34, 134, 53, 166, 280, 420,
	404, 33, 286, 134, 338, 418, 394, 22, 21, 134,
	20, 27, 26, 24, 138, 23, 3, 0, 425, 0,
	427, 428, 286, 0, 0, 0, 431, 0, 0, 0,
	444, 0, 0, 446, 439, 440, 0, 0, 0, 0,
	0, 72, 0, 0, 0, 0, 0, 0, 0, 0,
	210, 450, 0, 242, 0, 0, 138, 0, 0, 0,
	0, 251, 350, 456, 138, 0, 457, 458, 0, 245,
	466, 465, 0, 0, 0, 462, 0, 0, 0, 0,
	286, 0, 459, 350, 0, 0, 72, 471, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 72, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 476, 0, 477,
	0, 210, 0, 210, 0, 270, 134, 0, 0, 0,
	277, 0, 395, 0, 0, 0, 0, 72, 287, 0,
	286, 0, 406, 0, 290, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 138, 0, 0, 39,
	55, 56, 0, 0, 35, 13, 51, 14, 28, 0,
	29, 0, 0, 0, 0, 210, 0, 0, 42, 57,
	58, 59, 0, 15, 16, 436, 134, 0, 0, 0,
	0, 0, 0, 11, 12, 0, 0, 251, 0, 30,
	0, 0, 17, 134, 32, 43, 60, 0, 0, 41,
	18, 19, 44, 31, 0, 0, 0, 0, 367, 0,
	0, 54, 0, 62, 64, 0, 0, 63, 0, 45,
	0, 38, 0, 0, 0, 0, 36, 0, 61, 91,
	111, 112, 116, 114, 118, 117, 0, 0, 0, 0,
	88, 389, 0, 286, 0, 96, 97, 99, 100, 101,
	98, 0, 0, 94, 95, 105, 106, 405, 0, 0,
	0, 0, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 409, 87, 113, 115, 108, 109,
	110, 0, 102, 103, 104, 107, 0, 0, 0, 89,
	0, 0, 92, 0, 90, 408, 0, 0, 0, 0,
	0, 437, 0, 91, 111, 112, 116, 114, 118, 117,
	0, 0, 0, 0, 88, 0, 0, 0, 448, 96,
	97, 99, 100, 101, 98, 0, 0, 94, 95, 105,
	106, 0, 0, 0, 0, 0, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 378, 87,
	113, 115, 108, 109, 110, 0, 102, 103, 104, 107,
	0, 0, 0, 89, 0, 0, 92, 0, 90, 377,
	91, 111, 112, 116, 114, 118, 117, 0, 0, 0,
	0, 88, 0, 0, 0, 0, 96, 97, 99, 100,
	101, 98, 0, 0, 94, 95, 105, 106, 0, 0,
	0, 0, 0, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 361, 87, 113, 115, 108,
	109, 110, 0, 102, 103, 104, 107, 0, 0, 0,
	89, 0, 0, 92, 0, 90, 360, 91, 111, 112,
	116, 114, 118, 117, 0, 0, 0, 0, 88, 0,
	0, 0, 0, 96, 97, 99, 100, 101, 98, 0,
	0, 94, 95, 105, 106, 0, 0, 0, 0, 0,
	0, 0, 93, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 326, 87, 113, 115, 108, 109, 110, 0,
	102, 103, 104, 107, 0, 0, 0, 89, 0, 0,
	92, 0, 90, 325, 91, 111, 112, 116, 114, 118,
	117, 0, 0, 0, 0, 88, 0, 0, 0, 0,
	96, 97, 99, 100, 101, 98, 0, 0, 94, 95,
	105, 106, 0, 0, 0, 0, 0, 0, 0, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 295,
	87, 113, 115, 108, 109, 110, 0, 102, 103, 104,
	107, 0, 0, 0, 89, 0, 0, 92, 0, 90,
	294, 91, 111, 112, 116, 114, 118, 117, 0, 0,
	0, 0, 88, 0, 0, 0, 0, 96, 97, 99,
	100, 101, 98, 0, 0, 94, 95, 105, 106, 0,
	0, 0, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 265, 87, 113, 115,
	108, 109, 110, 0, 102, 103, 104, 107, 0, 0,
	0, 89, 0, 0, 92, 0, 90, 264, 91, 111,
	112, 116, 114, 118, 117, 0, 0, 0, 0, 88,
	0, 0, 0, 0, 96, 97, 99, 100, 101, 98,
	0, 0, 94, 95, 105, 106, 0, 0, 0, 0,
	0, 0, 0, 93, 86, 0, 0, 0, 0, 0,
	0, 0, 85, 0, 87, 113, 115, 108, 109, 110,
	0, 102, 103, 104, 107, 0, 213, 0, 89, 0,
	0, 92, 0, 90, 91, 111, 112, 116, 114, 118,
	117, 0, 0, 0, 0, 88, 0, 0, 0, 0,
	96, 97, 99, 100, 101, 98, 0, 0, 94, 95,
	105, 106, 0, 0, 0, 0, 0, 0, 0, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 113, 115, 108, 109, 110, 0, 102, 103, 104,
	107, 0, 0, 0, 89, 0, 0, 92, 0, 90,
	463, 91, 111, 112, 116, 114, 118, 117, 0, 0,
	0, 0, 88, 0, 0, 0, 0, 96, 97, 99,
	100, 101, 98, 0, 0, 94, 95, 105, 106, 0,
	0, 0, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 113, 115,
	108, 109, 110, 0, 102, 103, 104, 107, 0, 0,
	0, 89, 0, 0, 92, 0, 90, 452, 91, 111,
	112, 116, 114, 118, 117, 0, 0, 0, 0, 88,
	0, 0, 0, 0, 96, 97, 99, 100, 101, 98,
	0, 0, 94, 95, 105, 106, 0, 0, 0, 0,
	0, 0, 0, 93, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 113, 115, 108, 109, 110,
	0, 102, 103, 104, 107, 0, 0, 0, 89, 0,
	0, 92, 0, 90, 445, 91, 111, 112, 116, 114,
	118, 117, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 96, 97, 99, 100, 101, 98, 0, 0, 94,
	95, 105, 106, 0, 0, 0, 0, 0, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 113, 115, 108, 109, 110, 0, 102, 103,
	104, 107, 0, 0, 0, 89, 0, 0, 92, 0,
	90, 421, 91, 111, 112, 116, 114, 118, 117, 0,
	0, 0, 0, 88, 0, 0, 0, 0, 96, 97,
	99, 100, 101, 98, 0, 0, 94, 95, 105, 106,
	0, 0, 0, 0, 0, 0, 0, 93, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 113,
	115, 108, 109, 110, 0, 102, 103, 104, 107, 0,
	0, 0, 89, 411, 412, 92, 0, 90, 91, 111,
	112, 116, 114, 118, 117, 0, 0, 0, 0, 88,
	0, 0, 0, 0, 96, 97, 99, 100, 101, 98,
	0, 0, 94, 95, 105, 106, 0, 0, 0, 0,
	0, 0, 0, 93, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 113, 115, 108, 109, 110,
	0, 102, 103, 104, 107, 0, 0, 0, 89, 256,
	257, 92, 0, 90, 91, 111, 112, 116, 114, 118,
	117, 0, 0, 0, 0, 88, 0, 0, 0, 0,
	96, 97, 99, 100, 101, 98, 0, 0, 94, 95,
	105, 106, 0, 0, 0, 0, 0, 0, 0, 93,
	86, 0, 0, 0, 0, 0, 0, 0, 85, 0,
	87, 113, 115, 108, 109, 110, 0, 102, 103, 104,
	107, 0, 0, 0, 89, 0, 0, 92, 0, 90,
	91, 111, 112, 116, 114, 118, 117, 0, 0, 0,
	0, 88, 0, 0, 0, 0, 96, 97, 99, 100,
	101, 98, 0, 0, 94, 95, 105, 106, 0, 0,
	0, 0, 0, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 113, 115, 108,
	109, 110, 0, 102, 103, 104, 107, 0, 0, 0,
	89, 464, 0, 92, 0, 90, 91, 111, 112, 116,
	114, 118, 117, 0, 0, 0, 0, 88, 0, 0,
	0, 0, 96, 97, 99, 100, 101, 98, 0, 0,
	94, 95, 105, 106, 0, 0, 0, 0, 0, 0,
	0, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 449, 87, 113, 115, 108, 109, 110, 0, 102,
	103, 104, 107, 0, 0, 0, 89, 0, 0, 92,
	0, 90, 91, 111, 112, 116, 114, 118, 117, 0,
	0, 0, 0, 88, 0, 0, 0, 0, 96, 97,
	99, 100, 101, 98, 0, 0, 94, 95, 105, 106,
	0, 0, 0, 0, 0, 0, 0, 93, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 113,
	115, 108, 109, 110, 0, 102, 103, 104, 107, 0,
	0, 0, 89, 447, 0, 92, 0, 90, 91, 111,
	112, 116, 114, 118, 117, 0, 0, 0, 0, 88,
	0, 0, 0, 0, 96, 97, 99, 100, 101, 98,
	0, 0, 94, 95, 105, 106, 0, 0, 0, 0,
	0, 0, 0, 93, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 432, 87, 113, 115, 108, 109, 110,
	0, 102, 103, 104, 107, 0, 0, 0, 89, 0,
	0, 92, 0, 90, 91, 111, 112, 116, 114, 118,
	117, 0, 0, 0, 0, 88, 0, 0, 0, 0,
	96, 97, 99, 100, 101, 98, 0, 0, 94, 95,
	105, 106, 0, 0, 0, 0, 0, 0, 0, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 113, 115, 108, 109, 110, 0, 102, 103, 104,
	107, 0, 429, 0, 89, 0, 0, 92, 0, 90,
	91, 111, 112, 116, 114, 118, 117, 0, 0, 0,
	0, 88, 0, 0, 0, 0, 96, 97, 99, 100,
	101, 98, 0, 0, 94, 95, 105, 106, 0, 0,
	0, 0, 0, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 113, 115, 108,
	109, 110, 0, 102, 103, 104, 107, 0, 386, 0,
	89, 0, 0, 92, 0, 90, 91, 111, 112, 116,
	114, 118, 117, 0, 0, 0, 0, 88, 0, 0,
	0, 0, 96, 97, 99, 100, 101, 98, 0, 0,
	94, 95, 105, 106, 0, 0, 0, 0, 0, 0,
	0, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 113, 115, 108, 109, 110, 0, 102,
	103, 104, 107, 0, 384, 0, 89, 0, 0, 92,
	0, 90, 91, 111, 112, 116, 114, 118, 117, 0,
	0, 0, 0, 88, 0, 0, 0, 0, 96, 97,
	99, 100, 101, 98, 0, 0, 94, 95, 105, 106,
	0, 0, 0, 0, 0, 0, 0, 93, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 113,
	115, 108, 109, 110, 0, 102, 103, 104, 107, 0,
	0, 0, 89, 374, 0, 92, 0, 90, 91, 111,
	112, 116, 114, 118, 117, 0, 0, 0, 0, 88,
	0, 0, 0, 0, 96, 97, 99, 100, 101, 98,
	0, 0, 94, 95, 105, 106, 0, 0, 0, 0,
	0, 0, 0, 93, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 113, 115, 108, 109, 110,
	0, 102, 103, 104, 107, 0, 0, 0, 89, 0,
	0, 92, 337, 90, 91, 111, 112, 116, 114, 118,
	117, 0, 0, 0, 0, 88, 0, 0, 0, 0,
	96, 97, 99, 100, 101, 98, 0, 0, 94, 95,
	105, 106, 0, 0, 0, 0, 0, 0, 0, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 113, 115, 108, 109, 110, 0, 102, 103, 104,
	107, 0, 332, 0, 89, 0, 0, 92, 0, 90,
	91, 111, 112, 116, 114, 118, 117, 0, 0, 0,
	0, 88, 0, 0, 0, 0, 96, 97, 99, 100,
	101, 98, 0, 0, 94, 95, 105, 106, 0, 0,
	0, 0, 0, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 113, 115, 108,
	109, 110, 0, 102, 103, 104, 107, 0, 328, 0,
	89, 0, 0, 92, 0, 90, 91, 111, 112, 116,
	114, 118, 117, 0, 0, 0, 0, 88, 0, 0,
	0, 0, 96, 97, 99, 100, 101, 98, 0, 0,
	94, 95, 105, 106, 0, 0, 0, 0, 0, 0,
	0, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 113, 115, 108, 109, 110, 0, 102,
	103, 104, 107, 0, 318, 0, 89, 0, 0, 92,
	0, 90, 91, 111, 112, 116, 114, 118, 117, 0,
	0, 0, 0, 88, 0, 0, 0, 0, 96, 97,
	99, 100, 101, 98, 0, 0, 94, 95, 105, 106,
	0, 0, 0, 0, 0, 0, 0, 93, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 87, 113,
	115, 108, 109, 110, 0, 102, 103, 104, 107, 0,
	0, 0, 89, 0, 0, 92, 0, 90, 91, 111,
	112, 116, 114, 118, 117, 0, 0, 0, 0, 88,
	0, 0, 0, 0, 96, 97, 99, 100, 101, 98,
	0, 0, 94, 95, 105, 106, 0, 0, 0, 0,
	0, 0, 0, 93, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 113, 115, 108, 109, 110,
	0, 102, 103, 104, 107, 0, 0, 0, 89, 297,
	0, 92, 0, 90, 91, 111, 112, 116, 114, 118,
	117, 0, 0, 0, 0, 88, 0, 0, 0, 0,
	96, 97, 99, 100, 101, 98, 0, 0, 94, 95,
	105, 106, 0, 0, 0, 0, 0, 0, 0, 93,
	0, 0, 0, 0, 0, 0, 0, 279, 0, 0,
	87, 113, 115, 108, 109, 110, 0, 102, 103, 104,
	107, 0, 0, 0, 89, 0, 0, 92, 0, 90,
	91, 111, 112, 116, 114, 118, 117, 0, 0, 0,
	0, 88, 0, 0, 0, 0, 96, 97, 99, 100,
	101, 98, 0, 0, 94, 95, 105, 106, 0, 0,
	0, 0, 0, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 113, 115, 108,
	109, 110, 0, 102, 103, 104, 107, 0, 0, 0,
	89, 0, 0, 92, 274, 90, 91, 111, 112, 116,
	114, 118, 117, 0, 0, 0, 0, 88, 0, 0,
	0, 0, 96, 97, 99, 100, 101, 98, 0, 0,
	94, 95, 105, 106, 0, 0, 0, 0, 0, 0,
	0, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 261, 87, 113, 115, 108, 109, 110, 0, 102,
	103, 104, 107, 0, 0, 0, 89, 0, 0, 92,
	0, 90, 91, 111, 112, 116, 114, 118, 117, 0,
	0, 0, 0, 88, 0, 0, 0, 0, 96, 97,
	99, 100, 101, 98, 0, 0, 94, 95, 105, 106,
	0, 0, 0, 0, 0, 0, 0, 93, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 113,
	115, 108, 109, 110, 0, 102, 103, 104, 107, 0,
	0, 0, 89, 258, 0, 92, 0, 90, 91, 111,
	112, 116, 114, 118, 117, 0, 0, 0, 0, 88,
	0, 0, 0, 0, 96, 97, 99, 100, 101, 98,
	0, 0, 94, 95, 105, 106, 0, 0, 0, 0,
	0, 0, 0, 93, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 113, 115, 108, 109, 110,
	0, 102, 103, 104, 107, 0, 0, 0, 89, 234,
	0, 92, 0, 90, 91, 111, 112, 116, 114, 118,
	117, 0, 0, 0, 0, 88, 0, 0, 0, 0,
	96, 97, 99, 100, 101, 98, 0, 0, 94, 95,
	105, 106, 0, 0, 0, 0, 0, 0, 0, 93,
	0, 0, 0, 0, 0, 0, 0, 218, 0, 0,
	87, 113, 115, 108, 109, 110, 0, 102, 103, 104,
	107, 0, 0, 0, 89, 0, 0, 92, 0, 90,
	91, 111, 112, 116, 114, 118, 117, 0, 0, 0,
	0, 88, 0, 0, 0, 0, 96, 97, 99, 100,
	101, 98, 0, 0, 94, 95, 105, 106, 0, 0,
	0, 0, 0, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 113, 115, 108,
	109, 110, 0, 102, 103, 104, 107, 0, 217, 0,
	89, 0, 0, 92, 0, 90, 91, 111, 112, 116,
	114, 118, 117, 0, 0, 0, 0, 88, 0, 0,
	0, 0, 96, 97, 99, 100, 101, 98, 0, 0,
	94, 95, 105, 106, 0, 0, 0, 0, 0, 0,
	0, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 113, 115, 108, 109, 110, 0, 102,
	103, 104, 107, 0, 208, 0, 89, 0, 0, 92,
	0, 90, 91, 111, 112, 116, 114, 118, 117, 0,
	0, 0, 0, 88, 0, 0, 0, 0, 96, 97,
	99, 100, 101, 98, 0, 0, 94, 95, 105, 106,
	0, 0, 0, 0, 0, 0, 0, 93, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 113,
	115, 108, 109, 110, 0, 102, 103, 104, 107, 0,
	0, 0, 89, 0, 0, 92, 0, 90, 91, 111,
	112, 116, 114, 118, 117, 0, 0, 0, 0, 88,
	0, 0, 0, 0, 96, 97, 99, 100, 101, 98,
	0, 0, 94, 95, 105, 106, 0, 0, 0, 0,
	0, 0, 0, 93, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 113, 115, 108, 109, 110,
	0, 102, 103, 104, 107, 0, 0, 0, 170, 0,
	0, 92, 0, 90, 91, 111, 112, 116, 114, 118,
	117, 0, 0, 0, 0, 88, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 95,
	105, 106, 0, 0, 0, 0, 0, 0, 0, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 113, 115, 108, 109, 110, 0, 102, 103, 104,
	107, 0, 0, 0, 89, 0, 0, 92, 0, 90,
	91, 111, 112, 116, 114, 118, 117, 0, 0, 0,
	0, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 95, 105, 106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 113, 115, 108,
	109, 110, 0, 102, 103, 104, 107, 125, 55, 56,
	89, 0, 35, 92, 51, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 42, 57, 58, 59,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 39, 55, 56, 0, 0, 35, 0, 0,
	0, 0, 0, 43, 60, 0, 0, 41, 0, 0,
	44, 42, 57, 58, 59, 0, 0, 0, 0, 54,
	0, 62, 64, 0, 0, 63, 0, 120, 0, 38,
	39, 55, 56, 123, 36, 35, 61, 0, 43, 60,
	0, 0, 41, 0, 0, 44, 0, 0, 0, 42,
	57, 58, 59, 0, 54, 0, 62, 64, 0, 0,
	63, 0, 45, 0, 75, 0, 0, 0, 0, 36,
	359, 61, 0, 0, 0, 0, 43, 60, 0, 0,
	41, 0, 0, 44, 39, 55, 56, 0, 0, 35,
	0, 0, 54, 0, 62, 64, 0, 0, 63, 0,
	45, 0, 75, 42, 57, 58, 59, 36, 324, 61,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 39,
	55, 56, 0, 0, 35, 0, 0, 0, 0, 0,
	43, 60, 0, 0, 41, 0, 0, 44, 42, 57,
	58, 59, 0, 0, 0, 0, 54, 0, 62, 64,
	0, 0, 63, 0, 45, 0, 75, 0, 0, 0,
	275, 36, 0, 61, 0, 43, 60, 0, 0, 41,
	0, 0, 44, 39, 55, 56, 237, 0, 35, 0,
	0, 54, 0, 62, 64, 0, 0, 63, 0, 45,
	0, 75, 42, 57, 58, 59, 36, 0, 61, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 39, 55,
	56, 0, 0, 35, 0, 0, 0, 0, 0, 43,
	60, 0, 0, 41, 0, 0, 44, 42, 57, 58,
	59, 0, 0, 0, 0, 54, 0, 62, 64, 0,
	0, 63, 0, 45, 0, 75, 0, 0, 0, 214,
	36, 0, 61, 0, 43, 60, 0, 0, 41, 0,
	0, 44, 39, 55, 56, 181, 0, 35, 0, 0,
	54, 0, 62, 64, 0, 0, 63, 0, 45, 0,
	75, 42, 57, 58, 59, 36, 0, 61, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 39, 55, 56,
	0, 0, 35, 0, 0, 0, 0, 0, 43, 60,
	0, 0, 41, 0, 0, 44, 42, 57, 58, 59,
	0, 0, 0, 0, 54, 0, 62, 64, 0, 0,
	63, 0, 45, 0, 75, 0, 0, 128, 0, 36,
	0, 61, 0, 43, 60, 0, 0, 41, 0, 0,
	44, 39, 55, 56, 0, 0, 35, 0, 0, 54,
	0, 62, 64, 0, 0, 63, 0, 45, 0, 75,
	42, 57, 58, 59, 36, 0, 61, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 39, 55, 56, 0,
	0, 35, 0, 0, 0, 0, 0, 43, 60, 0,
	0, 41, 0, 0, 44, 42, 57, 58, 59, 0,
	0, 0, 0, 54, 0, 62, 64, 0, 0, 63,
	0, 387, 0, 75, 39, 55, 56, 0, 36, 35,
	61, 0, 43, 60, 0, 0, 41, 0, 0, 44,
	0, 0, 0, 42, 57, 58, 59, 0, 54, 0,
	62, 64, 0, 0, 63, 0, 335, 0, 75, 125,
	55, 56, 0, 36, 35, 61, 0, 0, 0, 0,
	43, 60, 0, 0, 41, 0, 0, 44, 42, 57,
	58, 59, 0, 0, 0, 0, 54, 0, 62, 64,
	0, 0, 63, 0, 333, 0, 75, 39, 55, 56,
	0, 36, 35, 61, 0, 43, 60, 0, 0, 41,
	0, 0, 44, 0, 0, 0, 42, 57, 58, 59,
	0, 54, 0, 62, 64, 0, 0, 63, 0, 45,
	0, 75, 0, 0, 0, 0, 36, 0, 61, 0,
	0, 0, 0, 43, 60, 0, 0, 41, 0, 0,
	44, 0, 0, 0, 91, 111, 112, 116, 114, 54,
	117, 62, 64, 0, 0, 63, 0, 272, 0, 75,
	0, 0, 0, 0, 36, 0, 61, 0, 94, 95,
	105, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 113, 115, 108, 109, 110, 0, 102, 103, 104,
	107, 39, 55, 56, 89, 0, 35, 92, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	42, 57, 58, 59, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 39, 159, 56, 0,
	0, 35, 0, 0, 0, 0, 0, 43, 60, 0,
	0, 41, 0, 0, 44, 42, 57, 58, 59, 0,
	0, 0, 0, 54, 0, 62, 64, 0, 0, 63,
	0, 45, 0, 248, 80, 55, 56, 0, 36, 35,
	61, 0, 43, 60, 0, 0, 41, 0, 0, 44,
	0, 0, 0, 42, 57, 58, 59, 0, 54, 0,
	62, 64, 0, 0, 63, 0, 45, 0, 75, 0,
	0, 0, 0, 36, 0, 61, 0, 0, 0, 0,
	43, 60, 0, 0, 41, 0, 0, 44, 0, 0,
	91, 111, 112, 116, 114, 0, 54, 0, 62, 64,
	0, 0, 63, 0, 45, 0, 75, 91, 0, 0,
	0, 36, 0, 61, 94, 95, 105, 106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 95, 105, 106, 0, 0, 113, 115, 108,
	109, 110, 0, 102, 103, 104, 107, 0, 0, 0,
	89, 0, 0, 92, 0, 90, 108, 109, 110, 0,
	102, 103, 104, 107, 0, 0, 0, 89, 0, 0,
	92, 0, 90,
}
var yyPact = [...]int{

	-68, -1000, 525, -68, -1000, -74, -74, -1000, -1000, -1000,
	-1000, -1000, -1000, 3593, 3593, 284, 231, 3980, 130, 122,
	312, -1000, -1000, -1000, -1000, 1468, -1000, -1000, 3593, 3253,
	3593, 3558, 344, -1000, -1000, 156, -49, 123, 3755, 97,
	-33, 120, 115, 110, -32, -74, -1000, -1000, -1000, -1000,
	-1000, 335, 84, -1000, 3942, -1000, -1000, -1000, -1000, -1000,
	3593, 3593, 3593, 3593, 3593, -1000, -1000, -1000, -1000, -1000,
	525, -74, -1000, 3, 2986, 3593, 2986, -1000, 228, -68,
	103, 3052, 3593, 3593, 238, 3593, 3593, 3593, 3593, 3593,
	3504, 3593, 337, 3593, -1000, -1000, 3593, 3593, 3593, 3593,
	3593, 3593, 3593, 3593, 3593, 3593, 3593, 3593, 3593, 3593,
	3593, 3593, 3593, 3593, 3593, 3593, 3593, 3593, 3593, 2920,
	-68, 119, 1002, 3469, -8, 97, 2854, 2788, 3593, 226,
	335, 94, -25, 3593, -74, -1, -1000, 123, 123, -23,
	123, 225, -44, 2, 2722, 3593, 3415, 3593, 123, 216,
	-74, 123, 3593, 109, -1000, 3593, 3907, 3593, -74, -1000,
	-35, 3118, -35, -35, -35, -35, -1000, -68, 209, 3593,
	3593, 1402, 2656, 3593, -68, 2986, 2986, 2590, 3184, 176,
	935, 3593, 114, -1000, 3118, 2986, 2986, 2986, 2986, 2986,
	2986, 114, 114, 114, 114, 114, 114, 80, 80, 80,
	4041, 4041, 4041, 4041, 4041, 4041, 4024, 3838, -68, 208,
	-74, 3593, -74, -68, 3793, 2524, 3380, -74, 336, 2458,
	-74, 158, 335, -1000, -56, -74, 333, -19, -19, 123,
	-19, -74, -25, 255, -1000, 133, 868, 3593, 2392, -10,
	-27, 332, 3593, -42, -67, 2326, 3593, 3, 3755, 3,
	2986, 3593, 205, 294, 131, 124, -1000, 3593, -1000, 2260,
	204, 3593, 69, 249, -1000, 3326, 801, 202, -1000, 2194,
	330, 199, -68, 2128, 3720, 3682, 2062, 272, -1000, 329,
	41, 224, 63, 60, -74, -46, -74, 3593, -1000, -59,
	325, 3593, 54, 251, -1000, 3288, 734, -1000, -1000, -1000,
	3593, 4, -67, 123, 197, -74, 3593, 3, -3, 2986,
	-33, -1000, 229, 49, 251, 18, 249, 1996, -68, -1000,
	3118, 247, -1000, 667, -1000, -1000, 3593, -1000, -68, -1000,
	-1000, 196, -68, -68, 1930, -68, 1864, 3647, -37, -1000,
	-1000, 253, 3593, -1000, -57, 123, -68, 220, 219, 8,
	-74, -1000, -56, 123, -57, 3, 248, -1000, 593, -1000,
	-1000, 3593, 1336, 3593, 195, -20, -1000, 3593, 2986, -1000,
	218, -68, 248, 247, -1000, 193, -1000, -1000, 3593, 1269,
	192, -1000, 186, 185, -68, 182, -68, -68, 1798, 180,
	-1000, -1000, -68, 1732, 107, -50, 324, -74, -60, 175,
	-68, -68, 217, 173, -19, 172, -74, -1000, -1000, 3593,
	1202, -1000, 3593, 1666, -1000, -74, 1600, -68, 169, -1000,
	1135, -1000, -1000, -1000, -1000, 166, -1000, 159, 155, -68,
	-1000, -1000, -68, -68, -1000, 123, -74, -1000, -1000, 150,
	149, -68, -1000, -1000, 1068, -1000, 1534, -1000, 3593, 3593,
	146, 291, -1000, -1000, -1000, -1000, 144, -1000, -1000, -19,
	-1000, -1000, 143, -1000, -1000, -67, 2986, 290, 215, -1000,
	-1000, 141, 213, -68, -1000, -68, 132, 108, -1000, -1000,
}
var yyPgo = [...]int{

	0, 13, 396, 306, 325, 395, 393, 392, 391, 390,
	388, 387, 384, 6, 5, 43, 0, 14, 26, 4,
	90, 381, 376, 7, 374, 2, 373, 371, 369, 367,
	366, 365, 361, 353, 350, 359, 352, 157, 282, 1,
	70,
}
var yyR1 = [...]int{

	0, 1, 1, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	4, 4, 5, 5, 5, 5, 7, 8, 8, 8,
	8, 8, 8, 8, 9, 9, 9, 10, 10, 10,
	10, 10, 10, 10, 10, 10, 10, 10, 6, 11,
	12, 12, 12, 12, 12, 13, 13, 14, 15, 15,
	15, 15, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 17,
	17, 17, 18, 18, 18, 18, 18, 18, 18, 19,
	19, 20, 20, 21, 21, 22, 23, 24, 24, 24,
	24, 24, 24, 25, 25, 25, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 27, 27, 28, 28,
	28, 28, 28, 29, 29, 29, 29, 30, 30, 30,
	30, 30, 30, 30, 30, 34, 34, 34, 34, 34,
	34, 33, 33, 33, 32, 32, 32, 32, 32, 32,
	31, 31, 35, 35, 36, 36, 36, 38, 38, 37,
	37, 40, 39, 39, 39, 39,
}
var yyR2 = [...]int{

	0, 1, 2, 2, 3, 0, 1, 1, 1, 2,
	2, 2, 5, 13, 12, 9, 8, 6, 5, 6,
	5, 4, 6, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 3, 4, 5, 4, 3, 3, 5,
	5, 3, 3, 3, 5, 7, 5, 4, 7, 5,
	6, 7, 7, 8, 7, 8, 8, 9, 7, 7,
	0, 1, 1, 2, 2, 4, 4, 3, 0, 1,
	4, 4, 1, 1, 5, 3, 7, 8, 8, 9,
	2, 5, 7, 3, 5, 6, 4, 5, 5, 6,
	4, 5, 4, 4, 4, 4, 4, 6, 8, 7,
	3, 6, 10, 5, 1, 1, 1, 1, 1, 0,
	1, 4, 1, 3, 2, 2, 5, 2, 6, 3,
	4, 2, 3, 1, 1, 3, 1, 2, 1, 1,
	1, 1, 1, 0, 3, 6, 6, 5, 5, 7,
	8, 6, 5, 5, 7, 8, 3, 2, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 0, 1, 2, 1, 1, 0, 1, 1,
	2, 1, 0, 2, 1, 1,
}
var yyChk = [...]int{

	-1000, -1, -35, -2, -36, 80, -37, -40, 84, -3,
	-4, 38, 39, 10, 12, 28, 29, 47, 55, 56,
	-9, -10, -11, -5, -6, -16, -7, -8, 13, 15,
	44, 58, 49, -21, -24, 9, 81, -20, 76, 4,
	-23, 54, 23, 50, 57, 74, -26, -27, -28, -29,
	-30, 11, -15, -22, 66, 5, 6, 24, 25, 26,
	51, 83, 68, 72, 69, -34, -33, -32, -31, -35,
	-36, -37, -40, -15, -16, 76, -16, 74, 4, 74,
	4, -16, 76, 76, 14, 60, 52, 62, 27, 76,
	81, 16, 79, 51, 40, 41, 32, 33, 37, 34,
	35, 36, 69, 70, 71, 42, 43, 72, 65, 66,
	67, 17, 18, 63, 20, 64, 19, 22, 21, -16,
	74, -17, -16, 80, -4, 4, -16, -16, 79, 4,
	76, 4, 82, -38, -37, -18, 4, 69, -20, 57,
	48, 49, 81, -17, -16, 76, 81, 76, 76, 76,
	74, 81, -38, -17, 4, 60, 59, 52, 78, 5,
	-16, -16, -16, -16, -16, -16, -3, 74, -1, 76,
	76, -16, -16, 13, 74, -16, -16, -16, -16, -15,
	-16, 61, -16, 4, -16, -16, -16, -16, -16, -16,
	-16, -16, -16, -16, -16, -16, -16, -16, -16, -16,
	-16, -16, -16, -16, -16, -16, -16, -16, 74, -1,
	-37, 16, 78, 74, 80, -16, 80, 74, 59, -16,
	74, -17, 76, -20, -15, 74, 79, -18, -18, 81,
	-18, 74, 82, 77, 77, -15, -16, 61, -16, -18,
	-18, 53, -38, -18, -25, -16, 60, -15, 76, -15,
	-16, -38, -1, 75, -15, -15, 77, 78, 77, -16,
	-1, 61, 8, 77, 82, 61, -16, -1, 75, -16,
	-38, -1, 74, -16, 80, 80, -16, -38, 4, 59,
	-37, 77, 8, -17, 78, -39, -37, -38, 4, -18,
	-38, 60, 8, 77, 82, 61, -16, 77, 77, 77,
	78, 4, -25, 82, -39, 78, 61, -15, -17, -16,
	-23, 75, 30, 8, 77, 8, 77, -16, 74, 75,
	-16, 77, 62, -16, 82, 82, 61, 75, 74, 4,
	75, -1, 74, 74, -16, 74, -16, 80, -12, -14,
	-13, 46, 45, 4, -19, 4, 74, 77, 77, 8,
	-37, 82, -15, 82, -19, -15, 77, 62, -16, 82,
	82, 61, -16, 78, -39, -18, 75, -38, -16, 77,
	4, 74, 77, 77, 77, -1, 62, 82, 61, -16,
	-1, 75, -1, -1, 74, -1, 74, 74, -16, -38,
	-13, -14, 61, -16, -15, -37, -39, 78, -18, -1,
	74, 74, 77, -39, -18, -38, -37, 62, 82, 61,
	-16, 77, 78, -16, 75, 74, -16, 74, -1, 75,
	-16, 82, 75, 75, 75, -1, 75, -1, -1, 74,
	75, -1, 61, 61, 75, 4, -37, -38, 75, -1,
	-1, 74, 75, 75, -16, 82, -16, 77, -38, 61,
	-1, 75, 82, 75, 75, 75, -1, -1, -1, -18,
	75, 75, -1, 82, 77, -25, -16, 75, 31, 75,
	75, -39, 31, 74, 75, 74, -1, -1, 75, 75,
}
var yyDef = [...]int{

	182, -2, -2, 182, 183, 186, 185, 189, 191, 3,
	6, 7, 8, 68, 0, 0, 0, 0, 0, 0,
	24, 25, 26, 27, 28, -2, 30, 31, 0, -2,
	0, 0, 0, 72, 73, 0, 187, 0, 109, 126,
	124, 0, 0, 0, 0, 187, 104, 105, 106, 107,
	108, 109, 0, 123, 0, 128, 129, 130, 131, 132,
	0, 0, 0, 0, 0, 153, 154, 155, 156, 2,
	-2, 184, 190, 9, 69, 0, 10, 11, 0, 182,
	126, 0, 0, 0, 0, 0, 0, 0, 0, 68,
	0, 0, 0, 0, 157, 158, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 0, 69, 0, 0, -2, 0, 32, 0, 0,
	109, 0, -2, 68, 188, 0, 112, 0, 0, 0,
	0, 0, 0, 0, 0, 68, 0, 0, 0, 0,
	187, 0, 133, 0, 110, 68, 68, 0, 187, 127,
	148, 147, 149, 150, 151, 152, 4, 182, 0, 68,
	68, 0, 0, 0, 182, 37, 42, 0, 75, 0,
	0, 0, 100, 125, 146, 159, 160, 161, 162, 163,
	164, 165, 166, 167, 168, 169, 170, 171, 172, 173,
	174, 175, 176, 177, 178, 179, 180, 181, 182, 0,
	185, 0, 187, 182, 0, 0, 0, 187, 0, 33,
	0, 0, 109, 122, 192, 187, 0, 114, 115, 0,
	117, 187, 121, 0, 83, 0, 0, 0, 0, 0,
	0, 0, 133, 0, 192, 0, 68, 38, 109, 41,
	43, 0, 0, 0, 0, 0, 21, 0, 23, 0,
	0, 0, 0, 90, 93, 0, 0, 0, 47, 0,
	0, 0, 182, 0, 0, 0, 0, 60, 34, 0,
	0, 0, 0, 0, -2, 0, 194, 68, 113, 0,
	0, 68, 0, 86, 92, 0, 0, 94, 95, 96,
	0, 0, 192, 0, 0, -2, 0, 36, 0, 70,
	-2, 12, 0, 0, -2, 0, -2, 0, 182, 46,
	74, 88, 91, 0, 142, 143, 0, 44, 182, 111,
	49, 0, 182, 182, 0, 182, 0, 0, 187, 61,
	62, 0, 68, 35, 192, 0, 182, 0, 0, 0,
	-2, 81, 192, 0, -2, 39, 84, 87, 0, 137,
	138, 0, 0, 0, 0, 0, 103, 0, 134, 40,
	0, 182, -2, -2, 22, 0, 89, 141, 0, 0,
	0, 50, 0, 0, 182, 0, 182, 182, 0, 0,
	63, 64, 182, 69, 0, 194, 0, 195, 187, 0,
	182, 182, 0, 0, 116, 0, -2, 85, 136, 0,
	0, 97, 0, 0, 101, 187, 0, 182, 0, 45,
	0, 144, 48, 51, 52, 0, 54, 0, 0, 182,
	59, 67, 182, 182, 58, 0, 193, 119, 76, 0,
	0, 182, 82, 118, 0, 139, 0, 99, 133, 0,
	0, 16, 145, 53, 55, 56, 0, 65, 66, 120,
	77, 78, 0, 140, 98, 192, 135, 15, 0, 57,
	79, 0, 0, 182, 102, 182, 0, 0, 14, 13,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	84, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 83, 3, 3, 3, 71, 72, 3,
	76, 77, 69, 65, 78, 66, 79, 70, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 61, 80,
	63, 60, 64, 62, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 81, 3, 82, 68, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 74, 67, 75,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 73,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:112
		{
			yyVAL.compstmt = nil
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:116
		{
			yyVAL.compstmt = yyDollar[1].stmts
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:122
		{
			if yyDollar[2].stmt != nil {
				yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[2].stmt}}
			}
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmts
			}
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:131
		{
			if yyDollar[3].stmt != nil {
				if yyDollar[1].stmts == nil {
					yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[3].stmt}}
				} else {
					stmts := yyDollar[1].stmts.(*ast.StmtsStmt)
					stmts.Stmts = append(stmts.Stmts, yyDollar[3].stmt)
				}
				if l, ok := yylex.(*Lexer); ok {
					l.stmt = yyVAL.stmts
				}
			}
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:147
		{
			yyVAL.stmt = nil
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:151
		{
			yyVAL.stmt = yyDollar[1].stmt_var_or_lets
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:155
		{
			yyVAL.stmt = &ast.BreakStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:160
		{
			yyVAL.stmt = &ast.ContinueStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:165
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyDollar[2].exprs}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:170
		{
			yyVAL.stmt = &ast.ThrowStmt{Expr: yyDollar[2].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:176
		{
			yylex.Error("can't create anonymous module")
			return 1
		}
	case 12:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:181
		{
			yyVAL.stmt = &ast.ModuleStmt{Name: yyDollar[2].tok.Lit, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 13:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.go.y:186
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt, Finally: yyDollar[12].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 14:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.go.y:191
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt, Finally: yyDollar[11].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 15:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:196
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 16:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:201
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 17:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:206
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 18:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:211
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 19:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:216
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].expr.Position())
		}
	case 20:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:221
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 21:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:226
		{
			yyVAL.stmt = &ast.DeleteStmt{Item: yyDollar[3].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 22:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:231
		{
			yyVAL.stmt = &ast.DeleteStmt{Item: yyDollar[3].expr, Key: yyDollar[5].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:236
		{
			yyVAL.stmt = &ast.CloseStmt{Expr: yyDollar[3].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:241
		{
			yyVAL.stmt = yyDollar[1].stmt_if
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:245
		{
			yyVAL.stmt = yyDollar[1].stmt_for
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:249
		{
			yyVAL.stmt = yyDollar[1].stmt_switch
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:253
		{
			yyVAL.stmt = yyDollar[1].stmt_import
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:257
		{
			yyVAL.stmt = yyDollar[1].stmt_struct
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:261
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyDollar[1].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].expr.Position())
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:268
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_var
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:272
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_lets
		}
	case 32:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:278
		{
			yyVAL.stmt_import = &ast.ImportStmt{Name: yyDollar[2].expr}
			yyVAL.stmt_import.SetPosition(yyDollar[1].tok.Position())
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:284
		{
			yyVAL.stmt_import = &ast.ImportStmt{Name: yyDollar[3].expr, Local: true}
			yyVAL.stmt_import.SetPosition(yyDollar[1].tok.Position())
		}
	case 34:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:290
		{
			yyVAL.stmt_import = &ast.ImportStmt{Name: yyDollar[2].expr, As: yyDollar[4].tok.Lit}
			yyVAL.stmt_import.SetPosition(yyDollar[1].tok.Position())
		}
	case 35:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:296
		{
			yyVAL.stmt_import = &ast.ImportStmt{Name: yyDollar[3].expr, As: yyDollar[5].tok.Lit, Local: true}
			yyVAL.stmt_import.SetPosition(yyDollar[1].tok.Position())
		}
	case 36:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:303
		{
			yyVAL.stmt_var = &ast.VarStmt{Names: yyDollar[2].expr_idents, Exprs: yyDollar[4].exprs}
			yyVAL.stmt_var.SetPosition(yyDollar[1].tok.Position())
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:310
		{
			yyVAL.stmt_lets = &ast.LetsStmt{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{yyDollar[3].expr}}
			yyVAL.stmt_lets.SetPosition(yyDollar[1].expr.Position())
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:315
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_lets = &ast.LetMapItemStmt{LHSS: yyDollar[1].exprs, RHS: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_lets = &ast.LetsStmt{LHSS: yyDollar[1].exprs, RHSS: yyDollar[3].exprs}
				}
			} else {
				yyVAL.stmt_lets = &ast.LetsStmt{LHSS: yyDollar[1].exprs, RHSS: yyDollar[3].exprs}
			}
		}
	case 39:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:327
		{
			yyS := make([]ast.Expr, len(yyDollar[2].expr_idents))
			for i, yyv := range yyDollar[2].expr_idents {
				yyS[i] = &ast.IdentExpr{Lit: yyv}
			}
			yyVAL.stmt_lets = &ast.LetsStmt{LHSS: yyS, RHSS: yyDollar[5].exprs, Unpack: true}
		}
	case 40:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:336
		{
			yyS := make([]ast.Expr, len(yyDollar[4].expr_idents))
			for i, yyv := range yyDollar[4].expr_idents {
				yyS[i] = &ast.IdentExpr{Lit: yyv}
			}
			yyVAL.stmt_lets = &ast.LetsStmt{LHSS: yyS, RHSS: yyDollar[1].exprs, Unpack: true}
			yyVAL.stmt_lets.SetPosition(yyDollar[2].tok.Position())
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:346
		{
			// for maps
			if len(yyDollar[3].exprs) == 2 && len(yyDollar[1].exprs) == 1 {
				if _, ok := yyDollar[1].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_lets = &ast.LetMapItemStmt{LHSS: yyDollar[3].exprs, RHS: yyDollar[1].exprs[0]}
				} else {
					yyVAL.stmt_lets = &ast.LetsStmt{LHSS: yyDollar[3].exprs, RHSS: yyDollar[1].exprs}
				}
			} else {
				yyVAL.stmt_lets = &ast.LetsStmt{LHSS: yyDollar[3].exprs, RHSS: yyDollar[1].exprs}
			}
			yyVAL.stmt_lets.SetPosition(yyDollar[2].tok.Position())
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:360
		{
			yyVAL.stmt_lets = &ast.ChanStmt{LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
			yyVAL.stmt_lets.SetPosition(yyDollar[1].expr.Position())
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:365
		{
			if len(yyDollar[1].exprs) == 2 {
				chanStmt := &ast.ChanStmt{LHS: yyDollar[1].exprs[0].(ast.Expr), OkExpr: yyDollar[1].exprs[1].(ast.Expr), RHS: yyDollar[3].expr}
				yyVAL.stmt_lets = chanStmt
				yyVAL.stmt_lets.SetPosition(chanStmt.LHS.Position())
			} else if len(yyDollar[1].exprs) < 2 {
				yylex.Error("missing expressions on left side of channel operator")
				// TODO: return 1
				yyVAL.stmt_lets = &ast.ChanStmt{RHS: yyDollar[3].expr}
				yyVAL.stmt_lets.SetPosition(yyDollar[2].tok.Position())
			}
		}
	case 44:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:379
		{
			yyVAL.stmt_if = &ast.IfStmt{If: yyDollar[2].expr, Then: yyDollar[4].compstmt, Else: nil}
			yyVAL.stmt_if.SetPosition(yyDollar[1].tok.Position())
		}
	case 45:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:384
		{
			ifStmt := yyDollar[1].stmt_if.(*ast.IfStmt)
			ifStmt.ElseIf = append(ifStmt.ElseIf, &ast.IfStmt{If: yyDollar[4].expr, Then: yyDollar[6].compstmt})
		}
	case 46:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:389
		{
			ifStmt := yyDollar[1].stmt_if.(*ast.IfStmt)
			if ifStmt.Else != nil {
				yylex.Error("multiple else statement")
				return 1
			}
			ifStmt.Else = yyDollar[4].compstmt
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:400
		{
			yyVAL.stmt_for = &ast.LoopStmt{Stmt: yyDollar[3].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 48:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:405
		{
			if len(yyDollar[2].expr_idents) < 1 {
				yylex.Error("missing identifier")
				return 1
			}
			if len(yyDollar[2].expr_idents) > 2 {
				yylex.Error("too many identifiers")
				return 1
			}
			yyVAL.stmt_for = &ast.ForStmt{Vars: yyDollar[2].expr_idents, Value: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 49:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:418
		{
			yyVAL.stmt_for = &ast.LoopStmt{Expr: yyDollar[2].expr, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 50:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:423
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt: yyDollar[5].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 51:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:428
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr3: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 52:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:433
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 53:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:438
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 54:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:443
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 55:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:448
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 56:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:453
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 57:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:458
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Expr3: yyDollar[6].expr, Stmt: yyDollar[8].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 58:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:465
		{
			yyVAL.stmt_struct = &ast.StructStmt{
				Name: yyDollar[2].tok.Lit,
				Body: yyDollar[5].type_data_struct,
			}
		}
	case 59:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:474
		{
			switchStmt := yyDollar[5].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Expr = yyDollar[2].expr
			yyVAL.stmt_switch = switchStmt
			yyVAL.stmt_switch.SetPosition(yyDollar[1].tok.Position())
		}
	case 60:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:483
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:487
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Default: yyDollar[1].stmt_switch_default}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:491
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Cases: []ast.Stmt{yyDollar[1].stmt_switch_case}}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:495
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Cases = append(switchStmt.Cases, yyDollar[2].stmt_switch_case)
			yyVAL.stmt_switch_cases = switchStmt
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:501
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			if switchStmt.Default != nil {
				yylex.Error("multiple default statement")
				return 1
			}
			switchStmt.Default = yyDollar[2].stmt_switch_default
		}
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:512
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: []ast.Expr{yyDollar[2].expr}, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 66:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:517
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: yyDollar[2].exprs, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:524
		{
			yyVAL.stmt_switch_default = yyDollar[3].compstmt
		}
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:531
		{
			yyVAL.exprs = nil
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:535
		{
			yyVAL.exprs = []ast.Expr{yyDollar[1].expr}
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:539
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
				return 1
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr)
		}
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:547
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
				return 1
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr_ident)
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:557
		{
			yyVAL.expr = yyDollar[1].expr_member_or_ident
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:561
		{
			yyVAL.expr = yyDollar[1].expr_literals
		}
	case 74:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:565
		{
			yyVAL.expr = &ast.TernaryOpExpr{Expr: yyDollar[1].expr, LHS: yyDollar[3].expr, RHS: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:570
		{
			yyVAL.expr = &ast.NilCoalescingOpExpr{LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 76:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:575
		{
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].expr_idents, Stmt: yyDollar[6].compstmt}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 77:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:580
		{
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].expr_idents, Stmt: yyDollar[7].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 78:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:585
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].expr_idents, Stmt: yyDollar[7].compstmt}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 79:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:590
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].expr_idents, Stmt: yyDollar[8].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:595
		{
			yyVAL.expr = &ast.ArrayExpr{}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 81:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:600
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[3].exprs}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 82:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:605
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[5].exprs, TypeData: &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:610
		{
			yyVAL.expr = &ast.ParenExpr{SubExpr: yyDollar[2].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 84:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:615
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 85:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:620
		{
			yyVAL.expr = &ast.CallErrExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:625
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 87:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:630
		{
			yyVAL.expr = &ast.CallErrExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 88:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:635
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 89:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:640
		{
			yyVAL.expr = &ast.AnonCallErrExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 90:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:645
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 91:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:650
		{
			yyVAL.expr = &ast.AnonCallErrExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:655
		{
			yyVAL.expr = &ast.ItemExpr{Item: yyDollar[1].expr_ident, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr_ident.Position())
		}
	case 93:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:660
		{
			yyVAL.expr = &ast.ItemExpr{Item: yyDollar[1].expr, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:665
		{
			yyVAL.expr = &ast.LenExpr{Expr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:670
		{
			if yyDollar[3].type_data.Kind == ast.TypeDefault {
				yyDollar[3].type_data.Kind = ast.TypePtr
				yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			} else {
				yyVAL.expr = &ast.MakeExpr{TypeData: &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[3].type_data}}
			}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:680
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 97:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:685
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 98:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:690
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr, CapExpr: yyDollar[7].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 99:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:695
		{
			yyVAL.expr = &ast.MakeTypeExpr{Name: yyDollar[4].tok.Lit, Type: yyDollar[6].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:700
		{
			yyVAL.expr = &ast.IncludeExpr{ItemExpr: yyDollar[1].expr, ListExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 101:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:705
		{
			yyDollar[4].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: &ast.TypeStruct{Name: "interface"}, SubType: &ast.TypeStruct{Name: "interface"}}
			yyVAL.expr = yyDollar[4].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 102:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:711
		{
			yyDollar[8].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
			yyVAL.expr = yyDollar[8].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 103:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:717
		{
			yyVAL.expr = yyDollar[3].expr_map
			yyVAL.expr.SetPosition(yyDollar[3].expr_map.Position())
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:722
		{
			yyVAL.expr = yyDollar[1].expr_slice
			yyVAL.expr.SetPosition(yyDollar[1].expr_slice.Position())
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:727
		{
			yyVAL.expr = yyDollar[1].expr_chan
			yyVAL.expr.SetPosition(yyDollar[1].expr_chan.Position())
		}
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:736
		{
			yyVAL.expr_idents = []string{}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:740
		{
			yyVAL.expr_idents = []string{yyDollar[1].tok.Lit}
		}
	case 111:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:744
		{
			if len(yyDollar[1].expr_idents) == 0 {
				yylex.Error("syntax error: unexpected ','")
				return 1
			}
			yyVAL.expr_idents = append(yyDollar[1].expr_idents, yyDollar[4].tok.Lit)
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:754
		{
			yyVAL.type_data = &ast.TypeStruct{Name: yyDollar[1].tok.Lit}
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:758
		{
			if yyDollar[1].type_data.Kind != ast.TypeDefault {
				yylex.Error("not type default")
				return 1
			}
			yyDollar[1].type_data.Env = append(yyDollar[1].type_data.Env, yyDollar[1].type_data.Name)
			yyDollar[1].type_data.Name = yyDollar[3].tok.Lit
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:767
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypePtr
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[2].type_data}
			}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:776
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeSlice
				yyDollar[2].type_data.Dimensions = yyDollar[1].slice_count
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}
			}
		}
	case 116:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:786
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:790
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeChan
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeChan, SubType: yyDollar[2].type_data}
			}
		}
	case 118:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:799
		{
			yyVAL.type_data = yyDollar[4].type_data_struct
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:805
		{
			yyVAL.type_data_struct = &ast.TypeStruct{
				Kind:        ast.TypeStructType,
				StructNames: []string{yyDollar[1].tok.Lit},
				StructTypes: []*ast.TypeStruct{yyDollar[2].type_data},
				Name:        yyDollar[2].type_data.Name,
			}
		}
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:814
		{
			if yyVAL.type_data_struct == nil || len(yyDollar[1].type_data_struct.StructNames) == 0 {
				yylex.Error("syntax error: expected type declaration")
				return 1
			}
			if yyDollar[3].tok.Lit[0] >= 97 {
				yylex.Error("struct declarations cannot start with a lowercase letter")
				return 1
			}

			yyVAL.type_data_struct.StructNames = append(yyVAL.type_data_struct.StructNames, yyDollar[3].tok.Lit)
			yyVAL.type_data_struct.StructTypes = append(yyVAL.type_data_struct.StructTypes, yyDollar[4].type_data)
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:830
		{
			yyVAL.slice_count = 1
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:834
		{
			yyVAL.slice_count = yyDollar[3].slice_count + 1
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:840
		{
			yyVAL.expr_member_or_ident = yyDollar[1].expr_member
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:844
		{
			yyVAL.expr_member_or_ident = yyDollar[1].expr_ident
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:850
		{
			yyVAL.expr_member = &ast.MemberExpr{Expr: yyDollar[1].expr, Name: yyDollar[3].tok.Lit}
			yyVAL.expr_member.SetPosition(yyDollar[1].expr.Position())
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:857
		{
			yyVAL.expr_ident = &ast.IdentExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr_ident.SetPosition(yyDollar[1].tok.Position())
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:864
		{
			num, err := toNumber("-" + yyDollar[2].tok.Lit)
			if err != nil {
				yylex.Error("invalid number: -" + yyDollar[2].tok.Lit)
				return 1
			}
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: num}
			yyVAL.expr_literals.SetPosition(yyDollar[2].tok.Position())
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:874
		{
			yyN := yyDollar[1].tok.Lit
			num, err := toNumber(yyN)
			if err != nil {
				yylex.Error("invalid number: " + yyN)
				return 1
			}
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: num}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:885
		{
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: stringToValue(yyDollar[1].tok.Lit)}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:890
		{
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: trueValue}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:895
		{
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: falseValue}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:900
		{
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: nilValue}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:907
		{
			yyVAL.expr_map = &ast.MapExpr{}
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:911
		{
			yyVAL.expr_map = &ast.MapExpr{Keys: []ast.Expr{yyDollar[1].expr}, Values: []ast.Expr{yyDollar[3].expr}}
		}
	case 135:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:915
		{
			if yyDollar[1].expr_map.Keys == nil {
				yylex.Error("syntax error: unexpected ','")
				return 1
			}
			yyVAL.expr_map.Keys = append(yyVAL.expr_map.Keys, yyDollar[4].expr)
			yyVAL.expr_map.Values = append(yyVAL.expr_map.Values, yyDollar[6].expr)
		}
	case 136:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:926
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 137:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:930
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: nil}
		}
	case 138:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:934
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr_ident, Begin: nil, End: yyDollar[4].expr}
		}
	case 139:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:938
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr_ident, End: yyDollar[4].expr, Cap: yyDollar[6].expr}
		}
	case 140:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:942
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: yyDollar[5].expr, Cap: yyDollar[7].expr}
		}
	case 141:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:946
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 142:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:950
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr, Begin: yyDollar[3].expr, End: nil}
		}
	case 143:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:954
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr, Begin: nil, End: yyDollar[4].expr}
		}
	case 144:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:958
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr, End: yyDollar[4].expr, Cap: yyDollar[6].expr}
		}
	case 145:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:962
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr, Begin: yyDollar[3].expr, End: yyDollar[5].expr, Cap: yyDollar[7].expr}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:968
		{
			yyVAL.expr_chan = &ast.ChanExpr{LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:972
		{
			yyVAL.expr_chan = &ast.ChanExpr{RHS: yyDollar[2].expr}
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:978
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "-", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:983
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "!", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:988
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "^", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:993
		{
			yyVAL.expr = &ast.AddrExpr{Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:998
		{
			yyVAL.expr = &ast.DerefExpr{Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:1005
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:1010
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:1015
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:1020
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1027
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "+", RHS: oneLiteral}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1035
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "-", RHS: oneLiteral}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1043
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "+", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1051
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "-", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1059
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "|", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1067
		{
			rhs := &ast.OpExpr{Op: &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "*", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1075
		{
			rhs := &ast.OpExpr{Op: &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "/", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1083
		{
			rhs := &ast.OpExpr{Op: &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "&", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1094
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "*", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1099
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "/", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1104
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "%", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1109
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "<<", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1114
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: ">>", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1119
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "&", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1126
		{
			yyVAL.expr = &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "+", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1131
		{
			yyVAL.expr = &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "-", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1136
		{
			yyVAL.expr = &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "|", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1143
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "==", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1148
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "!=", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1153
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "<", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1158
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "<=", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1163
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: ">", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1168
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: ">=", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1175
		{
			yyVAL.expr = &ast.BinaryOperator{LHS: yyDollar[1].expr, Operator: "&&", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1180
		{
			yyVAL.expr = &ast.BinaryOperator{LHS: yyDollar[1].expr, Operator: "||", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	}
	goto yystack /* stack new state and value */
}
