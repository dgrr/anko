// Code generated by goyacc -o parser.go parser.go.y. DO NOT EDIT.

//line parser.go.y:2
package parser

import __yyfmt__ "fmt"

//line parser.go.y:2

import (
	"github.com/dgrr/pako/ast"
)

//line parser.go.y:50
type yySymType struct {
	yys int
	tok ast.Token

	compstmt            ast.Stmt
	modstmts            ast.Stmt
	modstmt             ast.Stmt
	stmts               ast.Stmt
	stmt                ast.Stmt
	stmt_var_or_lets    ast.Stmt
	stmt_import         ast.Stmt
	stmt_module         ast.Stmt
	stmt_struct         ast.Stmt
	stmt_var            ast.Stmt
	stmt_lets           ast.Stmt
	stmt_if             ast.Stmt
	stmt_for            ast.Stmt
	stmt_switch         ast.Stmt
	stmt_switch_cases   ast.Stmt
	stmt_switch_case    ast.Stmt
	stmt_switch_default ast.Stmt

	exprs                []ast.Expr
	expr                 ast.Expr
	expr_idents          []string
	type_data            *ast.TypeStruct
	type_data_struct     *ast.TypeStruct
	slice_count          int
	expr_member_or_ident ast.Expr
	expr_member          *ast.MemberExpr
	expr_ident           *ast.IdentExpr
	expr_literals        ast.Expr
	expr_map             *ast.MapExpr
	expr_slice           ast.Expr
	expr_chan            ast.Expr
	expr_unary           ast.Expr
	expr_binary          ast.Expr
	expr_lets            ast.Expr

	op_binary     ast.Operator
	op_comparison ast.Operator
	op_add        ast.Operator
	op_multiply   ast.Operator
}

const IDENT = 57346
const NUMBER = 57347
const STRING = 57348
const ARRAY = 57349
const VARARG = 57350
const FUNC = 57351
const RETURN = 57352
const VAR = 57353
const THROW = 57354
const IF = 57355
const ELSE = 57356
const FOR = 57357
const IN = 57358
const EQEQ = 57359
const NEQ = 57360
const GE = 57361
const LE = 57362
const OROR = 57363
const ANDAND = 57364
const NEW = 57365
const TRUE = 57366
const FALSE = 57367
const NIL = 57368
const NILCOALESCE = 57369
const MODULE = 57370
const TRY = 57371
const CATCH = 57372
const FINALLY = 57373
const PLUSEQ = 57374
const MINUSEQ = 57375
const MULEQ = 57376
const DIVEQ = 57377
const ANDEQ = 57378
const OREQ = 57379
const BREAK = 57380
const CONTINUE = 57381
const PLUSPLUS = 57382
const MINUSMINUS = 57383
const SHIFTLEFT = 57384
const SHIFTRIGHT = 57385
const SWITCH = 57386
const CASE = 57387
const DEFAULT = 57388
const GO = 57389
const CHAN = 57390
const STRUCT = 57391
const MAKE = 57392
const OPCHAN = 57393
const EQOPCHAN = 57394
const TYPE = 57395
const LEN = 57396
const DELETE = 57397
const CLOSE = 57398
const MAP = 57399
const IMPORT = 57400
const AS = 57401
const UNARY = 57402

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"NUMBER",
	"STRING",
	"ARRAY",
	"VARARG",
	"FUNC",
	"RETURN",
	"VAR",
	"THROW",
	"IF",
	"ELSE",
	"FOR",
	"IN",
	"EQEQ",
	"NEQ",
	"GE",
	"LE",
	"OROR",
	"ANDAND",
	"NEW",
	"TRUE",
	"FALSE",
	"NIL",
	"NILCOALESCE",
	"MODULE",
	"TRY",
	"CATCH",
	"FINALLY",
	"PLUSEQ",
	"MINUSEQ",
	"MULEQ",
	"DIVEQ",
	"ANDEQ",
	"OREQ",
	"BREAK",
	"CONTINUE",
	"PLUSPLUS",
	"MINUSMINUS",
	"SHIFTLEFT",
	"SHIFTRIGHT",
	"SWITCH",
	"CASE",
	"DEFAULT",
	"GO",
	"CHAN",
	"STRUCT",
	"MAKE",
	"OPCHAN",
	"EQOPCHAN",
	"TYPE",
	"LEN",
	"DELETE",
	"CLOSE",
	"MAP",
	"IMPORT",
	"AS",
	"'='",
	"':'",
	"'?'",
	"'<'",
	"'>'",
	"'+'",
	"'-'",
	"'|'",
	"'^'",
	"'*'",
	"'/'",
	"'%'",
	"'&'",
	"UNARY",
	"'{'",
	"'}'",
	"'('",
	"')'",
	"','",
	"'.'",
	"';'",
	"'['",
	"']'",
	"'!'",
	"'\\n'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:1289

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	52, 77,
	59, 77,
	60, 77,
	78, 77,
	80, 13,
	-2, 1,
	-1, 25,
	59, 78,
	78, 78,
	-2, 36,
	-1, 30,
	16, 120,
	-2, 77,
	-1, 71,
	52, 77,
	59, 77,
	60, 77,
	78, 77,
	-2, 13,
	-1, 126,
	16, 121,
	77, 121,
	78, 121,
	-2, 137,
	-1, 134,
	4, 132,
	48, 132,
	49, 132,
	57, 132,
	-2, 91,
	-1, 270,
	75, 7,
	80, 7,
	84, 7,
	-2, 77,
	-1, 289,
	75, 209,
	82, 209,
	-2, 198,
	-1, 310,
	75, 209,
	-2, 198,
	-1, 315,
	1, 80,
	8, 80,
	45, 80,
	46, 80,
	52, 80,
	59, 80,
	60, 80,
	61, 80,
	75, 80,
	77, 80,
	78, 80,
	80, 80,
	82, 80,
	84, 80,
	-2, 135,
	-1, 318,
	1, 25,
	45, 25,
	46, 25,
	75, 25,
	80, 25,
	84, 25,
	-2, 97,
	-1, 320,
	1, 27,
	45, 27,
	46, 27,
	75, 27,
	80, 27,
	84, 27,
	-2, 101,
	-1, 331,
	75, 7,
	80, 7,
	84, 7,
	-2, 77,
	-1, 335,
	59, 78,
	78, 78,
	-2, 9,
	-1, 363,
	75, 207,
	82, 207,
	-2, 199,
	-1, 385,
	1, 24,
	45, 24,
	46, 24,
	75, 24,
	80, 24,
	84, 24,
	-2, 95,
	-1, 386,
	1, 26,
	45, 26,
	46, 26,
	75, 26,
	80, 26,
	84, 26,
	-2, 99,
	-1, 421,
	75, 199,
	-2, 204,
}

const yyPrivate = 57344

const yyLast = 4180

var yyAct = [...]int{

	75, 290, 38, 25, 247, 10, 24, 7, 351, 333,
	352, 356, 41, 15, 73, 77, 23, 8, 80, 2,
	122, 4, 134, 70, 8, 71, 137, 364, 354, 353,
	120, 123, 127, 128, 332, 229, 125, 449, 366, 5,
	146, 140, 1, 8, 5, 310, 8, 411, 8, 289,
	235, 8, 357, 8, 229, 8, 162, 308, 148, 144,
	145, 152, 163, 164, 165, 166, 167, 8, 153, 232,
	478, 88, 25, 155, 91, 229, 89, 146, 218, 430,
	73, 160, 172, 173, 229, 176, 177, 178, 179, 361,
	181, 183, 319, 185, 376, 154, 186, 187, 188, 189,
	190, 191, 192, 193, 194, 195, 196, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 207, 208, 317,
	159, 169, 304, 305, 229, 217, 488, 158, 157, 303,
	221, 229, 8, 135, 448, 297, 416, 226, 386, 479,
	214, 385, 140, 140, 73, 140, 160, 90, 369, 239,
	241, 160, 223, 140, 140, 248, 140, 286, 360, 214,
	253, 320, 160, 213, 211, 359, 230, 231, 90, 233,
	264, 93, 94, 104, 105, 261, 228, 242, 243, 417,
	246, 229, 325, 268, 224, 53, 382, 214, 318, 160,
	249, 132, 93, 94, 104, 105, 107, 108, 109, 74,
	101, 102, 103, 106, 298, 160, 496, 88, 214, 147,
	91, 170, 89, 151, 273, 236, 214, 277, 262, 280,
	73, 101, 102, 103, 106, 214, 285, 214, 88, 270,
	150, 91, 149, 89, 82, 140, 81, 138, 226, 265,
	160, 301, 503, 502, 501, 287, 248, 499, 245, 309,
	307, 6, 146, 271, 133, 314, 254, 72, 275, 294,
	321, 495, 493, 131, 324, 487, 486, 315, 327, 484,
	476, 335, 313, 475, 180, 470, 336, 337, 469, 346,
	348, 142, 143, 468, 334, 466, 244, 338, 458, 136,
	141, 331, 73, 457, 452, 445, 441, 439, 136, 73,
	438, 371, 139, 90, 437, 434, 375, 367, 383, 377,
	274, 140, 381, 429, 144, 281, 395, 379, 342, 343,
	339, 227, 323, 272, 292, 255, 119, 93, 94, 492,
	295, 392, 335, 238, 174, 378, 489, 336, 337, 455,
	432, 393, 415, 250, 252, 334, 414, 358, 338, 234,
	402, 222, 209, 78, 138, 407, 256, 257, 9, 405,
	140, 404, 288, 88, 389, 388, 91, 418, 89, 140,
	422, 73, 326, 212, 370, 425, 406, 428, 384, 296,
	491, 431, 485, 394, 412, 254, 316, 396, 397, 83,
	399, 156, 435, 419, 450, 175, 118, 357, 142, 143,
	362, 413, 354, 353, 136, 355, 380, 141, 341, 306,
	293, 282, 136, 225, 184, 130, 410, 73, 66, 139,
	67, 68, 69, 51, 50, 459, 49, 433, 461, 73,
	168, 144, 48, 47, 35, 312, 54, 34, 456, 350,
	22, 440, 21, 442, 443, 20, 403, 27, 26, 446,
	3, 269, 0, 140, 0, 0, 0, 453, 454, 73,
	0, 0, 0, 420, 248, 483, 136, 0, 482, 0,
	0, 136, 0, 0, 284, 465, 0, 474, 365, 291,
	136, 0, 368, 0, 490, 0, 136, 471, 0, 0,
	472, 473, 0, 0, 0, 0, 0, 0, 477, 291,
	0, 40, 56, 57, 0, 0, 36, 0, 52, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	43, 58, 59, 60, 0, 28, 463, 0, 212, 0,
	0, 0, 494, 0, 0, 497, 498, 0, 0, 500,
	408, 363, 0, 0, 0, 0, 33, 44, 61, 0,
	0, 42, 0, 0, 45, 32, 0, 0, 0, 291,
	0, 0, 363, 55, 0, 63, 65, 0, 0, 64,
	0, 46, 0, 39, 0, 0, 0, 0, 37, 0,
	62, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 0, 212,
	0, 0, 136, 0, 40, 56, 57, 0, 409, 36,
	13, 52, 14, 29, 0, 30, 0, 291, 0, 421,
	0, 0, 0, 43, 58, 59, 60, 0, 28, 16,
	0, 0, 0, 0, 0, 0, 0, 0, 11, 12,
	0, 0, 0, 0, 31, 0, 0, 17, 0, 33,
	44, 61, 0, 212, 42, 18, 19, 45, 32, 0,
	0, 0, 0, 451, 0, 0, 55, 0, 63, 65,
	0, 0, 64, 0, 46, 0, 39, 0, 0, 0,
	0, 37, 136, 62, 0, 0, 0, 0, 0, 0,
	90, 110, 111, 115, 113, 117, 116, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 95, 96, 98, 99,
	100, 97, 0, 0, 93, 94, 104, 105, 0, 0,
	0, 0, 0, 0, 0, 92, 0, 0, 0, 0,
	0, 0, 0, 0, 291, 424, 86, 112, 114, 107,
	108, 109, 0, 101, 102, 103, 106, 0, 0, 0,
	88, 0, 0, 91, 0, 89, 423, 90, 110, 111,
	115, 113, 117, 116, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 95, 96, 98, 99, 100, 97, 0,
	0, 93, 94, 104, 105, 0, 0, 0, 0, 0,
	0, 0, 92, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 391, 86, 112, 114, 107, 108, 109, 0,
	101, 102, 103, 106, 0, 0, 0, 88, 0, 0,
	91, 0, 89, 390, 90, 110, 111, 115, 113, 117,
	116, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	95, 96, 98, 99, 100, 97, 0, 0, 93, 94,
	104, 105, 0, 0, 0, 0, 0, 0, 0, 92,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 374,
	86, 112, 114, 107, 108, 109, 0, 101, 102, 103,
	106, 0, 0, 0, 88, 0, 0, 91, 0, 89,
	373, 90, 110, 111, 115, 113, 117, 116, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 95, 96, 98,
	99, 100, 97, 0, 0, 93, 94, 104, 105, 0,
	0, 0, 0, 0, 0, 0, 92, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 330, 86, 112, 114,
	107, 108, 109, 0, 101, 102, 103, 106, 0, 0,
	0, 88, 0, 0, 91, 0, 89, 329, 90, 110,
	111, 115, 113, 117, 116, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 95, 96, 98, 99, 100, 97,
	0, 0, 93, 94, 104, 105, 0, 0, 0, 0,
	0, 0, 0, 92, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 300, 86, 112, 114, 107, 108, 109,
	0, 101, 102, 103, 106, 0, 0, 0, 88, 0,
	0, 91, 0, 89, 299, 90, 110, 111, 115, 113,
	117, 116, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 95, 96, 98, 99, 100, 97, 0, 0, 93,
	94, 104, 105, 0, 0, 0, 0, 0, 0, 0,
	92, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	267, 86, 112, 114, 107, 108, 109, 0, 101, 102,
	103, 106, 0, 0, 0, 88, 0, 0, 91, 0,
	89, 266, 90, 110, 111, 115, 113, 117, 116, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 95, 96,
	98, 99, 100, 97, 0, 0, 93, 94, 104, 105,
	0, 0, 0, 0, 0, 0, 0, 92, 85, 0,
	0, 0, 0, 0, 0, 0, 84, 0, 86, 112,
	114, 107, 108, 109, 0, 101, 102, 103, 106, 0,
	215, 0, 88, 0, 0, 91, 0, 89, 90, 110,
	111, 115, 113, 117, 116, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 95, 96, 98, 99, 100, 97,
	0, 0, 93, 94, 104, 105, 0, 0, 0, 0,
	0, 0, 0, 92, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 112, 114, 107, 108, 109,
	0, 101, 102, 103, 106, 0, 0, 0, 88, 0,
	0, 91, 0, 89, 480, 90, 110, 111, 115, 113,
	117, 116, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 95, 96, 98, 99, 100, 97, 0, 0, 93,
	94, 104, 105, 0, 0, 0, 0, 0, 0, 0,
	92, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 112, 114, 107, 108, 109, 0, 101, 102,
	103, 106, 0, 0, 0, 88, 0, 0, 91, 0,
	89, 467, 90, 110, 111, 115, 113, 117, 116, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 95, 96,
	98, 99, 100, 97, 0, 0, 93, 94, 104, 105,
	0, 0, 0, 0, 0, 0, 0, 92, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 112,
	114, 107, 108, 109, 0, 101, 102, 103, 106, 0,
	0, 0, 88, 0, 0, 91, 0, 89, 460, 90,
	110, 111, 115, 113, 117, 116, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 95, 96, 98, 99, 100,
	97, 0, 0, 93, 94, 104, 105, 0, 0, 0,
	0, 0, 0, 0, 92, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 112, 114, 107, 108,
	109, 0, 101, 102, 103, 106, 0, 0, 0, 88,
	0, 0, 91, 0, 89, 436, 90, 110, 111, 115,
	113, 117, 116, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 95, 96, 98, 99, 100, 97, 0, 0,
	93, 94, 104, 105, 0, 0, 0, 0, 0, 0,
	0, 92, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 112, 114, 107, 108, 109, 0, 101,
	102, 103, 106, 0, 0, 0, 88, 426, 427, 91,
	0, 89, 90, 110, 111, 115, 113, 117, 116, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 95, 96,
	98, 99, 100, 97, 0, 0, 93, 94, 104, 105,
	0, 0, 0, 0, 0, 0, 0, 92, 85, 0,
	0, 0, 0, 0, 0, 0, 84, 0, 86, 112,
	114, 107, 108, 109, 0, 101, 102, 103, 106, 0,
	0, 0, 88, 0, 0, 91, 0, 89, 90, 110,
	111, 115, 113, 117, 116, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 95, 96, 98, 99, 100, 97,
	0, 0, 93, 94, 104, 105, 0, 0, 0, 0,
	0, 0, 0, 92, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 112, 114, 107, 108, 109,
	0, 101, 102, 103, 106, 0, 0, 0, 88, 258,
	259, 91, 0, 89, 90, 110, 111, 115, 113, 117,
	116, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	95, 96, 98, 99, 100, 97, 0, 0, 93, 94,
	104, 105, 0, 0, 0, 0, 0, 0, 0, 92,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 112, 114, 107, 108, 109, 0, 101, 102, 103,
	106, 0, 0, 0, 88, 481, 0, 91, 0, 89,
	90, 110, 111, 115, 113, 117, 116, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 95, 96, 98, 99,
	100, 97, 0, 0, 93, 94, 104, 105, 0, 0,
	0, 0, 0, 0, 0, 92, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 464, 86, 112, 114, 107,
	108, 109, 0, 101, 102, 103, 106, 0, 0, 0,
	88, 0, 0, 91, 0, 89, 90, 110, 111, 115,
	113, 117, 116, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 95, 96, 98, 99, 100, 97, 0, 0,
	93, 94, 104, 105, 0, 0, 0, 0, 0, 0,
	0, 92, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 112, 114, 107, 108, 109, 0, 101,
	102, 103, 106, 0, 0, 0, 88, 462, 0, 91,
	0, 89, 90, 110, 111, 115, 113, 117, 116, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 95, 96,
	98, 99, 100, 97, 0, 0, 93, 94, 104, 105,
	0, 0, 0, 0, 0, 0, 0, 92, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 447, 86, 112,
	114, 107, 108, 109, 0, 101, 102, 103, 106, 0,
	0, 0, 88, 0, 0, 91, 0, 89, 90, 110,
	111, 115, 113, 117, 116, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 95, 96, 98, 99, 100, 97,
	0, 0, 93, 94, 104, 105, 0, 0, 0, 0,
	0, 0, 0, 92, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 112, 114, 107, 108, 109,
	0, 101, 102, 103, 106, 0, 444, 0, 88, 0,
	0, 91, 0, 89, 90, 110, 111, 115, 113, 117,
	116, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	95, 96, 98, 99, 100, 97, 0, 0, 93, 94,
	104, 105, 0, 0, 0, 0, 0, 0, 0, 92,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 112, 114, 107, 108, 109, 0, 101, 102, 103,
	106, 0, 400, 0, 88, 0, 0, 91, 0, 89,
	90, 110, 111, 115, 113, 117, 116, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 95, 96, 98, 99,
	100, 97, 0, 0, 93, 94, 104, 105, 0, 0,
	0, 0, 0, 0, 0, 92, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 112, 114, 107,
	108, 109, 0, 101, 102, 103, 106, 0, 398, 0,
	88, 0, 0, 91, 0, 89, 90, 110, 111, 115,
	113, 117, 116, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 95, 96, 98, 99, 100, 97, 0, 0,
	93, 94, 104, 105, 0, 0, 0, 0, 0, 0,
	0, 92, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 112, 114, 107, 108, 109, 0, 101,
	102, 103, 106, 0, 0, 0, 88, 387, 0, 91,
	0, 89, 90, 110, 111, 115, 113, 117, 116, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 95, 96,
	98, 99, 100, 97, 0, 0, 93, 94, 104, 105,
	0, 0, 0, 0, 0, 0, 0, 92, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 112,
	114, 107, 108, 109, 0, 101, 102, 103, 106, 0,
	0, 0, 88, 0, 0, 91, 349, 89, 90, 110,
	111, 115, 113, 117, 116, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 95, 96, 98, 99, 100, 97,
	0, 0, 93, 94, 104, 105, 0, 0, 0, 0,
	0, 0, 0, 92, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 112, 114, 107, 108, 109,
	0, 101, 102, 103, 106, 0, 344, 0, 88, 0,
	0, 91, 0, 89, 90, 110, 111, 115, 113, 117,
	116, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	95, 96, 98, 99, 100, 97, 0, 0, 93, 94,
	104, 105, 0, 0, 0, 0, 0, 0, 0, 92,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 112, 114, 107, 108, 109, 0, 101, 102, 103,
	106, 0, 340, 0, 88, 0, 0, 91, 0, 89,
	90, 110, 111, 115, 113, 117, 116, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 95, 96, 98, 99,
	100, 97, 0, 0, 93, 94, 104, 105, 0, 0,
	0, 0, 0, 0, 0, 92, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 112, 114, 107,
	108, 109, 0, 101, 102, 103, 106, 0, 322, 0,
	88, 0, 0, 91, 0, 89, 90, 110, 111, 115,
	113, 117, 116, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 95, 96, 98, 99, 100, 97, 0, 0,
	93, 94, 104, 105, 0, 0, 0, 0, 0, 0,
	0, 92, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 311, 86, 112, 114, 107, 108, 109, 0, 101,
	102, 103, 106, 0, 0, 0, 88, 0, 0, 91,
	0, 89, 90, 110, 111, 115, 113, 117, 116, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 95, 96,
	98, 99, 100, 97, 0, 0, 93, 94, 104, 105,
	0, 0, 0, 0, 0, 0, 0, 92, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 112,
	114, 107, 108, 109, 0, 101, 102, 103, 106, 0,
	0, 0, 88, 302, 0, 91, 0, 89, 90, 110,
	111, 115, 113, 117, 116, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 95, 96, 98, 99, 100, 97,
	0, 0, 93, 94, 104, 105, 0, 0, 0, 0,
	0, 0, 0, 92, 0, 0, 0, 0, 0, 0,
	0, 283, 0, 0, 86, 112, 114, 107, 108, 109,
	0, 101, 102, 103, 106, 0, 0, 0, 88, 0,
	0, 91, 0, 89, 90, 110, 111, 115, 113, 117,
	116, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	95, 96, 98, 99, 100, 97, 0, 0, 93, 94,
	104, 105, 0, 0, 0, 0, 0, 0, 0, 92,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 112, 114, 107, 108, 109, 0, 101, 102, 103,
	106, 0, 0, 0, 88, 0, 0, 91, 278, 89,
	90, 110, 111, 115, 113, 117, 116, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 95, 96, 98, 99,
	100, 97, 0, 0, 93, 94, 104, 105, 0, 0,
	0, 0, 0, 0, 0, 92, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 263, 86, 112, 114, 107,
	108, 109, 0, 101, 102, 103, 106, 0, 0, 0,
	88, 0, 0, 91, 0, 89, 90, 110, 111, 115,
	113, 117, 116, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 95, 96, 98, 99, 100, 97, 0, 0,
	93, 94, 104, 105, 0, 0, 0, 0, 0, 0,
	0, 92, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 112, 114, 107, 108, 109, 0, 101,
	102, 103, 106, 0, 0, 0, 88, 260, 0, 91,
	0, 89, 90, 110, 111, 115, 113, 117, 116, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 95, 96,
	98, 99, 100, 97, 0, 0, 93, 94, 104, 105,
	0, 0, 0, 0, 0, 0, 0, 92, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 112,
	114, 107, 108, 109, 0, 101, 102, 103, 106, 0,
	0, 0, 88, 237, 0, 91, 0, 89, 90, 110,
	111, 115, 113, 117, 116, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 95, 96, 98, 99, 100, 97,
	0, 0, 93, 94, 104, 105, 0, 0, 0, 0,
	0, 0, 0, 92, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 86, 112, 114, 107, 108, 109,
	0, 101, 102, 103, 106, 0, 0, 0, 88, 0,
	0, 91, 0, 89, 90, 110, 111, 115, 113, 117,
	116, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	95, 96, 98, 99, 100, 97, 0, 0, 93, 94,
	104, 105, 0, 0, 0, 0, 0, 0, 0, 92,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 112, 114, 107, 108, 109, 0, 101, 102, 103,
	106, 0, 219, 0, 88, 0, 0, 91, 0, 89,
	90, 110, 111, 115, 113, 117, 116, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 95, 96, 98, 99,
	100, 97, 0, 0, 93, 94, 104, 105, 0, 0,
	0, 0, 0, 0, 0, 92, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 112, 114, 107,
	108, 109, 0, 101, 102, 103, 106, 0, 210, 0,
	88, 0, 0, 91, 0, 89, 90, 110, 111, 115,
	113, 117, 116, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 95, 96, 98, 99, 100, 97, 0, 0,
	93, 94, 104, 105, 0, 0, 0, 0, 0, 0,
	0, 92, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 112, 114, 107, 108, 109, 0, 101,
	102, 103, 106, 0, 0, 0, 88, 0, 0, 91,
	0, 89, 90, 110, 111, 115, 113, 117, 116, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 95, 96,
	98, 99, 100, 97, 0, 0, 93, 94, 104, 105,
	0, 0, 0, 0, 0, 0, 0, 92, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 112,
	114, 107, 108, 109, 0, 101, 102, 103, 106, 0,
	0, 0, 171, 0, 0, 91, 0, 89, 90, 110,
	111, 115, 113, 117, 116, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 94, 104, 105, 0, 0, 0, 0,
	0, 0, 0, 92, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 112, 114, 107, 108, 109,
	0, 101, 102, 103, 106, 0, 0, 0, 88, 0,
	0, 91, 0, 89, 90, 110, 111, 115, 113, 117,
	116, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 93, 94,
	104, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 112, 114, 107, 108, 109, 0, 101, 102, 103,
	106, 126, 56, 57, 88, 0, 36, 91, 52, 89,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	43, 58, 59, 60, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 40, 56, 57, 0,
	0, 36, 0, 0, 0, 0, 0, 44, 61, 0,
	0, 42, 0, 0, 45, 43, 58, 59, 60, 0,
	0, 0, 0, 55, 0, 63, 65, 0, 0, 64,
	0, 121, 0, 39, 40, 56, 57, 124, 37, 36,
	62, 0, 44, 61, 0, 0, 42, 0, 0, 45,
	0, 0, 0, 43, 58, 59, 60, 0, 55, 0,
	63, 65, 0, 0, 64, 0, 46, 0, 76, 0,
	0, 0, 0, 37, 372, 62, 0, 0, 0, 0,
	44, 61, 0, 0, 42, 0, 0, 45, 40, 56,
	57, 0, 0, 36, 0, 0, 55, 0, 63, 65,
	0, 0, 64, 0, 46, 0, 76, 43, 58, 59,
	60, 37, 328, 62, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 40, 56, 57, 0, 0, 36, 0,
	0, 0, 0, 0, 44, 61, 0, 0, 42, 0,
	0, 45, 43, 58, 59, 60, 0, 0, 0, 0,
	55, 0, 63, 65, 0, 0, 64, 0, 46, 0,
	76, 0, 0, 0, 279, 37, 0, 62, 0, 44,
	61, 0, 0, 42, 0, 0, 45, 40, 56, 57,
	240, 0, 36, 0, 0, 55, 0, 63, 65, 0,
	0, 64, 0, 46, 0, 76, 43, 58, 59, 60,
	37, 0, 62, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 40, 56, 57, 0, 0, 36, 0, 0,
	0, 0, 0, 44, 61, 0, 0, 42, 0, 0,
	45, 43, 58, 59, 60, 0, 0, 0, 0, 55,
	0, 63, 65, 0, 0, 64, 0, 46, 0, 76,
	0, 0, 0, 216, 37, 0, 62, 0, 44, 61,
	0, 0, 42, 0, 0, 45, 40, 56, 57, 182,
	0, 36, 0, 0, 55, 0, 63, 65, 0, 0,
	64, 0, 46, 0, 76, 43, 58, 59, 60, 37,
	0, 62, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 40, 56, 57, 0, 0, 36, 0, 0, 0,
	0, 0, 44, 61, 0, 0, 42, 0, 0, 45,
	43, 58, 59, 60, 0, 0, 0, 0, 55, 0,
	63, 65, 0, 0, 64, 0, 46, 0, 76, 0,
	0, 129, 0, 37, 0, 62, 0, 44, 61, 0,
	0, 42, 0, 0, 45, 40, 56, 57, 0, 0,
	36, 0, 0, 55, 0, 63, 65, 0, 0, 64,
	0, 46, 0, 76, 43, 58, 59, 60, 37, 0,
	62, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	40, 56, 57, 0, 0, 36, 0, 0, 0, 0,
	0, 44, 61, 0, 0, 42, 0, 0, 45, 43,
	58, 59, 60, 0, 0, 0, 0, 55, 0, 63,
	65, 0, 0, 64, 0, 401, 0, 76, 40, 56,
	57, 0, 37, 36, 62, 0, 44, 61, 0, 0,
	42, 0, 0, 45, 0, 0, 0, 43, 58, 59,
	60, 0, 55, 0, 63, 65, 0, 0, 64, 0,
	347, 0, 76, 126, 56, 57, 0, 37, 36, 62,
	0, 0, 0, 0, 44, 61, 0, 0, 42, 0,
	0, 45, 43, 58, 59, 60, 0, 0, 0, 0,
	55, 0, 63, 65, 0, 0, 64, 0, 345, 0,
	76, 40, 56, 57, 0, 37, 36, 62, 0, 44,
	61, 0, 0, 42, 0, 0, 45, 0, 0, 0,
	43, 58, 59, 60, 0, 55, 0, 63, 65, 0,
	0, 64, 0, 46, 0, 76, 0, 0, 0, 0,
	37, 0, 62, 0, 0, 0, 0, 44, 61, 0,
	0, 42, 0, 0, 45, 0, 0, 0, 90, 110,
	111, 115, 113, 55, 116, 63, 65, 0, 0, 64,
	0, 276, 0, 76, 0, 0, 0, 0, 37, 0,
	62, 0, 93, 94, 104, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 112, 114, 107, 108, 109,
	0, 101, 102, 103, 106, 40, 56, 57, 88, 0,
	36, 91, 0, 89, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 43, 58, 59, 60, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	40, 161, 57, 0, 0, 36, 0, 0, 0, 0,
	0, 44, 61, 0, 0, 42, 0, 0, 45, 43,
	58, 59, 60, 0, 0, 0, 0, 55, 0, 63,
	65, 0, 0, 64, 0, 46, 0, 251, 79, 56,
	57, 0, 37, 36, 62, 0, 44, 61, 0, 0,
	42, 0, 0, 45, 0, 0, 0, 43, 58, 59,
	60, 0, 55, 0, 63, 65, 0, 0, 64, 0,
	46, 0, 76, 0, 0, 0, 0, 37, 0, 62,
	0, 0, 0, 0, 44, 61, 0, 0, 42, 0,
	0, 45, 0, 0, 90, 110, 111, 115, 113, 0,
	55, 0, 63, 65, 0, 0, 64, 0, 46, 0,
	76, 0, 0, 0, 0, 37, 0, 62, 93, 94,
	104, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 112, 114, 107, 108, 109, 0, 101, 102, 103,
	106, 0, 0, 0, 88, 0, 0, 91, 0, 89,
}
var yyPact = [...]int{

	-36, -1000, 600, -36, -1000, -67, -67, -1000, -1000, -1000,
	-1000, -1000, -1000, 3667, 3667, -1000, 279, 4054, 160, 158,
	375, -1000, -1000, -1000, -1000, 1476, -1000, -1000, 322, 3667,
	3327, 3667, 3632, 411, -1000, -1000, 187, -60, 350, 3829,
	133, -23, 156, 154, 137, -13, -67, -1000, -1000, -1000,
	-1000, -1000, 387, 68, -1000, 4016, -1000, -1000, -1000, -1000,
	-1000, 3667, 3667, 3667, 3667, 3667, -1000, -1000, -1000, -1000,
	-1000, 600, -67, -1000, 3, 3060, 3667, 3060, -36, 135,
	3126, 3667, 3667, 321, 3667, 3667, 3667, 3667, 3667, 3578,
	3667, 410, 3667, -1000, -1000, 3667, 3667, 3667, 3667, 3667,
	3667, 3667, 3667, 3667, 3667, 3667, 3667, 3667, 3667, 3667,
	3667, 3667, 3667, 3667, 3667, 3667, 3667, 3667, -1000, 278,
	2994, -36, 147, 1076, 3543, -2, 133, 2928, 2862, 3667,
	277, 387, 108, 409, -22, 3667, -67, 102, -1000, 350,
	350, -12, 350, 275, -32, 138, 2796, 3667, 3489, 3667,
	350, 233, -67, 350, 3667, 130, -1000, 3667, 3981, 3667,
	-67, -1000, -5, 3192, -5, -5, -5, -5, -1000, 250,
	3667, 3667, 1542, 2730, 3667, -36, 3060, 3060, 2664, 3258,
	162, 1009, 3667, 287, -1000, 3192, 3060, 3060, 3060, 3060,
	3060, 3060, 287, 287, 287, 287, 287, 287, 152, 152,
	152, 131, 131, 131, 131, 131, 131, 4098, 3912, -36,
	-36, 248, -67, 3667, -67, -36, 3867, 2598, 3454, -67,
	407, 2532, -67, 149, 387, 295, -1000, -29, -67, 406,
	-4, -4, 350, -4, -67, -22, 319, -1000, 127, 942,
	3667, 2466, 52, 45, 405, 3667, -25, -33, 2400, 3667,
	3, 3829, 3, 3060, 3667, 356, 111, 84, -1000, 3667,
	-1000, 2334, 247, 3667, 105, 310, -1000, 3400, 875, -41,
	497, 245, -1000, 2268, 404, 243, -36, 2202, 3794, 3756,
	2136, 357, -1000, 401, 48, 273, 88, 81, 396, -67,
	-55, -67, 3667, -1000, -44, 393, 3667, 71, 312, -1000,
	3362, 808, -1000, -1000, -1000, 3667, 16, -33, 350, 242,
	-67, 3667, 3, 109, 3060, -23, 304, 64, 312, 61,
	310, 2070, -36, -1000, 3192, 302, -1000, 741, -1000, -1000,
	3667, 497, -1000, -1000, -1000, 1476, -1000, -1000, -1000, -1000,
	-36, -1000, -1000, 241, -36, -36, 2004, -36, 1938, 3721,
	-17, -1000, -1000, 315, 3667, -1000, -31, 350, -36, 272,
	268, 59, 103, -67, -1000, -29, 350, -31, 3, 308,
	-1000, 674, -1000, -1000, 3667, 1410, 3667, 238, 5, -1000,
	3667, 3060, -1000, 266, -36, 308, 302, -1000, 230, -1000,
	-1000, 3667, 1343, -1000, 229, -1000, 225, 222, -36, 221,
	-36, -36, 1872, 220, -1000, -1000, -36, 1806, 73, -38,
	390, -67, -4, 219, -36, -36, 265, 387, 218, -4,
	213, -67, -1000, -1000, 3667, 1276, -1000, 3667, 1740, -1000,
	-67, 1674, -36, 210, -1000, 1209, -1000, -1000, -1000, -1000,
	208, -1000, 203, 200, -36, -1000, -1000, -36, -36, -1000,
	350, -67, -1000, 198, 195, -36, 62, -1000, -1000, 1142,
	-1000, 1608, -1000, 3667, 3667, 194, 351, -1000, -1000, -1000,
	-1000, 191, -1000, -1000, -4, -1000, -1000, 190, 49, 262,
	-1000, -1000, -33, 3060, 349, 255, -1000, -1000, 188, -36,
	186, 132, -36, -36, 172, -1000, -36, 169, 168, -1000,
	167, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 42, 451, 9, 450, 358, 5, 16, 13, 6,
	448, 447, 445, 442, 440, 439, 10, 8, 185, 0,
	20, 26, 11, 2, 437, 436, 12, 434, 4, 433,
	432, 426, 424, 423, 422, 421, 420, 418, 19, 21,
	251, 95, 1, 416, 7,
}
var yyR1 = [...]int{

	0, 1, 1, 4, 4, 2, 2, 3, 3, 3,
	3, 3, 3, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 8, 8, 6,
	6, 7, 7, 7, 7, 10, 11, 11, 11, 11,
	11, 11, 11, 12, 12, 12, 13, 13, 13, 13,
	13, 13, 13, 13, 13, 13, 13, 9, 14, 15,
	15, 15, 15, 15, 16, 16, 17, 18, 18, 18,
	18, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	20, 20, 20, 21, 21, 21, 21, 21, 21, 21,
	22, 22, 23, 23, 24, 24, 25, 26, 27, 27,
	27, 27, 27, 27, 28, 28, 28, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 30, 30, 31,
	31, 31, 31, 31, 32, 32, 32, 32, 33, 33,
	33, 33, 33, 33, 33, 33, 37, 37, 37, 37,
	37, 37, 36, 36, 36, 35, 35, 35, 35, 35,
	35, 34, 34, 38, 38, 39, 39, 39, 41, 41,
	40, 40, 44, 43, 43, 43, 42, 42, 42, 42,
}
var yyR2 = [...]int{

	0, 1, 2, 2, 3, 2, 3, 0, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 2, 2, 1,
	13, 12, 9, 8, 6, 5, 6, 5, 4, 6,
	4, 1, 1, 1, 1, 1, 1, 2, 5, 1,
	1, 2, 3, 4, 5, 4, 3, 3, 5, 5,
	3, 3, 3, 5, 7, 5, 4, 7, 5, 6,
	7, 7, 8, 7, 8, 8, 9, 7, 7, 0,
	1, 1, 2, 2, 4, 4, 3, 0, 1, 4,
	4, 1, 1, 5, 3, 7, 8, 8, 9, 12,
	11, 2, 5, 7, 3, 5, 6, 4, 5, 5,
	6, 4, 5, 4, 4, 4, 4, 4, 6, 8,
	7, 3, 6, 10, 5, 1, 1, 1, 1, 1,
	0, 1, 4, 1, 3, 2, 2, 5, 2, 6,
	2, 4, 2, 3, 1, 1, 3, 1, 2, 1,
	1, 1, 1, 1, 0, 3, 6, 6, 5, 5,
	7, 8, 6, 5, 5, 7, 8, 3, 2, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 0, 1, 2, 1, 1, 0, 1,
	1, 2, 1, 2, 1, 1, 0, 2, 1, 1,
}
var yyChk = [...]int{

	-1000, -1, -38, -4, -39, 80, -40, -44, 84, -5,
	-6, 38, 39, 10, 12, -8, 29, 47, 55, 56,
	-12, -13, -14, -7, -9, -19, -10, -11, 28, 13,
	15, 44, 58, 49, -24, -27, 9, 81, -23, 76,
	4, -26, 54, 23, 50, 57, 74, -29, -30, -31,
	-32, -33, 11, -18, -25, 66, 5, 6, 24, 25,
	26, 51, 83, 68, 72, 69, -37, -36, -35, -34,
	-38, -39, -40, -44, -18, -19, 76, -19, 74, 4,
	-19, 76, 76, 14, 60, 52, 62, 27, 76, 81,
	16, 79, 51, 40, 41, 32, 33, 37, 34, 35,
	36, 69, 70, 71, 42, 43, 72, 65, 66, 67,
	17, 18, 63, 20, 64, 19, 22, 21, 74, 4,
	-19, 74, -20, -19, 80, -6, 4, -19, -19, 79,
	4, 76, 4, 67, 82, -41, -40, -21, 4, 69,
	-23, 57, 48, 49, 81, -20, -19, 76, 81, 76,
	76, 76, 74, 81, -41, -20, 4, 60, 59, 52,
	78, 5, -19, -19, -19, -19, -19, -19, -5, -1,
	76, 76, -19, -19, 13, 74, -19, -19, -19, -19,
	-18, -19, 61, -19, 4, -19, -19, -19, -19, -19,
	-19, -19, -19, -19, -19, -19, -19, -19, -19, -19,
	-19, -19, -19, -19, -19, -19, -19, -19, -19, 74,
	74, -1, -40, 16, 78, 74, 80, -19, 80, 74,
	59, -19, 74, -20, 76, 4, -23, -18, 74, 79,
	-21, -21, 81, -21, 74, 82, 77, 77, -18, -19,
	61, -19, -21, -21, 53, -41, -21, -28, -19, 60,
	-18, 76, -18, -19, -41, 75, -18, -18, 77, 78,
	77, -19, -1, 61, 8, 77, 82, 61, -19, -2,
	-38, -1, 75, -19, -41, -1, 74, -19, 80, 80,
	-19, -41, 4, 59, -40, 77, 8, -20, 67, 78,
	-42, -40, -41, 4, -21, -41, 60, 8, 77, 82,
	61, -19, 77, 77, 77, 78, 4, -28, 82, -42,
	78, 61, -18, -20, -19, -26, 30, 8, 77, 8,
	77, -19, 74, 75, -19, 77, 62, -19, 82, 82,
	61, -39, 75, -3, -8, -19, -6, -9, -7, 75,
	74, 4, 75, -1, 74, 74, -19, 74, -19, 80,
	-15, -17, -16, 46, 45, 4, -22, 4, 74, 77,
	77, 8, 4, -40, 82, -18, 82, -22, -18, 77,
	62, -19, 82, 82, 61, -19, 78, -42, -21, 75,
	-41, -19, 77, 4, 74, 77, 77, 77, -1, 62,
	82, 61, -19, -3, -1, 75, -1, -1, 74, -1,
	74, 74, -19, -41, -16, -17, 61, -19, -18, -40,
	-43, 78, -21, -1, 74, 74, 77, 76, -42, -21,
	-41, -40, 62, 82, 61, -19, 77, 78, -19, 75,
	74, -19, 74, -1, 75, -19, 82, 75, 75, 75,
	-1, 75, -1, -1, 74, 75, -1, 61, 61, 75,
	4, -40, 75, -1, -1, 74, -20, 75, 75, -19,
	82, -19, 77, -41, 61, -1, 75, 82, 75, 75,
	75, -1, -1, -1, -21, 75, 75, -1, 8, 77,
	82, 77, -28, -19, 75, 31, 75, 75, 77, 74,
	-42, 31, 74, 74, -1, 75, 74, -1, -1, 75,
	-1, 75, 75, 75,
}
var yyDef = [...]int{

	193, -2, -2, 193, 194, 197, 196, 200, 202, 3,
	14, 15, 16, 77, 0, 19, 0, 0, 0, 0,
	31, 32, 33, 34, 35, -2, 39, 40, 0, 0,
	-2, 0, 0, 0, 81, 82, 0, 198, 0, 120,
	137, 135, 0, 0, 0, 0, 198, 115, 116, 117,
	118, 119, 120, 0, 134, 0, 139, 140, 141, 142,
	143, 0, 0, 0, 0, 0, 164, 165, 166, 167,
	2, -2, 195, 201, 17, 78, 0, 18, 193, 137,
	0, 0, 0, 0, 0, 0, 0, 0, 77, 0,
	0, 0, 0, 168, 169, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 37, 0,
	0, 193, 0, 78, 0, 0, -2, 0, 41, 0,
	0, 120, 0, 0, -2, 77, 199, 0, 123, 0,
	0, 0, 0, 0, 0, 0, 0, 77, 0, 0,
	0, 0, 198, 0, 144, 0, 121, 77, 77, 0,
	198, 138, 159, 158, 160, 161, 162, 163, 4, 0,
	77, 77, 0, 0, 0, 193, 46, 51, 0, 84,
	0, 0, 0, 111, 136, 157, 170, 171, 172, 173,
	174, 175, 176, 177, 178, 179, 180, 181, 182, 183,
	184, 185, 186, 187, 188, 189, 190, 191, 192, 193,
	193, 0, 196, 0, 198, 193, 0, 0, 0, 198,
	0, 42, 0, 0, 120, 0, 133, 206, 198, 0,
	125, 126, 0, 128, 198, 132, 0, 94, 0, 0,
	0, 0, 0, 0, 0, 144, 0, 206, 0, 77,
	47, 120, 50, 52, 0, 0, 0, 0, 28, 0,
	30, 0, 0, 0, 0, 101, 104, 0, 0, 0,
	-2, 0, 56, 0, 0, 0, 193, 0, 0, 0,
	0, 69, 43, 0, 0, 0, 0, 0, 0, -2,
	0, 208, 77, 124, 0, 0, 77, 0, 97, 103,
	0, 0, 105, 106, 107, 0, 0, 206, 0, 0,
	-2, 0, 45, 0, 79, -2, 0, 0, -2, 0,
	-2, 0, 193, 55, 83, 99, 102, 0, 153, 154,
	0, -2, 38, 5, 8, -2, 10, 11, 12, 53,
	193, 122, 58, 0, 193, 193, 0, 193, 0, 0,
	198, 70, 71, 0, 77, 44, 0, 0, 193, 0,
	0, 0, 0, -2, 92, 206, 0, 198, 48, 95,
	98, 0, 148, 149, 0, 0, 0, 0, 0, 114,
	0, 145, 49, 0, 193, -2, -2, 29, 0, 100,
	152, 0, 0, 6, 0, 59, 0, 0, 193, 0,
	193, 193, 0, 0, 72, 73, 193, 78, 0, 204,
	0, 205, 130, 0, 193, 193, 0, 120, 0, 127,
	0, -2, 96, 147, 0, 0, 108, 0, 0, 112,
	198, 0, 193, 0, 54, 0, 155, 57, 60, 61,
	0, 63, 0, 0, 193, 68, 76, 193, 193, 67,
	0, 203, 85, 0, 0, 193, 0, 93, 129, 0,
	150, 0, 110, 144, 0, 0, 23, 156, 62, 64,
	65, 0, 74, 75, 131, 86, 87, 0, 0, 0,
	151, 109, 206, 146, 22, 0, 66, 88, 0, 193,
	0, 0, 193, 193, 0, 113, 193, 0, 0, 90,
	0, 21, 89, 20,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	84, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 83, 3, 3, 3, 71, 72, 3,
	76, 77, 69, 65, 78, 66, 79, 70, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 61, 80,
	63, 60, 64, 62, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 81, 3, 82, 68, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 74, 67, 75,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 73,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:117
		{
			yyVAL.compstmt = nil
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:121
		{
			yyVAL.compstmt = yyDollar[1].stmts
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:127
		{
			if yyDollar[2].stmt != nil {
				yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[2].stmt}}
			}
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmts
			}
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:136
		{
			if yyDollar[3].stmt != nil {
				if yyDollar[1].stmts == nil {
					yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[3].stmt}}
				} else {
					stmts := yyDollar[1].stmts.(*ast.StmtsStmt)
					stmts.Stmts = append(stmts.Stmts, yyDollar[3].stmt)
				}
				if l, ok := yylex.(*Lexer); ok {
					l.stmt = yyVAL.stmts
				}
			}
		}
	case 5:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:152
		{
			if yyDollar[2].modstmt != nil {
				yyVAL.modstmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[2].modstmt}}
			}
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.modstmts
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:161
		{
			if yyDollar[3].modstmt != nil {
				if yyDollar[1].modstmts == nil {
					yyVAL.modstmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[3].modstmt}}
				} else {
					stmts := yyDollar[1].modstmts.(*ast.StmtsStmt)
					stmts.Stmts = append(stmts.Stmts, yyDollar[3].modstmt)
				}
				if l, ok := yylex.(*Lexer); ok {
					l.stmt = yyVAL.modstmts
				}
			}
		}
	case 7:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:177
		{
			yyVAL.modstmt = nil
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:181
		{
			yyVAL.modstmt = yyDollar[1].stmt_module
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:185
		{
			yyVAL.modstmt = &ast.ExprStmt{Expr: yyDollar[1].expr}
			yyVAL.modstmt.SetPosition(yyDollar[1].expr.Position())
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:190
		{
			yyVAL.modstmt = yyDollar[1].stmt_var_or_lets
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:194
		{
			yyVAL.modstmt = yyDollar[1].stmt_struct
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:198
		{
			yyVAL.modstmt = yyDollar[1].stmt_import
		}
	case 13:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:205
		{
			yyVAL.stmt = nil
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:209
		{
			yyVAL.stmt = yyDollar[1].stmt_var_or_lets
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:213
		{
			yyVAL.stmt = &ast.BreakStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:218
		{
			yyVAL.stmt = &ast.ContinueStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 17:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:223
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyDollar[2].exprs}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 18:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:228
		{
			yyVAL.stmt = &ast.ThrowStmt{Expr: yyDollar[2].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:233
		{
			yyVAL.stmt = yyDollar[1].stmt_module
		}
	case 20:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.go.y:237
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt, Finally: yyDollar[12].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 21:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.go.y:242
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt, Finally: yyDollar[11].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 22:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:247
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 23:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:252
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:257
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:262
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:267
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].expr.Position())
		}
	case 27:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:272
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 28:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:277
		{
			yyVAL.stmt = &ast.DeleteStmt{Item: yyDollar[3].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 29:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:282
		{
			yyVAL.stmt = &ast.DeleteStmt{Item: yyDollar[3].expr, Key: yyDollar[5].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 30:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:287
		{
			yyVAL.stmt = &ast.CloseStmt{Expr: yyDollar[3].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:292
		{
			yyVAL.stmt = yyDollar[1].stmt_if
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:296
		{
			yyVAL.stmt = yyDollar[1].stmt_for
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:300
		{
			yyVAL.stmt = yyDollar[1].stmt_switch
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:304
		{
			yyVAL.stmt = yyDollar[1].stmt_import
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:308
		{
			yyVAL.stmt = yyDollar[1].stmt_struct
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:312
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyDollar[1].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].expr.Position())
		}
	case 37:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:319
		{
			yylex.Error("can't create anonymous module")
			return 1
		}
	case 38:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:324
		{
			yyVAL.stmt_module = &ast.ModuleStmt{Name: yyDollar[2].tok.Lit, Stmt: yyDollar[4].modstmts}
			yyVAL.stmt_module.SetPosition(yyDollar[1].tok.Position())
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:331
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_var
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:335
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_lets
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:341
		{
			yyVAL.stmt_import = &ast.ImportStmt{Name: yyDollar[2].expr}
			yyVAL.stmt_import.SetPosition(yyDollar[1].tok.Position())
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:347
		{
			yyVAL.stmt_import = &ast.ImportStmt{Name: yyDollar[3].expr, Local: true}
			yyVAL.stmt_import.SetPosition(yyDollar[1].tok.Position())
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:353
		{
			yyVAL.stmt_import = &ast.ImportStmt{Name: yyDollar[2].expr, As: yyDollar[4].tok.Lit}
			yyVAL.stmt_import.SetPosition(yyDollar[1].tok.Position())
		}
	case 44:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:359
		{
			yyVAL.stmt_import = &ast.ImportStmt{Name: yyDollar[3].expr, As: yyDollar[5].tok.Lit, Local: true}
			yyVAL.stmt_import.SetPosition(yyDollar[1].tok.Position())
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:366
		{
			yyVAL.stmt_var = &ast.VarStmt{Names: yyDollar[2].expr_idents, Exprs: yyDollar[4].exprs}
			yyVAL.stmt_var.SetPosition(yyDollar[1].tok.Position())
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:373
		{
			yyVAL.stmt_lets = &ast.LetsStmt{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{yyDollar[3].expr}}
			yyVAL.stmt_lets.SetPosition(yyDollar[1].expr.Position())
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:378
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_lets = &ast.LetMapItemStmt{LHSS: yyDollar[1].exprs, RHS: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_lets = &ast.LetsStmt{LHSS: yyDollar[1].exprs, RHSS: yyDollar[3].exprs}
				}
			} else {
				yyVAL.stmt_lets = &ast.LetsStmt{LHSS: yyDollar[1].exprs, RHSS: yyDollar[3].exprs}
			}
		}
	case 48:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:390
		{
			yyS := make([]ast.Expr, len(yyDollar[2].expr_idents))
			for i, yyv := range yyDollar[2].expr_idents {
				yyS[i] = &ast.IdentExpr{Lit: yyv}
			}
			yyVAL.stmt_lets = &ast.LetsStmt{LHSS: yyS, RHSS: yyDollar[5].exprs, Unpack: true}
		}
	case 49:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:399
		{
			yyS := make([]ast.Expr, len(yyDollar[4].expr_idents))
			for i, yyv := range yyDollar[4].expr_idents {
				yyS[i] = &ast.IdentExpr{Lit: yyv}
			}
			yyVAL.stmt_lets = &ast.LetsStmt{LHSS: yyS, RHSS: yyDollar[1].exprs, Unpack: true}
			yyVAL.stmt_lets.SetPosition(yyDollar[2].tok.Position())
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:409
		{
			// for maps
			if len(yyDollar[3].exprs) == 2 && len(yyDollar[1].exprs) == 1 {
				if _, ok := yyDollar[1].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_lets = &ast.LetMapItemStmt{LHSS: yyDollar[3].exprs, RHS: yyDollar[1].exprs[0]}
				} else {
					yyVAL.stmt_lets = &ast.LetsStmt{LHSS: yyDollar[3].exprs, RHSS: yyDollar[1].exprs}
				}
			} else {
				yyVAL.stmt_lets = &ast.LetsStmt{LHSS: yyDollar[3].exprs, RHSS: yyDollar[1].exprs}
			}
			yyVAL.stmt_lets.SetPosition(yyDollar[2].tok.Position())
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:423
		{
			yyVAL.stmt_lets = &ast.ChanStmt{LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
			yyVAL.stmt_lets.SetPosition(yyDollar[1].expr.Position())
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:428
		{
			if len(yyDollar[1].exprs) == 2 {
				chanStmt := &ast.ChanStmt{LHS: yyDollar[1].exprs[0].(ast.Expr), OkExpr: yyDollar[1].exprs[1].(ast.Expr), RHS: yyDollar[3].expr}
				yyVAL.stmt_lets = chanStmt
				yyVAL.stmt_lets.SetPosition(chanStmt.LHS.Position())
			} else if len(yyDollar[1].exprs) < 2 {
				yylex.Error("missing expressions on left side of channel operator")
				// TODO: return 1
				yyVAL.stmt_lets = &ast.ChanStmt{RHS: yyDollar[3].expr}
				yyVAL.stmt_lets.SetPosition(yyDollar[2].tok.Position())
			}
		}
	case 53:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:442
		{
			yyVAL.stmt_if = &ast.IfStmt{If: yyDollar[2].expr, Then: yyDollar[4].compstmt, Else: nil}
			yyVAL.stmt_if.SetPosition(yyDollar[1].tok.Position())
		}
	case 54:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:447
		{
			ifStmt := yyDollar[1].stmt_if.(*ast.IfStmt)
			ifStmt.ElseIf = append(ifStmt.ElseIf, &ast.IfStmt{If: yyDollar[4].expr, Then: yyDollar[6].compstmt})
		}
	case 55:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:452
		{
			ifStmt := yyDollar[1].stmt_if.(*ast.IfStmt)
			if ifStmt.Else != nil {
				yylex.Error("multiple else statement")
				return 1
			}
			ifStmt.Else = yyDollar[4].compstmt
		}
	case 56:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:463
		{
			yyVAL.stmt_for = &ast.LoopStmt{Stmt: yyDollar[3].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 57:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:468
		{
			if len(yyDollar[2].expr_idents) < 1 {
				yylex.Error("missing identifier")
				return 1
			}
			if len(yyDollar[2].expr_idents) > 2 {
				yylex.Error("too many identifiers")
				return 1
			}
			yyVAL.stmt_for = &ast.ForStmt{Vars: yyDollar[2].expr_idents, Value: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 58:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:481
		{
			yyVAL.stmt_for = &ast.LoopStmt{Expr: yyDollar[2].expr, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 59:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:486
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt: yyDollar[5].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 60:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:491
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr3: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 61:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:496
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 62:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:501
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 63:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:506
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 64:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:511
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 65:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:516
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 66:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:521
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Expr3: yyDollar[6].expr, Stmt: yyDollar[8].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 67:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:528
		{
			yyVAL.stmt_struct = &ast.StructStmt{
				Name: yyDollar[2].tok.Lit,
				Body: yyDollar[5].type_data_struct,
			}
		}
	case 68:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:537
		{
			switchStmt := yyDollar[5].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Expr = yyDollar[2].expr
			yyVAL.stmt_switch = switchStmt
			yyVAL.stmt_switch.SetPosition(yyDollar[1].tok.Position())
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:546
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{}
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:550
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Default: yyDollar[1].stmt_switch_default}
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:554
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Cases: []ast.Stmt{yyDollar[1].stmt_switch_case}}
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:558
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Cases = append(switchStmt.Cases, yyDollar[2].stmt_switch_case)
			yyVAL.stmt_switch_cases = switchStmt
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:564
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			if switchStmt.Default != nil {
				yylex.Error("multiple default statement")
				return 1
			}
			switchStmt.Default = yyDollar[2].stmt_switch_default
		}
	case 74:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:575
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: []ast.Expr{yyDollar[2].expr}, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:580
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: yyDollar[2].exprs, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:587
		{
			yyVAL.stmt_switch_default = yyDollar[3].compstmt
		}
	case 77:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:594
		{
			yyVAL.exprs = nil
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:598
		{
			yyVAL.exprs = []ast.Expr{yyDollar[1].expr}
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:602
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
				return 1
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr)
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:610
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
				return 1
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr_ident)
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:620
		{
			yyVAL.expr = yyDollar[1].expr_member_or_ident
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:624
		{
			yyVAL.expr = yyDollar[1].expr_literals
		}
	case 83:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:628
		{
			yyVAL.expr = &ast.TernaryOpExpr{Expr: yyDollar[1].expr, LHS: yyDollar[3].expr, RHS: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:633
		{
			yyVAL.expr = &ast.NilCoalescingOpExpr{LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 85:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:638
		{
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].expr_idents, Stmt: yyDollar[6].compstmt}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 86:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:643
		{
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].expr_idents, Stmt: yyDollar[7].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 87:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:648
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].expr_idents, Stmt: yyDollar[7].compstmt}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 88:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:653
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].expr_idents, Stmt: yyDollar[8].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 89:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.go.y:658
		{
			yyVAL.expr = &ast.FuncExpr{Recv: yyDollar[3].tok.Lit, Name: yyDollar[5].tok.Lit, Params: yyDollar[7].expr_idents, Stmt: yyDollar[11].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 90:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.go.y:663
		{
			yyVAL.expr = &ast.FuncExpr{Recv: yyDollar[3].tok.Lit, Name: yyDollar[5].tok.Lit, Params: yyDollar[7].expr_idents, Stmt: yyDollar[10].compstmt}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:668
		{
			yyVAL.expr = &ast.ArrayExpr{}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 92:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:673
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[3].exprs}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 93:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:678
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[5].exprs, TypeData: &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:683
		{
			yyVAL.expr = &ast.ParenExpr{SubExpr: yyDollar[2].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 95:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:688
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 96:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:693
		{
			yyVAL.expr = &ast.CallErrExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 97:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:698
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:703
		{
			yyVAL.expr = &ast.CallErrExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 99:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:708
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 100:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:713
		{
			yyVAL.expr = &ast.AnonCallErrExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 101:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:718
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 102:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:723
		{
			yyVAL.expr = &ast.AnonCallErrExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 103:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:728
		{
			yyVAL.expr = &ast.ItemExpr{Item: yyDollar[1].expr_ident, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr_ident.Position())
		}
	case 104:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:733
		{
			yyVAL.expr = &ast.ItemExpr{Item: yyDollar[1].expr, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 105:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:738
		{
			yyVAL.expr = &ast.LenExpr{Expr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 106:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:743
		{
			if yyDollar[3].type_data.Kind == ast.TypeDefault {
				yyDollar[3].type_data.Kind = ast.TypePtr
				yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			} else {
				yyVAL.expr = &ast.MakeExpr{TypeData: &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[3].type_data}}
			}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 107:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:753
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 108:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:758
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 109:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:763
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr, CapExpr: yyDollar[7].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 110:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:768
		{
			yyVAL.expr = &ast.MakeTypeExpr{Name: yyDollar[4].tok.Lit, Type: yyDollar[6].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:773
		{
			yyVAL.expr = &ast.IncludeExpr{ItemExpr: yyDollar[1].expr, ListExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 112:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:778
		{
			yyDollar[4].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: &ast.TypeStruct{Name: "interface"}, SubType: &ast.TypeStruct{Name: "interface"}}
			yyVAL.expr = yyDollar[4].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 113:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:784
		{
			yyDollar[8].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
			yyVAL.expr = yyDollar[8].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 114:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:790
		{
			yyVAL.expr = yyDollar[3].expr_map
			yyVAL.expr.SetPosition(yyDollar[3].expr_map.Position())
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:795
		{
			yyVAL.expr = yyDollar[1].expr_slice
			yyVAL.expr.SetPosition(yyDollar[1].expr_slice.Position())
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:800
		{
			yyVAL.expr = yyDollar[1].expr_chan
			yyVAL.expr.SetPosition(yyDollar[1].expr_chan.Position())
		}
	case 120:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:809
		{
			yyVAL.expr_idents = []string{}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:813
		{
			yyVAL.expr_idents = []string{yyDollar[1].tok.Lit}
		}
	case 122:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:817
		{
			if len(yyDollar[1].expr_idents) == 0 {
				yylex.Error("syntax error: unexpected ','")
				return 1
			}
			yyVAL.expr_idents = append(yyDollar[1].expr_idents, yyDollar[4].tok.Lit)
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:827
		{
			yyVAL.type_data = &ast.TypeStruct{Name: yyDollar[1].tok.Lit}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:831
		{
			if yyDollar[1].type_data.Kind != ast.TypeDefault {
				yylex.Error("not type default")
				return 1
			}
			yyDollar[1].type_data.Env = append(yyDollar[1].type_data.Env, yyDollar[1].type_data.Name)
			yyDollar[1].type_data.Name = yyDollar[3].tok.Lit
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:840
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypePtr
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[2].type_data}
			}
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:849
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeSlice
				yyDollar[2].type_data.Dimensions = yyDollar[1].slice_count
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}
			}
		}
	case 127:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:859
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:863
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeChan
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeChan, SubType: yyDollar[2].type_data}
			}
		}
	case 129:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:872
		{
			yyVAL.type_data = yyDollar[4].type_data_struct
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:878
		{
			yyVAL.type_data_struct = &ast.TypeStruct{
				Kind:        ast.TypeStructType,
				StructNames: []string{yyDollar[1].tok.Lit},
				StructTypes: []*ast.TypeStruct{yyDollar[2].type_data},
				Name:        yyDollar[2].type_data.Name,
			}
		}
	case 131:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:887
		{
			if yyVAL.type_data_struct == nil || len(yyDollar[1].type_data_struct.StructNames) == 0 {
				yylex.Error("syntax error: expected type declaration")
				return 1
			}
			if yyDollar[3].tok.Lit[0] >= 97 {
				yylex.Error("struct declarations cannot start with a lowercase letter")
				return 1
			}

			yyVAL.type_data_struct.StructNames = append(yyVAL.type_data_struct.StructNames, yyDollar[3].tok.Lit)
			yyVAL.type_data_struct.StructTypes = append(yyVAL.type_data_struct.StructTypes, yyDollar[4].type_data)
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:903
		{
			yyVAL.slice_count = 1
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:907
		{
			yyVAL.slice_count = yyDollar[3].slice_count + 1
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:913
		{
			yyVAL.expr_member_or_ident = yyDollar[1].expr_member
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:917
		{
			yyVAL.expr_member_or_ident = yyDollar[1].expr_ident
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:923
		{
			yyVAL.expr_member = &ast.MemberExpr{Expr: yyDollar[1].expr, Name: yyDollar[3].tok.Lit}
			yyVAL.expr_member.SetPosition(yyDollar[1].expr.Position())
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:930
		{
			yyVAL.expr_ident = &ast.IdentExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr_ident.SetPosition(yyDollar[1].tok.Position())
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:937
		{
			num, err := toNumber("-" + yyDollar[2].tok.Lit)
			if err != nil {
				yylex.Error("invalid number: -" + yyDollar[2].tok.Lit)
				return 1
			}
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: num}
			yyVAL.expr_literals.SetPosition(yyDollar[2].tok.Position())
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:947
		{
			yyN := yyDollar[1].tok.Lit
			num, err := toNumber(yyN)
			if err != nil {
				yylex.Error("invalid number: " + yyN)
				return 1
			}
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: num}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:958
		{
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: stringToValue(yyDollar[1].tok.Lit)}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:963
		{
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: trueValue}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:968
		{
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: falseValue}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:973
		{
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: nilValue}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:980
		{
			yyVAL.expr_map = &ast.MapExpr{}
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:984
		{
			yyVAL.expr_map = &ast.MapExpr{Keys: []ast.Expr{yyDollar[1].expr}, Values: []ast.Expr{yyDollar[3].expr}}
		}
	case 146:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:988
		{
			if yyDollar[1].expr_map.Keys == nil {
				yylex.Error("syntax error: unexpected ','")
				return 1
			}
			yyVAL.expr_map.Keys = append(yyVAL.expr_map.Keys, yyDollar[4].expr)
			yyVAL.expr_map.Values = append(yyVAL.expr_map.Values, yyDollar[6].expr)
		}
	case 147:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:999
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 148:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1003
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: nil}
		}
	case 149:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1007
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr_ident, Begin: nil, End: yyDollar[4].expr}
		}
	case 150:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:1011
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr_ident, End: yyDollar[4].expr, Cap: yyDollar[6].expr}
		}
	case 151:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:1015
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: yyDollar[5].expr, Cap: yyDollar[7].expr}
		}
	case 152:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1019
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 153:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1023
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr, Begin: yyDollar[3].expr, End: nil}
		}
	case 154:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1027
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr, Begin: nil, End: yyDollar[4].expr}
		}
	case 155:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:1031
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr, End: yyDollar[4].expr, Cap: yyDollar[6].expr}
		}
	case 156:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:1035
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr, Begin: yyDollar[3].expr, End: yyDollar[5].expr, Cap: yyDollar[7].expr}
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1041
		{
			yyVAL.expr_chan = &ast.ChanExpr{LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1045
		{
			yyVAL.expr_chan = &ast.ChanExpr{RHS: yyDollar[2].expr}
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1051
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "-", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1056
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "!", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1061
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "^", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1066
		{
			yyVAL.expr = &ast.AddrExpr{Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1071
		{
			yyVAL.expr = &ast.DerefExpr{Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:1078
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:1083
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:1088
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:1093
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1100
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "+", RHS: oneLiteral}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1108
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "-", RHS: oneLiteral}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1116
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "+", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1124
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "-", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1132
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "|", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1140
		{
			rhs := &ast.OpExpr{Op: &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "*", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1148
		{
			rhs := &ast.OpExpr{Op: &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "/", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1156
		{
			rhs := &ast.OpExpr{Op: &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "&", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1167
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "*", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1172
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "/", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1177
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "%", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1182
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "<<", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1187
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: ">>", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1192
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "&", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1199
		{
			yyVAL.expr = &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "+", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1204
		{
			yyVAL.expr = &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "-", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1209
		{
			yyVAL.expr = &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "|", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1216
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "==", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1221
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "!=", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1226
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "<", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1231
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "<=", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1236
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: ">", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1241
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: ">=", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1248
		{
			yyVAL.expr = &ast.BinaryOperator{LHS: yyDollar[1].expr, Operator: "&&", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1253
		{
			yyVAL.expr = &ast.BinaryOperator{LHS: yyDollar[1].expr, Operator: "||", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	}
	goto yystack /* stack new state and value */
}
